
Wiseled_LBR_Illuminator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009db0  08009db0  0000adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb8  08009eb8  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009eb8  08009eb8  0000aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ec0  08009ec0  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec0  08009ec0  0000aec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ec4  08009ec4  0000aec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009ec8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e34  20000060  08009f28  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e94  08009f28  0000be94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d57  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005140  00000000  00000000  0002bde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00030f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000154d  00000000  00000000  00032af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002651b  00000000  00000000  0003403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222b4  00000000  00000000  0005a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b78  00000000  00000000  0007c80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007708  00000000  00000000  001613c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00168ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d98 	.word	0x08009d98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009d98 	.word	0x08009d98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000080 	.word	0x20000080
 80005cc:	20000120 	.word	0x20000120

080005d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetTimerTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetTimerTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	20000320 	.word	0x20000320
 8000600:	200003c0 	.word	0x200003c0

08000604 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_FREERTOS_Init+0x30>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f006 f9c1 	bl	80069a8 <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a03      	ldr	r2, [pc, #12]	@ (8000638 <MX_FREERTOS_Init+0x34>)
 800062a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08009dbc 	.word	0x08009dbc
 8000638:	2000007c 	.word	0x2000007c

0800063c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f006 f9fb 	bl	8006a40 <osDelay>
 800064a:	e7fb      	b.n	8000644 <StartDefaultTask+0x8>

0800064c <VAL_Init>:
/* Exported functions prototypes ---------------------------------------------*/
/**
  * @brief  Initialize all VAL modules
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
static inline VAL_Status VAL_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  VAL_Status status;
  
  /* Initialize system clock first */
  status = VAL_SysClock_Init();
 8000652:	f006 f983 	bl	800695c <VAL_SysClock_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <VAL_Init+0x18>
    return status;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	e025      	b.n	80006b0 <VAL_Init+0x64>
  }
  
  /* Initialize GPIO pins */
  status = VAL_Pins_Init();
 8000664:	f006 f82a 	bl	80066bc <VAL_Pins_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <VAL_Init+0x2a>
    return status;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	e01c      	b.n	80006b0 <VAL_Init+0x64>
  }
  
  /* Initialize serial communication */
  status = VAL_Serial_Init(NULL);
 8000676:	2000      	movs	r0, #0
 8000678:	f006 f8cc 	bl	8006814 <VAL_Serial_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <VAL_Init+0x3e>
    return status;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	e012      	b.n	80006b0 <VAL_Init+0x64>
  }
  
  /* Initialize PWM */
  status = VAL_PWM_Init();
 800068a:	f006 f81f 	bl	80066cc <VAL_PWM_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <VAL_Init+0x50>
    return status;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	e009      	b.n	80006b0 <VAL_Init+0x64>
  }
  
  /* Initialize analog inputs */
  status = VAL_Analog_Init();
 800069c:	f005 ffda 	bl	8006654 <VAL_Analog_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <VAL_Init+0x62>
    return status;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	e000      	b.n	80006b0 <VAL_Init+0x64>
//  status = VAL_DataStore_Init();
//  if (status != VAL_OK) {
//    return status;
//  }
  
  return VAL_OK;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <System_Init>:

/**
  * @brief Initialize system components
  * @retval None
  */
static void System_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  VAL_Status status;

  /* Initialize all Vendor Abstraction Layer modules */
  status = VAL_Init();
 80006be:	f7ff ffc5 	bl	800064c <VAL_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <System_Init+0x18>
    System_Error();
 80006cc:	f000 f80a 	bl	80006e4 <System_Error>
  }

  /* Send initialization message */
  VAL_Serial_Printf("Wiseled_LBR System initializing...\r\n");
 80006d0:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <System_Init+0x28>)
 80006d2:	f006 f8df 	bl	8006894 <VAL_Serial_Printf>

  /* Initialize application layer modules after FreeRTOS is started in MX_FREERTOS_Init */
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	08009dd8 	.word	0x08009dd8

080006e4 <System_Error>:

/**
  * @brief Handle system initialization error
  * @retval None
  */
static void System_Error(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Initialization error occurred */
  while (1) {
    /* Toggle LED rapidly to indicate error */
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006e8:	2108      	movs	r1, #8
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <System_Error+0x18>)
 80006ec:	f002 fb9c 	bl	8002e28 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80006f0:	2064      	movs	r0, #100	@ 0x64
 80006f2:	f000 fd69 	bl	80011c8 <HAL_Delay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006f6:	bf00      	nop
 80006f8:	e7f6      	b.n	80006e8 <System_Error+0x4>
 80006fa:	bf00      	nop
 80006fc:	48000400 	.word	0x48000400

08000700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d101      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000712:	f000 fd39 	bl	8001188 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40001400 	.word	0x40001400

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fd10 	bl	8001158 <HAL_Init>

  /* Initialize all configured peripherals through VAL */
  System_Init();
 8000738:	f7ff ffbe 	bl	80006b8 <System_Init>

  /* Send Hello World message*/
  VAL_Serial_Printf("Hello Lisandro 3...\r\n");
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <main+0x20>)
 800073e:	f006 f8a9 	bl	8006894 <VAL_Serial_Printf>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000742:	f7ff ff5f 	bl	8000604 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000746:	f006 f928 	bl	800699a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074a:	bf00      	nop
 800074c:	e7fd      	b.n	800074a <main+0x1a>
 800074e:	bf00      	nop
 8000750:	08009e00 	.word	0x08009e00

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800078c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f000 fb48 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	@ (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	@ (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f008 fe99 	bl	80094b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff ffd3 	bl	8000730 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800078c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000798:	08009ec8 	.word	0x08009ec8
  ldr r2, =_sbss
 800079c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007a0:	20002e94 	.word	0x20002e94

080007a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_IRQHandler>
	...

080007a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b4d      	ldr	r3, [pc, #308]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007c0:	4a4d      	ldr	r2, [pc, #308]	@ (80008f8 <MX_ADC1_Init+0x150>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007c4:	4b4b      	ldr	r3, [pc, #300]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b49      	ldr	r3, [pc, #292]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d2:	4b48      	ldr	r3, [pc, #288]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d8:	4b46      	ldr	r3, [pc, #280]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007de:	4b45      	ldr	r3, [pc, #276]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007e0:	2208      	movs	r2, #8
 80007e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e4:	4b43      	ldr	r3, [pc, #268]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ea:	4b42      	ldr	r3, [pc, #264]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80007f0:	4b40      	ldr	r3, [pc, #256]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007f2:	2206      	movs	r2, #6
 80007f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fe:	4b3d      	ldr	r3, [pc, #244]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000804:	4b3b      	ldr	r3, [pc, #236]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 8000806:	2200      	movs	r2, #0
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080a:	4b3a      	ldr	r3, [pc, #232]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000812:	4b38      	ldr	r3, [pc, #224]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000818:	4b36      	ldr	r3, [pc, #216]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4834      	ldr	r0, [pc, #208]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 8000822:	f000 fee3 	bl	80015ec <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800082c:	f7ff ff7a 	bl	8000724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000830:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <MX_ADC1_Init+0x154>)
 8000832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000834:	2306      	movs	r3, #6
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083c:	237f      	movs	r3, #127	@ 0x7f
 800083e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000840:	2304      	movs	r3, #4
 8000842:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4829      	ldr	r0, [pc, #164]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 800084e:	f001 f8a7 	bl	80019a0 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000858:	f7ff ff64 	bl	8000724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800085c:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <MX_ADC1_Init+0x158>)
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000860:	230c      	movs	r3, #12
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4822      	ldr	r0, [pc, #136]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 800086a:	f001 f899 	bl	80019a0 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000874:	f7ff ff56 	bl	8000724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000878:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <MX_ADC1_Init+0x15c>)
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800087c:	2312      	movs	r3, #18
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	481b      	ldr	r0, [pc, #108]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 8000886:	f001 f88b 	bl	80019a0 <HAL_ADC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000890:	f7ff ff48 	bl	8000724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_ADC1_Init+0x160>)
 8000896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000898:	2318      	movs	r3, #24
 800089a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4814      	ldr	r0, [pc, #80]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80008a2:	f001 f87d 	bl	80019a0 <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80008ac:	f7ff ff3a 	bl	8000724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_ADC1_Init+0x164>)
 80008b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80008c0:	f001 f86e 	bl	80019a0 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80008ca:	f7ff ff2b 	bl	8000724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_ADC1_Init+0x168>)
 80008d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008d2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_ADC1_Init+0x14c>)
 80008de:	f001 f85f 	bl	80019a0 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80008e8:	f7ff ff1c 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200007c0 	.word	0x200007c0
 80008f8:	50040000 	.word	0x50040000
 80008fc:	19200040 	.word	0x19200040
 8000900:	21800100 	.word	0x21800100
 8000904:	25b00200 	.word	0x25b00200
 8000908:	2a000400 	.word	0x2a000400
 800090c:	2e300800 	.word	0x2e300800
 8000910:	32601000 	.word	0x32601000

08000914 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09e      	sub	sp, #120	@ 0x78
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2254      	movs	r2, #84	@ 0x54
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f008 fd53 	bl	80093e0 <memset>
  if(adcHandle->Instance==ADC1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a2c <HAL_ADC_MspInit+0x118>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d16f      	bne.n	8000a24 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000944:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000948:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800094a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800094e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000958:	2310      	movs	r3, #16
 800095a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800095c:	2307      	movs	r3, #7
 800095e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4618      	mov	r0, r3
 8000974:	f003 f950 	bl	8003c18 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800097e:	f7ff fed1 	bl	8000724 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000982:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <HAL_ADC_MspInit+0x11c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a2a      	ldr	r2, [pc, #168]	@ (8000a30 <HAL_ADC_MspInit+0x11c>)
 8000988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <HAL_ADC_MspInit+0x11c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <HAL_ADC_MspInit+0x11c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a24      	ldr	r2, [pc, #144]	@ (8000a30 <HAL_ADC_MspInit+0x11c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <HAL_ADC_MspInit+0x11c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = LED1_ADC_Current_Pin|LED2_ADC_Current_Pin|LED3_ADC_Current_Pin|LED1_ADC_Temperature_Pin
 80009b2:	23fa      	movs	r3, #250	@ 0xfa
 80009b4:	667b      	str	r3, [r7, #100]	@ 0x64
                          |LED2_ADC_Temperature_Pin|LED3_ADC_Temperature_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009b6:	230b      	movs	r3, #11
 80009b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f002 f8ac 	bl	8002b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000a38 <HAL_ADC_MspInit+0x124>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009e6:	2280      	movs	r2, #128	@ 0x80
 80009e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ea:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 80009fc:	2220      	movs	r2, #32
 80009fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 8000a02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a08:	480a      	ldr	r0, [pc, #40]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 8000a0a:	f001 fe93 	bl	8002734 <HAL_DMA_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000a14:	f7ff fe86 	bl	8000724 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a06      	ldr	r2, [pc, #24]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 8000a1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <HAL_ADC_MspInit+0x120>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a24:	bf00      	nop
 8000a26:	3778      	adds	r7, #120	@ 0x78
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	50040000 	.word	0x50040000
 8000a30:	40021000 	.word	0x40021000
 8000a34:	20000824 	.word	0x20000824
 8000a38:	40020008 	.word	0x40020008

08000a3c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b2f      	ldr	r3, [pc, #188]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a2e      	ldr	r2, [pc, #184]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a28      	ldr	r2, [pc, #160]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <MX_GPIO_Init+0xd4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	481d      	ldr	r0, [pc, #116]	@ (8000b14 <MX_GPIO_Init+0xd8>)
 8000aa0:	f002 f9aa 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f002 f82f 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f002 f81d 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000aea:	2308      	movs	r3, #8
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_GPIO_Init+0xd8>)
 8000b02:	f002 f80f 	bl	8002b24 <HAL_GPIO_Init>

}
 8000b06:	bf00      	nop
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000400 	.word	0x48000400

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	@ 0x58
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2244      	movs	r2, #68	@ 0x44
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f008 fc5a 	bl	80093e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b3a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b3e:	f002 f9ab 	bl	8002e98 <HAL_PWREx_ControlVoltageScaling>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b48:	f7ff fdec 	bl	8000724 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b4c:	f002 f986 	bl	8002e5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <SystemClock_Config+0xc0>)
 8000b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b56:	4a20      	ldr	r2, [pc, #128]	@ (8000bd8 <SystemClock_Config+0xc0>)
 8000b58:	f023 0318 	bic.w	r3, r3, #24
 8000b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b60:	2314      	movs	r3, #20
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b70:	2360      	movs	r3, #96	@ 0x60
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b80:	2310      	movs	r3, #16
 8000b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b84:	2307      	movs	r3, #7
 8000b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 f9d5 	bl	8002f44 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ba0:	f7ff fdc0 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 fdd5 	bl	800376c <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bc8:	f7ff fdac 	bl	8000724 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bcc:	f003 fa1a 	bl	8004004 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bd0:	bf00      	nop
 8000bd2:	3758      	adds	r7, #88	@ 0x58
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	f06f 0001 	mvn.w	r0, #1
 8000c1a:	f001 fd61 	bl	80026e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	@ 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c3a:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <HAL_InitTick+0xe0>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3e:	4a33      	ldr	r2, [pc, #204]	@ (8000d0c <HAL_InitTick+0xe0>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c46:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <HAL_InitTick+0xe0>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c52:	f107 0210 	add.w	r2, r7, #16
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 ff49 	bl	8003af4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c6c:	f002 ff16 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8000c70:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c72:	e004      	b.n	8000c7e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c74:	f002 ff12 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c80:	4a23      	ldr	r2, [pc, #140]	@ (8000d10 <HAL_InitTick+0xe4>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	0c9b      	lsrs	r3, r3, #18
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000c8e:	4a22      	ldr	r2, [pc, #136]	@ (8000d18 <HAL_InitTick+0xec>)
 8000c90:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000c94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c98:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c9e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000cb2:	4818      	ldr	r0, [pc, #96]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000cb4:	f003 faa8 	bl	8004208 <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d11b      	bne.n	8000cfe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000cc6:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000cc8:	f003 faf6 	bl	80042b8 <HAL_TIM_Base_Start_IT>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d111      	bne.n	8000cfe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000cda:	2037      	movs	r0, #55	@ 0x37
 8000cdc:	f001 fd1c 	bl	8002718 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d808      	bhi.n	8000cf8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	2037      	movs	r0, #55	@ 0x37
 8000cec:	f001 fcf8 	bl	80026e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e002      	b.n	8000cfe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3738      	adds	r7, #56	@ 0x38
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	2000086c 	.word	0x2000086c
 8000d18:	40001400 	.word	0x40001400
 8000d1c:	20000004 	.word	0x20000004

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <DMA1_Channel1_IRQHandler+0x10>)
 8000d5e:	f001 fe01 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000824 	.word	0x20000824

08000d6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <TIM7_IRQHandler+0x10>)
 8000d72:	f003 fcbd 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000086c 	.word	0x2000086c

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f008 fb7c 	bl	80094ac <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000c000 	.word	0x2000c000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200008b8 	.word	0x200008b8
 8000de8:	20002e98 	.word	0x20002e98

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09a      	sub	sp, #104	@ 0x68
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	222c      	movs	r2, #44	@ 0x2c
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f008 fac8 	bl	80093e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e50:	4b4f      	ldr	r3, [pc, #316]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e52:	4a50      	ldr	r2, [pc, #320]	@ (8000f94 <MX_TIM1_Init+0x184>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000e56:	4b4e      	ldr	r3, [pc, #312]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e58:	224f      	movs	r2, #79	@ 0x4f
 8000e5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000e62:	4b4b      	ldr	r3, [pc, #300]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e64:	2263      	movs	r2, #99	@ 0x63
 8000e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b49      	ldr	r3, [pc, #292]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6e:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e74:	4b46      	ldr	r3, [pc, #280]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e7a:	4845      	ldr	r0, [pc, #276]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e7c:	f003 f9c4 	bl	8004208 <HAL_TIM_Base_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e86:	f7ff fc4d 	bl	8000724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e94:	4619      	mov	r1, r3
 8000e96:	483e      	ldr	r0, [pc, #248]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000e98:	f003 fe46 	bl	8004b28 <HAL_TIM_ConfigClockSource>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ea2:	f7ff fc3f 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea6:	483a      	ldr	r0, [pc, #232]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000ea8:	f003 fa5a 	bl	8004360 <HAL_TIM_PWM_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000eb2:	f7ff fc37 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4831      	ldr	r0, [pc, #196]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000eca:	f004 facd 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000ed4:	f7ff fc26 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed8:	2360      	movs	r3, #96	@ 0x60
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	4824      	ldr	r0, [pc, #144]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000efe:	f003 fcff 	bl	8004900 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f08:	f7ff fc0c 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f10:	2204      	movs	r2, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	481e      	ldr	r0, [pc, #120]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000f16:	f003 fcf3 	bl	8004900 <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000f20:	f7ff fc00 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f28:	2208      	movs	r2, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000f2e:	f003 fce7 	bl	8004900 <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f38:	f7ff fbf4 	bl	8000724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000f72:	f004 fadf 	bl	8005534 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000f7c:	f7ff fbd2 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <MX_TIM1_Init+0x180>)
 8000f82:	f000 f829 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000f86:	bf00      	nop
 8000f88:	3768      	adds	r7, #104	@ 0x68
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200008bc 	.word	0x200008bc
 8000f94:	40012c00 	.word	0x40012c00

08000f98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x38>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fae:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <HAL_TIM_MspPostInit+0x68>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d11d      	bne.n	8001036 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED1_PWM_White_Pin|LED2_PWM_Green_Pin|LED3_PWM_Red_Pin;
 8001012:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001024:	2301      	movs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f001 fd77 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40021000 	.word	0x40021000

08001048 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 800104e:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <MX_USART1_UART_Init+0x5c>)
 8001050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_USART1_UART_Init+0x58>)
 800108c:	f004 fae8 	bl	8005660 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001096:	f7ff fb45 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000908 	.word	0x20000908
 80010a4:	40013800 	.word	0x40013800

080010a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b09e      	sub	sp, #120	@ 0x78
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2254      	movs	r2, #84	@ 0x54
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 f989 	bl	80093e0 <memset>
  if(uartHandle->Instance==USART1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <HAL_UART_MspInit+0xa4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d135      	bne.n	8001144 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010d8:	2301      	movs	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fd97 	bl	8003c18 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff fb18 	bl	8000724 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_UART_MspInit+0xa8>)
 80010f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f8:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <HAL_UART_MspInit+0xa8>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <HAL_UART_MspInit+0xa8>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_UART_MspInit+0xa8>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <HAL_UART_MspInit+0xa8>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001118:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <HAL_UART_MspInit+0xa8>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001124:	23c0      	movs	r3, #192	@ 0xc0
 8001126:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001134:	2307      	movs	r3, #7
 8001136:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <HAL_UART_MspInit+0xac>)
 8001140:	f001 fcf0 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3778      	adds	r7, #120	@ 0x78
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013800 	.word	0x40013800
 8001150:	40021000 	.word	0x40021000
 8001154:	48000400 	.word	0x48000400

08001158 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001162:	2003      	movs	r0, #3
 8001164:	f001 fab1 	bl	80026ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001168:	200f      	movs	r0, #15
 800116a:	f7ff fd5f 	bl	8000c2c <HAL_InitTick>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	e001      	b.n	800117e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117a:	f7ff fd2f 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800117e:	79fb      	ldrb	r3, [r7, #7]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000990 	.word	0x20000990

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000990 	.word	0x20000990

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3360      	adds	r3, #96	@ 0x60
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <LL_ADC_SetOffset+0x44>)
 800129a:	4013      	ands	r3, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	03fff000 	.word	0x03fff000

080012c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3360      	adds	r3, #96	@ 0x60
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3360      	adds	r3, #96	@ 0x60
 80012fc:	461a      	mov	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	431a      	orrs	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3330      	adds	r3, #48	@ 0x30
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	211f      	movs	r1, #31
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0e9b      	lsrs	r3, r3, #26
 8001380:	f003 011f 	and.w	r1, r3, #31
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	431a      	orrs	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3314      	adds	r3, #20
 80013b0:	461a      	mov	r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	0e5b      	lsrs	r3, r3, #25
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	0d1b      	lsrs	r3, r3, #20
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2107      	movs	r1, #7
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	401a      	ands	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	0d1b      	lsrs	r3, r3, #20
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0318 	and.w	r3, r3, #24
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <LL_ADC_SetChannelSingleDiff+0x44>)
 800141c:	40d9      	lsrs	r1, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	400b      	ands	r3, r1
 8001422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	0007ffff 	.word	0x0007ffff

08001440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001478:	d101      	bne.n	800147e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800149c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014c8:	d101      	bne.n	80014ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001514:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001518:	f043 0202 	orr.w	r2, r3, #2
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <LL_ADC_IsEnabled+0x18>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <LL_ADC_IsEnabled+0x1a>
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b02      	cmp	r3, #2
 8001564:	d101      	bne.n	800156a <LL_ADC_IsDisableOngoing+0x18>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_ADC_IsDisableOngoing+0x1a>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001588:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800158c:	f043 0204 	orr.w	r2, r3, #4
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d101      	bne.n	80015de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e126      	b.n	8001854 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f97d 	bl	8000914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff19 	bl	8001464 <LL_ADC_IsDeepPowerDownEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff feff 	bl	8001440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff34 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d115      	bne.n	800167e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff18 	bl	800148c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800165c:	4b7f      	ldr	r3, [pc, #508]	@ (800185c <HAL_ADC_Init+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	4a7f      	ldr	r2, [pc, #508]	@ (8001860 <HAL_ADC_Init+0x274>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	3301      	adds	r3, #1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001670:	e002      	b.n	8001678 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3b01      	subs	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff16 	bl	80014b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001692:	f043 0210 	orr.w	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff76 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 80016b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 80bf 	bne.w	8001842 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80bb 	bne.w	8001842 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016d4:	f043 0202 	orr.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff23 	bl	800152c <LL_ADC_IsEnabled>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016ec:	485d      	ldr	r0, [pc, #372]	@ (8001864 <HAL_ADC_Init+0x278>)
 80016ee:	f7ff ff1d 	bl	800152c <LL_ADC_IsEnabled>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4619      	mov	r1, r3
 80016fe:	485a      	ldr	r0, [pc, #360]	@ (8001868 <HAL_ADC_Init+0x27c>)
 8001700:	f7ff fd86 	bl	8001210 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7e5b      	ldrb	r3, [r3, #25]
 8001708:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001714:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800171a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001722:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d106      	bne.n	8001740 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001736:	3b01      	subs	r3, #1
 8001738:	045b      	lsls	r3, r3, #17
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	4b42      	ldr	r3, [pc, #264]	@ (800186c <HAL_ADC_Init+0x280>)
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	430b      	orrs	r3, r1
 800176e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff26 	bl	80015c6 <LL_ADC_INJ_IsConversionOngoing>
 800177a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d13d      	bne.n	80017fe <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d13a      	bne.n	80017fe <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800178c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001794:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017a4:	f023 0302 	bic.w	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	69b9      	ldr	r1, [r7, #24]
 80017ae:	430b      	orrs	r3, r1
 80017b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d118      	bne.n	80017ee <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017d2:	4311      	orrs	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017de:	430a      	orrs	r2, r1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	e007      	b.n	80017fe <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10c      	bne.n	8001820 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	f023 010f 	bic.w	r1, r3, #15
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	631a      	str	r2, [r3, #48]	@ 0x30
 800181e:	e007      	b.n	8001830 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 020f 	bic.w	r2, r2, #15
 800182e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001834:	f023 0303 	bic.w	r3, r3, #3
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001840:	e007      	b.n	8001852 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001852:	7ffb      	ldrb	r3, [r7, #31]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000000 	.word	0x20000000
 8001860:	053e2d63 	.word	0x053e2d63
 8001864:	50040000 	.word	0x50040000
 8001868:	50040300 	.word	0x50040300
 800186c:	fff0c007 	.word	0xfff0c007

08001870 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe8d 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d167      	bne.n	800195c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_ADC_Start_DMA+0x2a>
 8001896:	2302      	movs	r3, #2
 8001898:	e063      	b.n	8001962 <HAL_ADC_Start_DMA+0xf2>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fc5e 	bl	8002164 <ADC_Enable>
 80018a8:	4603      	mov	r3, r0
 80018aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d14f      	bne.n	8001952 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	f023 0206 	bic.w	r2, r3, #6
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80018de:	e002      	b.n	80018e6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	4a20      	ldr	r2, [pc, #128]	@ (800196c <HAL_ADC_Start_DMA+0xfc>)
 80018ec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <HAL_ADC_Start_DMA+0x100>)
 80018f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001974 <HAL_ADC_Start_DMA+0x104>)
 80018fc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	221c      	movs	r2, #28
 8001904:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0210 	orr.w	r2, r2, #16
 800191c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3340      	adds	r3, #64	@ 0x40
 8001938:	4619      	mov	r1, r3
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f000 ffb1 	bl	80028a4 <HAL_DMA_Start_IT>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe14 	bl	8001578 <LL_ADC_REG_StartConversion>
 8001950:	e006      	b.n	8001960 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800195a:	e001      	b.n	8001960 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800195c:	2302      	movs	r3, #2
 800195e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001960:	7dfb      	ldrb	r3, [r7, #23]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0800232f 	.word	0x0800232f
 8001970:	08002407 	.word	0x08002407
 8001974:	08002423 	.word	0x08002423

08001978 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0b6      	sub	sp, #216	@ 0xd8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x22>
 80019be:	2302      	movs	r3, #2
 80019c0:	e3bb      	b.n	800213a <HAL_ADC_ConfigChannel+0x79a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fde6 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 83a0 	bne.w	800211c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d824      	bhi.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	3b02      	subs	r3, #2
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d81b      	bhi.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 80019f6:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <HAL_ADC_ConfigChannel+0x5c>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a15 	.word	0x08001a15
 8001a04:	08001a1d 	.word	0x08001a1d
 8001a08:	08001a25 	.word	0x08001a25
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a12:	e010      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a14:	2312      	movs	r3, #18
 8001a16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a1a:	e00c      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a1c:	2318      	movs	r3, #24
 8001a1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a22:	e008      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a2c:	e003      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a34:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001a44:	f7ff fc80 	bl	8001348 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fda7 	bl	80015a0 <LL_ADC_REG_IsConversionOngoing>
 8001a52:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fdb3 	bl	80015c6 <LL_ADC_INJ_IsConversionOngoing>
 8001a60:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 81a4 	bne.w	8001db6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 819f 	bne.w	8001db6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	461a      	mov	r2, r3
 8001a86:	f7ff fc8b 	bl	80013a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00a      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001abc:	f7ff fbdc 	bl	8001278 <LL_ADC_SetOffset>
 8001ac0:	e179      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fbf9 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x14e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fbee 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	e01e      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x18c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fbe3 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e004      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1a4>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	e018      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1d6>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e004      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fbb2 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb96 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x214>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb8b 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	e01e      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x252>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fb80 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x26a>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	e018      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x29c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e004      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	2101      	movs	r1, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb4f 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb33 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x2da>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb28 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	e01e      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x318>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb1d 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e004      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x330>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	e014      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x35a>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001cde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e004      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d106      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	2102      	movs	r1, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff faf0 	bl	80012ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2103      	movs	r1, #3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fad4 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10a      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x398>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2103      	movs	r1, #3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fac9 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	f003 021f 	and.w	r2, r3, #31
 8001d36:	e017      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x3c8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fabe 	bl	80012c0 <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e003      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x3e0>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	e011      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x404>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001d92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e003      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001d9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2103      	movs	r1, #3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fa9b 	bl	80012ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fbb6 	bl	800152c <LL_ADC_IsEnabled>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 8140 	bne.w	8002048 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f7ff fb0f 	bl	80013f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4a8f      	ldr	r2, [pc, #572]	@ (800201c <HAL_ADC_ConfigChannel+0x67c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	f040 8131 	bne.w	8002048 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x46e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	bf94      	ite	ls
 8001e06:	2301      	movls	r3, #1
 8001e08:	2300      	movhi	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	e019      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x4a2>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2b09      	cmp	r3, #9
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d079      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d107      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x4c2>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	3301      	adds	r3, #1
 8001e5a:	069b      	lsls	r3, r3, #26
 8001e5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e60:	e015      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x4ee>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e72:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	e003      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	069b      	lsls	r3, r3, #26
 8001e8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x50e>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	e017      	b.n	8001ede <HAL_ADC_ConfigChannel+0x53e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e003      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	ea42 0103 	orr.w	r1, r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x564>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f003 021f 	and.w	r2, r3, #31
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	051b      	lsls	r3, r3, #20
 8001f02:	e018      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x596>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	e003      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f003 021f 	and.w	r2, r3, #31
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f36:	430b      	orrs	r3, r1
 8001f38:	e081      	b.n	800203e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x5b6>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f54:	e015      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x5e2>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	069b      	lsls	r3, r3, #26
 8001f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x602>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0e9b      	lsrs	r3, r3, #26
 8001f94:	3301      	adds	r3, #1
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	e017      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x632>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	61bb      	str	r3, [r7, #24]
  return result;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e003      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	ea42 0103 	orr.w	r1, r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10d      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x65e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0e9b      	lsrs	r3, r3, #26
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f003 021f 	and.w	r2, r3, #31
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b1e      	subs	r3, #30
 8001ff6:	051b      	lsls	r3, r3, #20
 8001ff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	e01e      	b.n	800203c <HAL_ADC_ConfigChannel+0x69c>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	60fb      	str	r3, [r7, #12]
  return result;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d104      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e006      	b.n	8002028 <HAL_ADC_ConfigChannel+0x688>
 800201a:	bf00      	nop
 800201c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f003 021f 	and.w	r2, r3, #31
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b1e      	subs	r3, #30
 8002036:	051b      	lsls	r3, r3, #20
 8002038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800203c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002042:	4619      	mov	r1, r3
 8002044:	f7ff f9ac 	bl	80013a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b3d      	ldr	r3, [pc, #244]	@ (8002144 <HAL_ADC_ConfigChannel+0x7a4>)
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d06c      	beq.n	800212e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002054:	483c      	ldr	r0, [pc, #240]	@ (8002148 <HAL_ADC_ConfigChannel+0x7a8>)
 8002056:	f7ff f901 	bl	800125c <LL_ADC_GetCommonPathInternalCh>
 800205a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a3a      	ldr	r2, [pc, #232]	@ (800214c <HAL_ADC_ConfigChannel+0x7ac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d127      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800206c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d121      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a35      	ldr	r2, [pc, #212]	@ (8002150 <HAL_ADC_ConfigChannel+0x7b0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d157      	bne.n	800212e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800207e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002082:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002086:	4619      	mov	r1, r3
 8002088:	482f      	ldr	r0, [pc, #188]	@ (8002148 <HAL_ADC_ConfigChannel+0x7a8>)
 800208a:	f7ff f8d4 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800208e:	4b31      	ldr	r3, [pc, #196]	@ (8002154 <HAL_ADC_ConfigChannel+0x7b4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	4a30      	ldr	r2, [pc, #192]	@ (8002158 <HAL_ADC_ConfigChannel+0x7b8>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b6:	e03a      	b.n	800212e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a27      	ldr	r2, [pc, #156]	@ (800215c <HAL_ADC_ConfigChannel+0x7bc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d113      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_ADC_ConfigChannel+0x7b0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12a      	bne.n	800212e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e0:	4619      	mov	r1, r3
 80020e2:	4819      	ldr	r0, [pc, #100]	@ (8002148 <HAL_ADC_ConfigChannel+0x7a8>)
 80020e4:	f7ff f8a7 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020e8:	e021      	b.n	800212e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <HAL_ADC_ConfigChannel+0x7c0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d11c      	bne.n	800212e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d116      	bne.n	800212e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <HAL_ADC_ConfigChannel+0x7b0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800210e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002112:	4619      	mov	r1, r3
 8002114:	480c      	ldr	r0, [pc, #48]	@ (8002148 <HAL_ADC_ConfigChannel+0x7a8>)
 8002116:	f7ff f88e 	bl	8001236 <LL_ADC_SetCommonPathInternalCh>
 800211a:	e008      	b.n	800212e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002136:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800213a:	4618      	mov	r0, r3
 800213c:	37d8      	adds	r7, #216	@ 0xd8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	80080000 	.word	0x80080000
 8002148:	50040300 	.word	0x50040300
 800214c:	c7520000 	.word	0xc7520000
 8002150:	50040000 	.word	0x50040000
 8002154:	20000000 	.word	0x20000000
 8002158:	053e2d63 	.word	0x053e2d63
 800215c:	cb840000 	.word	0xcb840000
 8002160:	80000001 	.word	0x80000001

08002164 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f9d9 	bl	800152c <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d169      	bne.n	8002254 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <ADC_Enable+0xfc>)
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e055      	b.n	8002256 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff f994 	bl	80014dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021b4:	482b      	ldr	r0, [pc, #172]	@ (8002264 <ADC_Enable+0x100>)
 80021b6:	f7ff f851 	bl	800125c <LL_ADC_GetCommonPathInternalCh>
 80021ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <ADC_Enable+0x104>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	4a28      	ldr	r2, [pc, #160]	@ (800226c <ADC_Enable+0x108>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021de:	e002      	b.n	80021e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021ec:	f7fe ffe0 	bl	80011b0 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f2:	e028      	b.n	8002246 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f997 	bl	800152c <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f967 	bl	80014dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800220e:	f7fe ffcf 	bl	80011b0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d914      	bls.n	8002246 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d00d      	beq.n	8002246 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e007      	b.n	8002256 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d1cf      	bne.n	80021f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	8000003f 	.word	0x8000003f
 8002264:	50040300 	.word	0x50040300
 8002268:	20000000 	.word	0x20000000
 800226c:	053e2d63 	.word	0x053e2d63

08002270 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff f968 	bl	8001552 <LL_ADC_IsDisableOngoing>
 8002282:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f94f 	bl	800152c <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d047      	beq.n	8002324 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d144      	bne.n	8002324 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030d 	and.w	r3, r3, #13
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10c      	bne.n	80022c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f929 	bl	8001504 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2203      	movs	r2, #3
 80022b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ba:	f7fe ff79 	bl	80011b0 <HAL_GetTick>
 80022be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022c0:	e029      	b.n	8002316 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e023      	b.n	8002326 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022de:	f7fe ff67 	bl	80011b0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d914      	bls.n	8002316 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e007      	b.n	8002326 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1dc      	bne.n	80022de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002340:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002344:	2b00      	cmp	r3, #0
 8002346:	d14b      	bne.n	80023e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d021      	beq.n	80023a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ffdb 	bl	8001322 <LL_ADC_REG_IsTriggerSourceSWStart>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d032      	beq.n	80023d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12b      	bne.n	80023d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d11f      	bne.n	80023d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023a4:	e018      	b.n	80023d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f004 f959 	bl	8006690 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023de:	e00e      	b.n	80023fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff facd 	bl	800198c <HAL_ADC_ErrorCallback>
}
 80023f2:	e004      	b.n	80023fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff faaf 	bl	8001978 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002434:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	f043 0204 	orr.w	r2, r3, #4
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff fa9f 	bl	800198c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <LL_ADC_StartCalibration>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002468:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002472:	4313      	orrs	r3, r2
 8002474:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_IsCalibrationOnGoing>:
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800249c:	d101      	bne.n	80024a2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADCEx_Calibration_Start+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e04d      	b.n	8002568 <HAL_ADCEx_Calibration_Start+0xb8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff fecb 	bl	8002270 <ADC_Disable>
 80024da:	4603      	mov	r3, r0
 80024dc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d136      	bne.n	8002552 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024ec:	f023 0302 	bic.w	r3, r3, #2
 80024f0:	f043 0202 	orr.w	r2, r3, #2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff ffa9 	bl	8002456 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002504:	e014      	b.n	8002530 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3301      	adds	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002512:	d30d      	bcc.n	8002530 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f023 0312 	bic.w	r3, r3, #18
 800251c:	f043 0210 	orr.w	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e01b      	b.n	8002568 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ffa7 	bl	8002488 <LL_ADC_IsCalibrationOnGoing>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e2      	bne.n	8002506 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002544:	f023 0303 	bic.w	r3, r3, #3
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002550:	e005      	b.n	800255e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	f043 0210 	orr.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	@ (800260c <__NVIC_EnableIRQ+0x38>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	@ (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	@ (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff4c 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026f2:	f7ff ff61 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 80026f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	6978      	ldr	r0, [r7, #20]
 80026fe:	f7ff ffb1 	bl	8002664 <NVIC_EncodePriority>
 8002702:	4602      	mov	r2, r0
 8002704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff80 	bl	8002610 <__NVIC_SetPriority>
}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff54 	bl	80025d4 <__NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e098      	b.n	8002878 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b4d      	ldr	r3, [pc, #308]	@ (8002884 <HAL_DMA_Init+0x150>)
 800274e:	429a      	cmp	r2, r3
 8002750:	d80f      	bhi.n	8002772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b4b      	ldr	r3, [pc, #300]	@ (8002888 <HAL_DMA_Init+0x154>)
 800275a:	4413      	add	r3, r2
 800275c:	4a4b      	ldr	r2, [pc, #300]	@ (800288c <HAL_DMA_Init+0x158>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a48      	ldr	r2, [pc, #288]	@ (8002890 <HAL_DMA_Init+0x15c>)
 800276e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002770:	e00e      	b.n	8002790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_DMA_Init+0x160>)
 800277a:	4413      	add	r3, r2
 800277c:	4a43      	ldr	r2, [pc, #268]	@ (800288c <HAL_DMA_Init+0x158>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	009a      	lsls	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a42      	ldr	r2, [pc, #264]	@ (8002898 <HAL_DMA_Init+0x164>)
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027ea:	d039      	beq.n	8002860 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <HAL_DMA_Init+0x15c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11a      	bne.n	800282c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027f6:	4b29      	ldr	r3, [pc, #164]	@ (800289c <HAL_DMA_Init+0x168>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f003 031c 	and.w	r3, r3, #28
 8002802:	210f      	movs	r1, #15
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	4924      	ldr	r1, [pc, #144]	@ (800289c <HAL_DMA_Init+0x168>)
 800280c:	4013      	ands	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002810:	4b22      	ldr	r3, [pc, #136]	@ (800289c <HAL_DMA_Init+0x168>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 031c 	and.w	r3, r3, #28
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	491d      	ldr	r1, [pc, #116]	@ (800289c <HAL_DMA_Init+0x168>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
 800282a:	e019      	b.n	8002860 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800282c:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002834:	f003 031c 	and.w	r3, r3, #28
 8002838:	210f      	movs	r1, #15
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	4917      	ldr	r1, [pc, #92]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 8002842:	4013      	ands	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f003 031c 	and.w	r3, r3, #28
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	4911      	ldr	r1, [pc, #68]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40020407 	.word	0x40020407
 8002888:	bffdfff8 	.word	0xbffdfff8
 800288c:	cccccccd 	.word	0xcccccccd
 8002890:	40020000 	.word	0x40020000
 8002894:	bffdfbf8 	.word	0xbffdfbf8
 8002898:	40020400 	.word	0x40020400
 800289c:	400200a8 	.word	0x400200a8
 80028a0:	400204a8 	.word	0x400204a8

080028a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Start_IT+0x20>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e04b      	b.n	800295c <HAL_DMA_Start_IT+0xb8>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d13a      	bne.n	800294e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f8e0 	bl	8002ac2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 020e 	orr.w	r2, r2, #14
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00f      	b.n	800293c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 020a 	orr.w	r2, r2, #10
 800293a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e005      	b.n	800295a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800295a:	7dfb      	ldrb	r3, [r7, #23]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	f003 031c 	and.w	r3, r3, #28
 8002984:	2204      	movs	r2, #4
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d026      	beq.n	80029de <HAL_DMA_IRQHandler+0x7a>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d021      	beq.n	80029de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029bc:	f003 021c 	and.w	r2, r3, #28
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	2104      	movs	r1, #4
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d071      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029dc:	e06c      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f003 031c 	and.w	r3, r3, #28
 80029e6:	2202      	movs	r2, #2
 80029e8:	409a      	lsls	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02e      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xec>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d029      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 020a 	bic.w	r2, r2, #10
 8002a18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f003 021c 	and.w	r2, r3, #28
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2102      	movs	r1, #2
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d038      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a4e:	e033      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	f003 031c 	and.w	r3, r3, #28
 8002a58:	2208      	movs	r2, #8
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02a      	beq.n	8002aba <HAL_DMA_IRQHandler+0x156>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d025      	beq.n	8002aba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 020e 	bic.w	r2, r2, #14
 8002a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	f003 021c 	and.w	r2, r3, #28
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
}
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad4:	f003 021c 	and.w	r2, r3, #28
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d108      	bne.n	8002b06 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b04:	e007      	b.n	8002b16 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	60da      	str	r2, [r3, #12]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	e148      	b.n	8002dc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 813a 	beq.w	8002dc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_GPIO_Init+0x40>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d130      	bne.n	8002bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0201 	and.w	r2, r3, #1
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d017      	beq.n	8002c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d123      	bne.n	8002c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	6939      	ldr	r1, [r7, #16]
 8002c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8094 	beq.w	8002dc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c98:	4b52      	ldr	r3, [pc, #328]	@ (8002de4 <HAL_GPIO_Init+0x2c0>)
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9c:	4a51      	ldr	r2, [pc, #324]	@ (8002de4 <HAL_GPIO_Init+0x2c0>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8002de4 <HAL_GPIO_Init+0x2c0>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8002de8 <HAL_GPIO_Init+0x2c4>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cda:	d00d      	beq.n	8002cf8 <HAL_GPIO_Init+0x1d4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a43      	ldr	r2, [pc, #268]	@ (8002dec <HAL_GPIO_Init+0x2c8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <HAL_GPIO_Init+0x1d0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a42      	ldr	r2, [pc, #264]	@ (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_GPIO_Init+0x1cc>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e004      	b.n	8002cfa <HAL_GPIO_Init+0x1d6>
 8002cf0:	2307      	movs	r3, #7
 8002cf2:	e002      	b.n	8002cfa <HAL_GPIO_Init+0x1d6>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_GPIO_Init+0x1d6>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	f002 0203 	and.w	r2, r2, #3
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	4093      	lsls	r3, r2
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d0a:	4937      	ldr	r1, [pc, #220]	@ (8002de8 <HAL_GPIO_Init+0x2c4>)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d18:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d42:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d66:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d6c:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d90:	4a18      	ldr	r2, [pc, #96]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d96:	4b17      	ldr	r3, [pc, #92]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dba:	4a0e      	ldr	r2, [pc, #56]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f47f aeaf 	bne.w	8002b34 <HAL_GPIO_Init+0x10>
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
 8002dda:	371c      	adds	r7, #28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40010000 	.word	0x40010000
 8002dec:	48000400 	.word	0x48000400
 8002df0:	48000800 	.word	0x48000800
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	041a      	lsls	r2, r3, #16
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43d9      	mvns	r1, r3
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	400b      	ands	r3, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000

08002e7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40007000 	.word	0x40007000

08002e98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea6:	d130      	bne.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb4:	d038      	beq.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2232      	movs	r2, #50	@ 0x32
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0c9b      	lsrs	r3, r3, #18
 8002ed8:	3301      	adds	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002edc:	e002      	b.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef0:	d102      	bne.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f2      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f04:	d110      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e00f      	b.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f16:	d007      	beq.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f18:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f20:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	431bde83 	.word	0x431bde83

08002f44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f000 bc02 	b.w	800375c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f58:	4b96      	ldr	r3, [pc, #600]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f62:	4b94      	ldr	r3, [pc, #592]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80e4 	beq.w	8003142 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_RCC_OscConfig+0x4c>
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	f040 808b 	bne.w	800309e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	f040 8087 	bne.w	800309e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f90:	4b88      	ldr	r3, [pc, #544]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x64>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e3d9      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1a      	ldr	r2, [r3, #32]
 8002fac:	4b81      	ldr	r3, [pc, #516]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x7e>
 8002fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc0:	e005      	b.n	8002fce <HAL_RCC_OscConfig+0x8a>
 8002fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d223      	bcs.n	800301a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fdbe 	bl	8003b58 <RCC_SetFlashLatencyFromMSIRange>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e3ba      	b.n	800375c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe6:	4b73      	ldr	r3, [pc, #460]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a72      	ldr	r2, [pc, #456]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b70      	ldr	r3, [pc, #448]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	496d      	ldr	r1, [pc, #436]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003004:	4b6b      	ldr	r3, [pc, #428]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	4968      	ldr	r1, [pc, #416]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
 8003018:	e025      	b.n	8003066 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800301a:	4b66      	ldr	r3, [pc, #408]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a65      	ldr	r2, [pc, #404]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b63      	ldr	r3, [pc, #396]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4960      	ldr	r1, [pc, #384]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003038:	4b5e      	ldr	r3, [pc, #376]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	495b      	ldr	r1, [pc, #364]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fd7e 	bl	8003b58 <RCC_SetFlashLatencyFromMSIRange>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e37a      	b.n	800375c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003066:	f000 fc81 	bl	800396c <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b51      	ldr	r3, [pc, #324]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4950      	ldr	r1, [pc, #320]	@ (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a4e      	ldr	r2, [pc, #312]	@ (80031bc <HAL_RCC_OscConfig+0x278>)
 8003084:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003086:	4b4e      	ldr	r3, [pc, #312]	@ (80031c0 <HAL_RCC_OscConfig+0x27c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fdce 	bl	8000c2c <HAL_InitTick>
 8003090:	4603      	mov	r3, r0
 8003092:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d052      	beq.n	8003140 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	e35e      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d032      	beq.n	800310c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030a6:	4b43      	ldr	r3, [pc, #268]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a42      	ldr	r2, [pc, #264]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030b2:	f7fe f87d 	bl	80011b0 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ba:	f7fe f879 	bl	80011b0 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e347      	b.n	800375c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030cc:	4b39      	ldr	r3, [pc, #228]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d8:	4b36      	ldr	r3, [pc, #216]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a35      	ldr	r2, [pc, #212]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030de:	f043 0308 	orr.w	r3, r3, #8
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b33      	ldr	r3, [pc, #204]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4930      	ldr	r1, [pc, #192]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f6:	4b2f      	ldr	r3, [pc, #188]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	492b      	ldr	r1, [pc, #172]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
 800310a:	e01a      	b.n	8003142 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800310c:	4b29      	ldr	r3, [pc, #164]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a28      	ldr	r2, [pc, #160]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003118:	f7fe f84a 	bl	80011b0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003120:	f7fe f846 	bl	80011b0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e314      	b.n	800375c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x1dc>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d073      	beq.n	8003236 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d005      	beq.n	8003160 <HAL_RCC_OscConfig+0x21c>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d10e      	bne.n	8003178 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d10b      	bne.n	8003178 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d063      	beq.n	8003234 <HAL_RCC_OscConfig+0x2f0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d15f      	bne.n	8003234 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e2f1      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x24c>
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a0b      	ldr	r2, [pc, #44]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e025      	b.n	80031dc <HAL_RCC_OscConfig+0x298>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d114      	bne.n	80031c4 <HAL_RCC_OscConfig+0x280>
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a05      	ldr	r2, [pc, #20]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a02      	ldr	r2, [pc, #8]	@ (80031b4 <HAL_RCC_OscConfig+0x270>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e013      	b.n	80031dc <HAL_RCC_OscConfig+0x298>
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08009e30 	.word	0x08009e30
 80031bc:	20000000 	.word	0x20000000
 80031c0:	20000004 	.word	0x20000004
 80031c4:	4ba0      	ldr	r3, [pc, #640]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a9f      	ldr	r2, [pc, #636]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b9d      	ldr	r3, [pc, #628]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a9c      	ldr	r2, [pc, #624]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd ffe4 	bl	80011b0 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fd ffe0 	bl	80011b0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	@ 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e2ae      	b.n	800375c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fe:	4b92      	ldr	r3, [pc, #584]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x2a8>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fd ffd0 	bl	80011b0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd ffcc 	bl	80011b0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e29a      	b.n	800375c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003226:	4b88      	ldr	r3, [pc, #544]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x2d0>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d060      	beq.n	8003304 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b04      	cmp	r3, #4
 8003246:	d005      	beq.n	8003254 <HAL_RCC_OscConfig+0x310>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d119      	bne.n	8003282 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d116      	bne.n	8003282 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003254:	4b7c      	ldr	r3, [pc, #496]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_OscConfig+0x328>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e277      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b76      	ldr	r3, [pc, #472]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	4973      	ldr	r1, [pc, #460]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003280:	e040      	b.n	8003304 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d023      	beq.n	80032d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328a:	4b6f      	ldr	r3, [pc, #444]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6e      	ldr	r2, [pc, #440]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fd ff8b 	bl	80011b0 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329e:	f7fd ff87 	bl	80011b0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e255      	b.n	800375c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b0:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b62      	ldr	r3, [pc, #392]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	495f      	ldr	r1, [pc, #380]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e018      	b.n	8003304 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80032d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fd ff67 	bl	80011b0 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fd ff63 	bl	80011b0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e231      	b.n	800375c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f8:	4b53      	ldr	r3, [pc, #332]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03c      	beq.n	800338a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01c      	beq.n	8003352 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003318:	4b4b      	ldr	r3, [pc, #300]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800331a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331e:	4a4a      	ldr	r2, [pc, #296]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fd ff42 	bl	80011b0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fd ff3e 	bl	80011b0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e20c      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003342:	4b41      	ldr	r3, [pc, #260]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <HAL_RCC_OscConfig+0x3ec>
 8003350:	e01b      	b.n	800338a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003352:	4b3d      	ldr	r3, [pc, #244]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003358:	4a3b      	ldr	r2, [pc, #236]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fd ff25 	bl	80011b0 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336a:	f7fd ff21 	bl	80011b0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1ef      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800337c:	4b32      	ldr	r3, [pc, #200]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80a6 	beq.w	80034e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800339c:	4b2a      	ldr	r3, [pc, #168]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b4:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c4:	4b21      	ldr	r3, [pc, #132]	@ (800344c <HAL_RCC_OscConfig+0x508>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d118      	bne.n	8003402 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d0:	4b1e      	ldr	r3, [pc, #120]	@ (800344c <HAL_RCC_OscConfig+0x508>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_RCC_OscConfig+0x508>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033dc:	f7fd fee8 	bl	80011b0 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e4:	f7fd fee4 	bl	80011b0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1b2      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f6:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_RCC_OscConfig+0x508>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d108      	bne.n	800341c <HAL_RCC_OscConfig+0x4d8>
 800340a:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003410:	4a0d      	ldr	r2, [pc, #52]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800341a:	e029      	b.n	8003470 <HAL_RCC_OscConfig+0x52c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d115      	bne.n	8003450 <HAL_RCC_OscConfig+0x50c>
 8003424:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	4a07      	ldr	r2, [pc, #28]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	4a03      	ldr	r2, [pc, #12]	@ (8003448 <HAL_RCC_OscConfig+0x504>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003444:	e014      	b.n	8003470 <HAL_RCC_OscConfig+0x52c>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
 8003450:	4b9a      	ldr	r3, [pc, #616]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	4a99      	ldr	r2, [pc, #612]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003460:	4b96      	ldr	r3, [pc, #600]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003466:	4a95      	ldr	r2, [pc, #596]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003468:	f023 0304 	bic.w	r3, r3, #4
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fd fe9a 	bl	80011b0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fd fe96 	bl	80011b0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e162      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003496:	4b89      	ldr	r3, [pc, #548]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ed      	beq.n	8003480 <HAL_RCC_OscConfig+0x53c>
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a6:	f7fd fe83 	bl	80011b0 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fd fe7f 	bl	80011b0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e14b      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c4:	4b7d      	ldr	r3, [pc, #500]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ed      	bne.n	80034ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d8:	4b78      	ldr	r3, [pc, #480]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034dc:	4a77      	ldr	r2, [pc, #476]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 80034de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03c      	beq.n	800356a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01c      	beq.n	8003532 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034f8:	4b70      	ldr	r3, [pc, #448]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 80034fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034fe:	4a6f      	ldr	r2, [pc, #444]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fd fe52 	bl	80011b0 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003510:	f7fd fe4e 	bl	80011b0 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e11c      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003522:	4b66      	ldr	r3, [pc, #408]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ef      	beq.n	8003510 <HAL_RCC_OscConfig+0x5cc>
 8003530:	e01b      	b.n	800356a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003532:	4b62      	ldr	r3, [pc, #392]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003534:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003538:	4a60      	ldr	r2, [pc, #384]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fd fe35 	bl	80011b0 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800354a:	f7fd fe31 	bl	80011b0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0ff      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800355c:	4b57      	ldr	r3, [pc, #348]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 800355e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ef      	bne.n	800354a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80f3 	beq.w	800375a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	2b02      	cmp	r3, #2
 800357a:	f040 80c9 	bne.w	8003710 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800357e:	4b4f      	ldr	r3, [pc, #316]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 0203 	and.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	429a      	cmp	r2, r3
 8003590:	d12c      	bne.n	80035ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	3b01      	subs	r3, #1
 800359e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d123      	bne.n	80035ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d11b      	bne.n	80035ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d113      	bne.n	80035ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	3b01      	subs	r3, #1
 80035d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d109      	bne.n	80035ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	3b01      	subs	r3, #1
 80035e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d06b      	beq.n	80036c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d062      	beq.n	80036b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035f2:	4b32      	ldr	r3, [pc, #200]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0ac      	b.n	800375c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003602:	4b2e      	ldr	r3, [pc, #184]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2d      	ldr	r2, [pc, #180]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003608:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800360c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800360e:	f7fd fdcf 	bl	80011b0 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fd fdcb 	bl	80011b0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e099      	b.n	800375c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003628:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003634:	4b21      	ldr	r3, [pc, #132]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	4b21      	ldr	r3, [pc, #132]	@ (80036c0 <HAL_RCC_OscConfig+0x77c>)
 800363a:	4013      	ands	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003644:	3a01      	subs	r2, #1
 8003646:	0112      	lsls	r2, r2, #4
 8003648:	4311      	orrs	r1, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800364e:	0212      	lsls	r2, r2, #8
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003656:	0852      	lsrs	r2, r2, #1
 8003658:	3a01      	subs	r2, #1
 800365a:	0552      	lsls	r2, r2, #21
 800365c:	4311      	orrs	r1, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003662:	0852      	lsrs	r2, r2, #1
 8003664:	3a01      	subs	r2, #1
 8003666:	0652      	lsls	r2, r2, #25
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800366e:	06d2      	lsls	r2, r2, #27
 8003670:	430a      	orrs	r2, r1
 8003672:	4912      	ldr	r1, [pc, #72]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003674:	4313      	orrs	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003678:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0f      	ldr	r2, [pc, #60]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003684:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a0c      	ldr	r2, [pc, #48]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800368e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003690:	f7fd fd8e 	bl	80011b0 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd fd8a 	bl	80011b0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e058      	b.n	800375c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	4b04      	ldr	r3, [pc, #16]	@ (80036bc <HAL_RCC_OscConfig+0x778>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b6:	e050      	b.n	800375a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e04f      	b.n	800375c <HAL_RCC_OscConfig+0x818>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c4:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d144      	bne.n	800375a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036d0:	4b24      	ldr	r3, [pc, #144]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a23      	ldr	r2, [pc, #140]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 80036d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036dc:	4b21      	ldr	r3, [pc, #132]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a20      	ldr	r2, [pc, #128]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 80036e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036e8:	f7fd fd62 	bl	80011b0 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fd fd5e 	bl	80011b0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e02c      	b.n	800375c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003702:	4b18      	ldr	r3, [pc, #96]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x7ac>
 800370e:	e024      	b.n	800375a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d01f      	beq.n	8003756 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a12      	ldr	r2, [pc, #72]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 800371c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fd45 	bl	80011b0 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fd fd41 	bl	80011b0 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e00f      	b.n	800375c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373c:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003748:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	4905      	ldr	r1, [pc, #20]	@ (8003764 <HAL_RCC_OscConfig+0x820>)
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCC_OscConfig+0x824>)
 8003750:	4013      	ands	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
 8003754:	e001      	b.n	800375a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	feeefffc 	.word	0xfeeefffc

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0e7      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b75      	ldr	r3, [pc, #468]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d910      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b72      	ldr	r3, [pc, #456]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 0207 	bic.w	r2, r3, #7
 8003796:	4970      	ldr	r1, [pc, #448]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b6e      	ldr	r3, [pc, #440]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0cf      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	4b66      	ldr	r3, [pc, #408]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d908      	bls.n	80037de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037cc:	4b63      	ldr	r3, [pc, #396]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4960      	ldr	r1, [pc, #384]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d04c      	beq.n	8003884 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f2:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d121      	bne.n	8003842 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0a6      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380a:	4b54      	ldr	r3, [pc, #336]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d115      	bne.n	8003842 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e09a      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003822:	4b4e      	ldr	r3, [pc, #312]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e08e      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003832:	4b4a      	ldr	r3, [pc, #296]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e086      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003842:	4b46      	ldr	r3, [pc, #280]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4943      	ldr	r1, [pc, #268]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003854:	f7fd fcac 	bl	80011b0 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fd fca8 	bl	80011b0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e06e      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	4b3a      	ldr	r3, [pc, #232]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 020c 	and.w	r2, r3, #12
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	429a      	cmp	r2, r3
 8003882:	d1eb      	bne.n	800385c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d010      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	4b31      	ldr	r3, [pc, #196]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800389c:	429a      	cmp	r2, r3
 800389e:	d208      	bcs.n	80038b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b2e      	ldr	r3, [pc, #184]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	492b      	ldr	r1, [pc, #172]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b2:	4b29      	ldr	r3, [pc, #164]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d210      	bcs.n	80038e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c0:	4b25      	ldr	r3, [pc, #148]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 0207 	bic.w	r2, r3, #7
 80038c8:	4923      	ldr	r1, [pc, #140]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d0:	4b21      	ldr	r3, [pc, #132]	@ (8003958 <HAL_RCC_ClockConfig+0x1ec>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e036      	b.n	8003950 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ee:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4918      	ldr	r1, [pc, #96]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4910      	ldr	r1, [pc, #64]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003920:	f000 f824 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	490b      	ldr	r1, [pc, #44]	@ (8003960 <HAL_RCC_ClockConfig+0x1f4>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
 800393c:	4a09      	ldr	r2, [pc, #36]	@ (8003964 <HAL_RCC_ClockConfig+0x1f8>)
 800393e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003940:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_RCC_ClockConfig+0x1fc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd f971 	bl	8000c2c <HAL_InitTick>
 800394a:	4603      	mov	r3, r0
 800394c:	72fb      	strb	r3, [r7, #11]

  return status;
 800394e:	7afb      	ldrb	r3, [r7, #11]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40022000 	.word	0x40022000
 800395c:	40021000 	.word	0x40021000
 8003960:	08009e30 	.word	0x08009e30
 8003964:	20000000 	.word	0x20000000
 8003968:	20000004 	.word	0x20000004

0800396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	@ 0x24
 8003970:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003984:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d121      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d11e      	bne.n	80039de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039a0:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039ac:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e005      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d102      	bne.n	80039ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039e4:	4b25      	ldr	r3, [pc, #148]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x110>)
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e004      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039f0:	4b23      	ldr	r3, [pc, #140]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x114>)
 80039f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	d134      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d003      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0xac>
 8003a10:	e005      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a12:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a14:	617b      	str	r3, [r7, #20]
      break;
 8003a16:	e005      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a18:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a1a:	617b      	str	r3, [r7, #20]
      break;
 8003a1c:	e002      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	617b      	str	r3, [r7, #20]
      break;
 8003a22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a24:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	3301      	adds	r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a32:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	fb03 f202 	mul.w	r2, r3, r2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	0e5b      	lsrs	r3, r3, #25
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	3301      	adds	r3, #1
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a64:	69bb      	ldr	r3, [r7, #24]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3724      	adds	r7, #36	@ 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08009e48 	.word	0x08009e48
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	007a1200 	.word	0x007a1200

08003a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b03      	ldr	r3, [pc, #12]	@ (8003a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000

08003a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003aa0:	f7ff fff0 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4904      	ldr	r1, [pc, #16]	@ (8003ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	08009e40 	.word	0x08009e40

08003ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003acc:	f7ff ffda 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	0adb      	lsrs	r3, r3, #11
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4904      	ldr	r1, [pc, #16]	@ (8003af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08009e40 	.word	0x08009e40

08003af4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	220f      	movs	r2, #15
 8003b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0203 	and.w	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_GetClockConfig+0x5c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	08db      	lsrs	r3, r3, #3
 8003b2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b36:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <HAL_RCC_GetClockConfig+0x60>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0207 	and.w	r2, r3, #7
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	601a      	str	r2, [r3, #0]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40022000 	.word	0x40022000

08003b58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b64:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b70:	f7ff f984 	bl	8002e7c <HAL_PWREx_GetVoltageRange>
 8003b74:	6178      	str	r0, [r7, #20]
 8003b76:	e014      	b.n	8003ba2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b25      	ldr	r3, [pc, #148]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	4a24      	ldr	r2, [pc, #144]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b84:	4b22      	ldr	r3, [pc, #136]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b90:	f7ff f974 	bl	8002e7c <HAL_PWREx_GetVoltageRange>
 8003b94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b96:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba8:	d10b      	bne.n	8003bc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b80      	cmp	r3, #128	@ 0x80
 8003bae:	d919      	bls.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bb4:	d902      	bls.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e013      	b.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	e010      	b.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b80      	cmp	r3, #128	@ 0x80
 8003bc6:	d902      	bls.n	8003bce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bc8:	2303      	movs	r3, #3
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	e00a      	b.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b80      	cmp	r3, #128	@ 0x80
 8003bd2:	d102      	bne.n	8003bda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	e004      	b.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b70      	cmp	r3, #112	@ 0x70
 8003bde:	d101      	bne.n	8003be4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003be0:	2301      	movs	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 0207 	bic.w	r2, r3, #7
 8003bec:	4909      	ldr	r1, [pc, #36]	@ (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bf4:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40022000 	.word	0x40022000

08003c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c20:	2300      	movs	r3, #0
 8003c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c24:	2300      	movs	r3, #0
 8003c26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d031      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c3c:	d01a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c42:	d814      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c4c:	d10f      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5a:	e00c      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f9de 	bl	8004024 <RCCEx_PLLSAI1_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	74fb      	strb	r3, [r7, #19]
      break;
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c7c:	4b51      	ldr	r3, [pc, #324]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	494e      	ldr	r1, [pc, #312]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c92:	e001      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 809e 	beq.w	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003caa:	4b46      	ldr	r3, [pc, #280]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00d      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	4b40      	ldr	r3, [pc, #256]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a39      	ldr	r2, [pc, #228]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce8:	f7fd fa62 	bl	80011b0 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cee:	e009      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf0:	f7fd fa5e 	bl	80011b0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d902      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	74fb      	strb	r3, [r7, #19]
        break;
 8003d02:	e005      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d04:	4b30      	ldr	r3, [pc, #192]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ef      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d15a      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d16:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d019      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d32:	4b24      	ldr	r3, [pc, #144]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d3e:	4b21      	ldr	r3, [pc, #132]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d5e:	4a19      	ldr	r2, [pc, #100]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d016      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fa1e 	bl	80011b0 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	e00b      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fa1a 	bl	80011b0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d902      	bls.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	74fb      	strb	r3, [r7, #19]
            break;
 8003d8e:	e006      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ec      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d9e:	7cfb      	ldrb	r3, [r7, #19]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da4:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003daa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db2:	4904      	ldr	r1, [pc, #16]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dba:	e009      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
 8003dc0:	e006      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd0:	7c7b      	ldrb	r3, [r7, #17]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b8a      	ldr	r3, [pc, #552]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	4a89      	ldr	r2, [pc, #548]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dee:	4b84      	ldr	r3, [pc, #528]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f023 0203 	bic.w	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4980      	ldr	r1, [pc, #512]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e10:	4b7b      	ldr	r3, [pc, #492]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 020c 	bic.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	4978      	ldr	r1, [pc, #480]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e32:	4b73      	ldr	r3, [pc, #460]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	496f      	ldr	r1, [pc, #444]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e54:	4b6a      	ldr	r3, [pc, #424]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e62:	4967      	ldr	r1, [pc, #412]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e76:	4b62      	ldr	r3, [pc, #392]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	495e      	ldr	r1, [pc, #376]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e98:	4b59      	ldr	r3, [pc, #356]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	4956      	ldr	r1, [pc, #344]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eba:	4b51      	ldr	r3, [pc, #324]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	494d      	ldr	r1, [pc, #308]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d028      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003edc:	4b48      	ldr	r3, [pc, #288]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	4945      	ldr	r1, [pc, #276]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b40      	ldr	r3, [pc, #256]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a3f      	ldr	r2, [pc, #252]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
 8003f08:	e011      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	2101      	movs	r1, #1
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f882 	bl	8004024 <RCCEx_PLLSAI1_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d028      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f3a:	4b31      	ldr	r3, [pc, #196]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f48:	492d      	ldr	r1, [pc, #180]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f58:	d106      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5a:	4b29      	ldr	r3, [pc, #164]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4a28      	ldr	r2, [pc, #160]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f64:	60d3      	str	r3, [r2, #12]
 8003f66:	e011      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f853 	bl	8004024 <RCCEx_PLLSAI1_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01c      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f98:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa6:	4916      	ldr	r1, [pc, #88]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f830 	bl	8004024 <RCCEx_PLLSAI1_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fde:	4b08      	ldr	r3, [pc, #32]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fec:	4904      	ldr	r1, [pc, #16]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ff4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000

08004004 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004008:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a04      	ldr	r2, [pc, #16]	@ (8004020 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000

08004024 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004032:	4b74      	ldr	r3, [pc, #464]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800403e:	4b71      	ldr	r3, [pc, #452]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0203 	and.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d10d      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
       ||
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004056:	4b6b      	ldr	r3, [pc, #428]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
       ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d047      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
 800406e:	e044      	b.n	80040fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d018      	beq.n	80040aa <RCCEx_PLLSAI1_Config+0x86>
 8004078:	2b03      	cmp	r3, #3
 800407a:	d825      	bhi.n	80040c8 <RCCEx_PLLSAI1_Config+0xa4>
 800407c:	2b01      	cmp	r3, #1
 800407e:	d002      	beq.n	8004086 <RCCEx_PLLSAI1_Config+0x62>
 8004080:	2b02      	cmp	r3, #2
 8004082:	d009      	beq.n	8004098 <RCCEx_PLLSAI1_Config+0x74>
 8004084:	e020      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004086:	4b5f      	ldr	r3, [pc, #380]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11d      	bne.n	80040ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004096:	e01a      	b.n	80040ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004098:	4b5a      	ldr	r3, [pc, #360]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a8:	e013      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040aa:	4b56      	ldr	r3, [pc, #344]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040b6:	4b53      	ldr	r3, [pc, #332]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040c6:	e006      	b.n	80040d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      break;
 80040cc:	e004      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ce:	bf00      	nop
 80040d0:	e002      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040de:	4b49      	ldr	r3, [pc, #292]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	430b      	orrs	r3, r1
 80040f4:	4943      	ldr	r1, [pc, #268]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d17c      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004100:	4b40      	ldr	r3, [pc, #256]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a3f      	ldr	r2, [pc, #252]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004106:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800410a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410c:	f7fd f850 	bl	80011b0 <HAL_GetTick>
 8004110:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004112:	e009      	b.n	8004128 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004114:	f7fd f84c 	bl	80011b0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d902      	bls.n	8004128 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	73fb      	strb	r3, [r7, #15]
        break;
 8004126:	e005      	b.n	8004134 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004128:	4b36      	ldr	r3, [pc, #216]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ef      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d15f      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d110      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004140:	4b30      	ldr	r3, [pc, #192]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004148:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6892      	ldr	r2, [r2, #8]
 8004150:	0211      	lsls	r1, r2, #8
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68d2      	ldr	r2, [r2, #12]
 8004156:	06d2      	lsls	r2, r2, #27
 8004158:	430a      	orrs	r2, r1
 800415a:	492a      	ldr	r1, [pc, #168]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
 8004160:	e027      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d112      	bne.n	800418e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004168:	4b26      	ldr	r3, [pc, #152]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004170:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6892      	ldr	r2, [r2, #8]
 8004178:	0211      	lsls	r1, r2, #8
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6912      	ldr	r2, [r2, #16]
 800417e:	0852      	lsrs	r2, r2, #1
 8004180:	3a01      	subs	r2, #1
 8004182:	0552      	lsls	r2, r2, #21
 8004184:	430a      	orrs	r2, r1
 8004186:	491f      	ldr	r1, [pc, #124]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	610b      	str	r3, [r1, #16]
 800418c:	e011      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800418e:	4b1d      	ldr	r3, [pc, #116]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004196:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6892      	ldr	r2, [r2, #8]
 800419e:	0211      	lsls	r1, r2, #8
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6952      	ldr	r2, [r2, #20]
 80041a4:	0852      	lsrs	r2, r2, #1
 80041a6:	3a01      	subs	r2, #1
 80041a8:	0652      	lsls	r2, r2, #25
 80041aa:	430a      	orrs	r2, r1
 80041ac:	4915      	ldr	r1, [pc, #84]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041b2:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a13      	ldr	r2, [pc, #76]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fc fff7 	bl	80011b0 <HAL_GetTick>
 80041c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041c4:	e009      	b.n	80041da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c6:	f7fc fff3 	bl	80011b0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d902      	bls.n	80041da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	73fb      	strb	r3, [r7, #15]
          break;
 80041d8:	e005      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041da:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	4903      	ldr	r1, [pc, #12]	@ (8004204 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e049      	b.n	80042ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc feb2 	bl	8000f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 fd60 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d001      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e03b      	b.n	8004348 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a19      	ldr	r2, [pc, #100]	@ (8004354 <HAL_TIM_Base_Start_IT+0x9c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_TIM_Base_Start_IT+0x4e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fa:	d004      	beq.n	8004306 <HAL_TIM_Base_Start_IT+0x4e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <HAL_TIM_Base_Start_IT+0xa0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d115      	bne.n	8004332 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b13      	ldr	r3, [pc, #76]	@ (800435c <HAL_TIM_Base_Start_IT+0xa4>)
 800430e:	4013      	ands	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d015      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0x8c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431e:	d011      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	e008      	b.n	8004344 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e000      	b.n	8004346 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004344:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40014000 	.word	0x40014000
 800435c:	00010007 	.word	0x00010007

08004360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e049      	b.n	8004406 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f841 	bl	800440e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f000 fcb4 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_TIM_PWM_Start+0x24>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e03c      	b.n	80044c2 <HAL_TIM_PWM_Start+0x9e>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b04      	cmp	r3, #4
 800444c:	d109      	bne.n	8004462 <HAL_TIM_PWM_Start+0x3e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	bf14      	ite	ne
 800445a:	2301      	movne	r3, #1
 800445c:	2300      	moveq	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	e02f      	b.n	80044c2 <HAL_TIM_PWM_Start+0x9e>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d109      	bne.n	800447c <HAL_TIM_PWM_Start+0x58>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	bf14      	ite	ne
 8004474:	2301      	movne	r3, #1
 8004476:	2300      	moveq	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e022      	b.n	80044c2 <HAL_TIM_PWM_Start+0x9e>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d109      	bne.n	8004496 <HAL_TIM_PWM_Start+0x72>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	bf14      	ite	ne
 800448e:	2301      	movne	r3, #1
 8004490:	2300      	moveq	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e015      	b.n	80044c2 <HAL_TIM_PWM_Start+0x9e>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b10      	cmp	r3, #16
 800449a:	d109      	bne.n	80044b0 <HAL_TIM_PWM_Start+0x8c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e008      	b.n	80044c2 <HAL_TIM_PWM_Start+0x9e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e07e      	b.n	80045c8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Start+0xb6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044d8:	e023      	b.n	8004522 <HAL_TIM_PWM_Start+0xfe>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d104      	bne.n	80044ea <HAL_TIM_PWM_Start+0xc6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044e8:	e01b      	b.n	8004522 <HAL_TIM_PWM_Start+0xfe>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_PWM_Start+0xd6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044f8:	e013      	b.n	8004522 <HAL_TIM_PWM_Start+0xfe>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	d104      	bne.n	800450a <HAL_TIM_PWM_Start+0xe6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004508:	e00b      	b.n	8004522 <HAL_TIM_PWM_Start+0xfe>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b10      	cmp	r3, #16
 800450e:	d104      	bne.n	800451a <HAL_TIM_PWM_Start+0xf6>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004518:	e003      	b.n	8004522 <HAL_TIM_PWM_Start+0xfe>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	6839      	ldr	r1, [r7, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 ff76 	bl	800541c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a26      	ldr	r2, [pc, #152]	@ (80045d0 <HAL_TIM_PWM_Start+0x1ac>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_TIM_PWM_Start+0x12a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a25      	ldr	r2, [pc, #148]	@ (80045d4 <HAL_TIM_PWM_Start+0x1b0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_TIM_PWM_Start+0x12a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a23      	ldr	r2, [pc, #140]	@ (80045d8 <HAL_TIM_PWM_Start+0x1b4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_Start+0x12e>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_TIM_PWM_Start+0x130>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004566:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <HAL_TIM_PWM_Start+0x1ac>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_TIM_PWM_Start+0x162>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800457a:	d004      	beq.n	8004586 <HAL_TIM_PWM_Start+0x162>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a14      	ldr	r2, [pc, #80]	@ (80045d4 <HAL_TIM_PWM_Start+0x1b0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d115      	bne.n	80045b2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	4b13      	ldr	r3, [pc, #76]	@ (80045dc <HAL_TIM_PWM_Start+0x1b8>)
 800458e:	4013      	ands	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d015      	beq.n	80045c4 <HAL_TIM_PWM_Start+0x1a0>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800459e:	d011      	beq.n	80045c4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	e008      	b.n	80045c4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e000      	b.n	80045c6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	00010007 	.word	0x00010007

080045e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 ff12 	bl	800541c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a39      	ldr	r2, [pc, #228]	@ (80046e4 <HAL_TIM_PWM_Stop+0x104>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_TIM_PWM_Stop+0x36>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a38      	ldr	r2, [pc, #224]	@ (80046e8 <HAL_TIM_PWM_Stop+0x108>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_TIM_PWM_Stop+0x36>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a36      	ldr	r2, [pc, #216]	@ (80046ec <HAL_TIM_PWM_Stop+0x10c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_TIM_PWM_Stop+0x3a>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_TIM_PWM_Stop+0x3c>
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d017      	beq.n	8004650 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	f241 1311 	movw	r3, #4369	@ 0x1111
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <HAL_TIM_PWM_Stop+0x70>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	f240 4344 	movw	r3, #1092	@ 0x444
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_TIM_PWM_Stop+0x70>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800464e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a1a      	ldr	r2, [r3, #32]
 8004656:	f241 1311 	movw	r3, #4369	@ 0x1111
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10f      	bne.n	8004680 <HAL_TIM_PWM_Stop+0xa0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6a1a      	ldr	r2, [r3, #32]
 8004666:	f240 4344 	movw	r3, #1092	@ 0x444
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <HAL_TIM_PWM_Stop+0xa0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <HAL_TIM_PWM_Stop+0xb0>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800468e:	e023      	b.n	80046d8 <HAL_TIM_PWM_Stop+0xf8>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d104      	bne.n	80046a0 <HAL_TIM_PWM_Stop+0xc0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800469e:	e01b      	b.n	80046d8 <HAL_TIM_PWM_Stop+0xf8>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d104      	bne.n	80046b0 <HAL_TIM_PWM_Stop+0xd0>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ae:	e013      	b.n	80046d8 <HAL_TIM_PWM_Stop+0xf8>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b0c      	cmp	r3, #12
 80046b4:	d104      	bne.n	80046c0 <HAL_TIM_PWM_Stop+0xe0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046be:	e00b      	b.n	80046d8 <HAL_TIM_PWM_Stop+0xf8>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d104      	bne.n	80046d0 <HAL_TIM_PWM_Stop+0xf0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046ce:	e003      	b.n	80046d8 <HAL_TIM_PWM_Stop+0xf8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400

080046f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fac7 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fab9 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 faca 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0204 	mvn.w	r2, #4
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 faa1 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa93 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 faa4 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0208 	mvn.w	r2, #8
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2204      	movs	r2, #4
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa7b 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa6d 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fa7e 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d020      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0210 	mvn.w	r2, #16
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa55 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa47 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa58 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0201 	mvn.w	r2, #1
 8004854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fb ff52 	bl	8000700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00c      	beq.n	800488a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fed7 	bl	8005638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80048a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fecf 	bl	800564c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00c      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa12 	bl	8004cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00c      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0220 	mvn.w	r2, #32
 80048ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fe97 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800491a:	2302      	movs	r3, #2
 800491c:	e0ff      	b.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b14      	cmp	r3, #20
 800492a:	f200 80f0 	bhi.w	8004b0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800492e:	a201      	add	r2, pc, #4	@ (adr r2, 8004934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004989 	.word	0x08004989
 8004938:	08004b0f 	.word	0x08004b0f
 800493c:	08004b0f 	.word	0x08004b0f
 8004940:	08004b0f 	.word	0x08004b0f
 8004944:	080049c9 	.word	0x080049c9
 8004948:	08004b0f 	.word	0x08004b0f
 800494c:	08004b0f 	.word	0x08004b0f
 8004950:	08004b0f 	.word	0x08004b0f
 8004954:	08004a0b 	.word	0x08004a0b
 8004958:	08004b0f 	.word	0x08004b0f
 800495c:	08004b0f 	.word	0x08004b0f
 8004960:	08004b0f 	.word	0x08004b0f
 8004964:	08004a4b 	.word	0x08004a4b
 8004968:	08004b0f 	.word	0x08004b0f
 800496c:	08004b0f 	.word	0x08004b0f
 8004970:	08004b0f 	.word	0x08004b0f
 8004974:	08004a8d 	.word	0x08004a8d
 8004978:	08004b0f 	.word	0x08004b0f
 800497c:	08004b0f 	.word	0x08004b0f
 8004980:	08004b0f 	.word	0x08004b0f
 8004984:	08004acd 	.word	0x08004acd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fa2c 	bl	8004dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0208 	orr.w	r2, r2, #8
 80049a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0204 	bic.w	r2, r2, #4
 80049b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	619a      	str	r2, [r3, #24]
      break;
 80049c6:	e0a5      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fa88 	bl	8004ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6999      	ldr	r1, [r3, #24]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	619a      	str	r2, [r3, #24]
      break;
 8004a08:	e084      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fae1 	bl	8004fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0208 	orr.w	r2, r2, #8
 8004a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0204 	bic.w	r2, r2, #4
 8004a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	61da      	str	r2, [r3, #28]
      break;
 8004a48:	e064      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fb39 	bl	80050c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69d9      	ldr	r1, [r3, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	021a      	lsls	r2, r3, #8
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	61da      	str	r2, [r3, #28]
      break;
 8004a8a:	e043      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fb76 	bl	8005184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004aca:	e023      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fbae 	bl	8005234 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
      break;
 8004b12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop

08004b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x1c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0b6      	b.n	8004cb2 <HAL_TIM_ConfigClockSource+0x18a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	d03e      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xd8>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b86:	f200 8087 	bhi.w	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x176>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d87f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004b98:	2b70      	cmp	r3, #112	@ 0x70
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xaa>
 8004b9c:	2b70      	cmp	r3, #112	@ 0x70
 8004b9e:	d87b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004ba0:	2b60      	cmp	r3, #96	@ 0x60
 8004ba2:	d050      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x11e>
 8004ba4:	2b60      	cmp	r3, #96	@ 0x60
 8004ba6:	d877      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004ba8:	2b50      	cmp	r3, #80	@ 0x50
 8004baa:	d03c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xfe>
 8004bac:	2b50      	cmp	r3, #80	@ 0x50
 8004bae:	d873      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bb0:	2b40      	cmp	r3, #64	@ 0x40
 8004bb2:	d058      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x13e>
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d86f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bb8:	2b30      	cmp	r3, #48	@ 0x30
 8004bba:	d064      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bbc:	2b30      	cmp	r3, #48	@ 0x30
 8004bbe:	d86b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d060      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d867      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d05a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bd0:	e062      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	f000 fbfb 	bl	80053dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
      break;
 8004bfe:	e04f      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	f000 fbe4 	bl	80053dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fb58 	bl	80052e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2150      	movs	r1, #80	@ 0x50
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fbb1 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e02c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fb77 	bl	8005346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2160      	movs	r1, #96	@ 0x60
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fba1 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 fb38 	bl	80052e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fb91 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 fb88 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e003      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <TIM_Base_SetConfig+0xd4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x20>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a27      	ldr	r2, [pc, #156]	@ (8004de0 <TIM_Base_SetConfig+0xd4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_Base_SetConfig+0x52>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4c:	d007      	beq.n	8004d5e <TIM_Base_SetConfig+0x52>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a24      	ldr	r2, [pc, #144]	@ (8004de4 <TIM_Base_SetConfig+0xd8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_Base_SetConfig+0x52>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a23      	ldr	r2, [pc, #140]	@ (8004de8 <TIM_Base_SetConfig+0xdc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a12      	ldr	r2, [pc, #72]	@ (8004de0 <TIM_Base_SetConfig+0xd4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <TIM_Base_SetConfig+0xa0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a11      	ldr	r2, [pc, #68]	@ (8004de4 <TIM_Base_SetConfig+0xd8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0xa0>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a10      	ldr	r2, [pc, #64]	@ (8004de8 <TIM_Base_SetConfig+0xdc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d103      	bne.n	8004db4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d105      	bne.n	8004dd2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f023 0201 	bic.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	611a      	str	r2, [r3, #16]
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400

08004dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0201 	bic.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0302 	bic.w	r3, r3, #2
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a24      	ldr	r2, [pc, #144]	@ (8004ed8 <TIM_OC1_SetConfig+0xec>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_OC1_SetConfig+0x70>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a23      	ldr	r2, [pc, #140]	@ (8004edc <TIM_OC1_SetConfig+0xf0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_OC1_SetConfig+0x70>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <TIM_OC1_SetConfig+0xf4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d10c      	bne.n	8004e76 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f023 0308 	bic.w	r3, r3, #8
 8004e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a17      	ldr	r2, [pc, #92]	@ (8004ed8 <TIM_OC1_SetConfig+0xec>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <TIM_OC1_SetConfig+0xa2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <TIM_OC1_SetConfig+0xf0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_OC1_SetConfig+0xa2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a15      	ldr	r2, [pc, #84]	@ (8004ee0 <TIM_OC1_SetConfig+0xf4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d111      	bne.n	8004eb2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400

08004ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f023 0210 	bic.w	r2, r3, #16
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0320 	bic.w	r3, r3, #32
 8004f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a22      	ldr	r2, [pc, #136]	@ (8004fcc <TIM_OC2_SetConfig+0xe8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d10d      	bne.n	8004f64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <TIM_OC2_SetConfig+0xe8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_OC2_SetConfig+0x98>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a18      	ldr	r2, [pc, #96]	@ (8004fd0 <TIM_OC2_SetConfig+0xec>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC2_SetConfig+0x98>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a17      	ldr	r2, [pc, #92]	@ (8004fd4 <TIM_OC2_SetConfig+0xf0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d113      	bne.n	8004fa4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400

08004fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a21      	ldr	r2, [pc, #132]	@ (80050bc <TIM_OC3_SetConfig+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10d      	bne.n	8005056 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <TIM_OC3_SetConfig+0xe4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_OC3_SetConfig+0x96>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <TIM_OC3_SetConfig+0xe8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC3_SetConfig+0x96>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a16      	ldr	r2, [pc, #88]	@ (80050c4 <TIM_OC3_SetConfig+0xec>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d113      	bne.n	8005096 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	621a      	str	r2, [r3, #32]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400

080050c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a14      	ldr	r2, [pc, #80]	@ (8005178 <TIM_OC4_SetConfig+0xb0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_OC4_SetConfig+0x74>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a13      	ldr	r2, [pc, #76]	@ (800517c <TIM_OC4_SetConfig+0xb4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_OC4_SetConfig+0x74>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a12      	ldr	r2, [pc, #72]	@ (8005180 <TIM_OC4_SetConfig+0xb8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d109      	bne.n	8005150 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400

08005184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a13      	ldr	r2, [pc, #76]	@ (8005228 <TIM_OC5_SetConfig+0xa4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d007      	beq.n	80051ee <TIM_OC5_SetConfig+0x6a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a12      	ldr	r2, [pc, #72]	@ (800522c <TIM_OC5_SetConfig+0xa8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <TIM_OC5_SetConfig+0x6a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <TIM_OC5_SetConfig+0xac>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d109      	bne.n	8005202 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	621a      	str	r2, [r3, #32]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400

08005234 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800527a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	051b      	lsls	r3, r3, #20
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a14      	ldr	r2, [pc, #80]	@ (80052dc <TIM_OC6_SetConfig+0xa8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_OC6_SetConfig+0x6c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a13      	ldr	r2, [pc, #76]	@ (80052e0 <TIM_OC6_SetConfig+0xac>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC6_SetConfig+0x6c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a12      	ldr	r2, [pc, #72]	@ (80052e4 <TIM_OC6_SetConfig+0xb0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d109      	bne.n	80052b4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	029b      	lsls	r3, r3, #10
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400

080052e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 030a 	bic.w	r3, r3, #10
 8005324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f023 0210 	bic.w	r2, r3, #16
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f043 0307 	orr.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	021a      	lsls	r2, r3, #8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	431a      	orrs	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2201      	movs	r2, #1
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	43db      	mvns	r3, r3
 800543e:	401a      	ands	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	431a      	orrs	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	e04f      	b.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a21      	ldr	r2, [pc, #132]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a14      	ldr	r2, [pc, #80]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e8:	d004      	beq.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a10      	ldr	r2, [pc, #64]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d10c      	bne.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	4313      	orrs	r3, r2
 8005504:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40014000 	.word	0x40014000

08005534 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800554c:	2302      	movs	r3, #2
 800554e:	e060      	b.n	8005612 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a14      	ldr	r2, [pc, #80]	@ (8005620 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d115      	bne.n	8005600 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	051b      	lsls	r3, r3, #20
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e040      	b.n	80056f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fb fd10 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	@ 0x24
 800568c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fb36 	bl	8005d18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f907 	bl	80058c0 <UART_SetConfig>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e01b      	b.n	80056f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fbb5 	bl	8005e5c <UART_CheckIdleState>
 80056f2:	4603      	mov	r3, r0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005710:	2b20      	cmp	r3, #32
 8005712:	d177      	bne.n	8005804 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_UART_Transmit+0x24>
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e070      	b.n	8005806 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2221      	movs	r2, #33	@ 0x21
 8005730:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005732:	f7fb fd3d 	bl	80011b0 <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005750:	d108      	bne.n	8005764 <HAL_UART_Transmit+0x68>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e003      	b.n	800576c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800576c:	e02f      	b.n	80057ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	@ 0x80
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fc17 	bl	8005fac <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e03b      	b.n	8005806 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	881a      	ldrh	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a0:	b292      	uxth	r2, r2
 80057a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	3302      	adds	r3, #2
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e007      	b.n	80057bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1c9      	bne.n	800576e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2140      	movs	r1, #64	@ 0x40
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fbe1 	bl	8005fac <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e005      	b.n	8005806 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	@ 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005824:	2b20      	cmp	r3, #32
 8005826:	d137      	bne.n	8005898 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_UART_Receive_IT+0x24>
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e030      	b.n	800589a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a18      	ldr	r2, [pc, #96]	@ (80058a4 <HAL_UART_Receive_IT+0x94>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d01f      	beq.n	8005888 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	613b      	str	r3, [r7, #16]
   return(result);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	69f9      	ldr	r1, [r7, #28]
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	61bb      	str	r3, [r7, #24]
   return(result);
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	461a      	mov	r2, r3
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fbfa 	bl	8006088 <UART_Start_Receive_IT>
 8005894:	4603      	mov	r3, r0
 8005896:	e000      	b.n	800589a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3728      	adds	r7, #40	@ 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40008000 	.word	0x40008000

080058a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b08a      	sub	sp, #40	@ 0x28
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	431a      	orrs	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	431a      	orrs	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4bb4      	ldr	r3, [pc, #720]	@ (8005bc0 <UART_SetConfig+0x300>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4aa9      	ldr	r2, [pc, #676]	@ (8005bc4 <UART_SetConfig+0x304>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005928:	4313      	orrs	r3, r2
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593c:	430a      	orrs	r2, r1
 800593e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4aa0      	ldr	r2, [pc, #640]	@ (8005bc8 <UART_SetConfig+0x308>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d126      	bne.n	8005998 <UART_SetConfig+0xd8>
 800594a:	4ba0      	ldr	r3, [pc, #640]	@ (8005bcc <UART_SetConfig+0x30c>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b03      	cmp	r3, #3
 8005956:	d81b      	bhi.n	8005990 <UART_SetConfig+0xd0>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0xa0>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005971 	.word	0x08005971
 8005964:	08005981 	.word	0x08005981
 8005968:	08005979 	.word	0x08005979
 800596c:	08005989 	.word	0x08005989
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005976:	e080      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005978:	2302      	movs	r3, #2
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597e:	e07c      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005980:	2304      	movs	r3, #4
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005986:	e078      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005988:	2308      	movs	r3, #8
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598e:	e074      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005990:	2310      	movs	r3, #16
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005996:	e070      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a8c      	ldr	r2, [pc, #560]	@ (8005bd0 <UART_SetConfig+0x310>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d138      	bne.n	8005a14 <UART_SetConfig+0x154>
 80059a2:	4b8a      	ldr	r3, [pc, #552]	@ (8005bcc <UART_SetConfig+0x30c>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	f003 030c 	and.w	r3, r3, #12
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	d82d      	bhi.n	8005a0c <UART_SetConfig+0x14c>
 80059b0:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <UART_SetConfig+0xf8>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005a0d 	.word	0x08005a0d
 80059c0:	08005a0d 	.word	0x08005a0d
 80059c4:	08005a0d 	.word	0x08005a0d
 80059c8:	080059fd 	.word	0x080059fd
 80059cc:	08005a0d 	.word	0x08005a0d
 80059d0:	08005a0d 	.word	0x08005a0d
 80059d4:	08005a0d 	.word	0x08005a0d
 80059d8:	080059f5 	.word	0x080059f5
 80059dc:	08005a0d 	.word	0x08005a0d
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059f2:	e042      	b.n	8005a7a <UART_SetConfig+0x1ba>
 80059f4:	2302      	movs	r3, #2
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059fa:	e03e      	b.n	8005a7a <UART_SetConfig+0x1ba>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a02:	e03a      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0a:	e036      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a12:	e032      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc4 <UART_SetConfig+0x304>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d12a      	bne.n	8005a74 <UART_SetConfig+0x1b4>
 8005a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8005bcc <UART_SetConfig+0x30c>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a2c:	d01a      	beq.n	8005a64 <UART_SetConfig+0x1a4>
 8005a2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a32:	d81b      	bhi.n	8005a6c <UART_SetConfig+0x1ac>
 8005a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a38:	d00c      	beq.n	8005a54 <UART_SetConfig+0x194>
 8005a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a3e:	d815      	bhi.n	8005a6c <UART_SetConfig+0x1ac>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <UART_SetConfig+0x18c>
 8005a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a48:	d008      	beq.n	8005a5c <UART_SetConfig+0x19c>
 8005a4a:	e00f      	b.n	8005a6c <UART_SetConfig+0x1ac>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a52:	e012      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a54:	2302      	movs	r3, #2
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5a:	e00e      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a62:	e00a      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a64:	2308      	movs	r3, #8
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6a:	e006      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a72:	e002      	b.n	8005a7a <UART_SetConfig+0x1ba>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a51      	ldr	r2, [pc, #324]	@ (8005bc4 <UART_SetConfig+0x304>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d17a      	bne.n	8005b7a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d824      	bhi.n	8005ad6 <UART_SetConfig+0x216>
 8005a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <UART_SetConfig+0x1d4>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ad7 	.word	0x08005ad7
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005ad7 	.word	0x08005ad7
 8005aa4:	08005ac7 	.word	0x08005ac7
 8005aa8:	08005ad7 	.word	0x08005ad7
 8005aac:	08005ad7 	.word	0x08005ad7
 8005ab0:	08005ad7 	.word	0x08005ad7
 8005ab4:	08005acf 	.word	0x08005acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f7fd fff0 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8005abc:	61f8      	str	r0, [r7, #28]
        break;
 8005abe:	e010      	b.n	8005ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac0:	4b44      	ldr	r3, [pc, #272]	@ (8005bd4 <UART_SetConfig+0x314>)
 8005ac2:	61fb      	str	r3, [r7, #28]
        break;
 8005ac4:	e00d      	b.n	8005ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac6:	f7fd ff51 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8005aca:	61f8      	str	r0, [r7, #28]
        break;
 8005acc:	e009      	b.n	8005ae2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ad2:	61fb      	str	r3, [r7, #28]
        break;
 8005ad4:	e005      	b.n	8005ae2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8107 	beq.w	8005cf8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d305      	bcc.n	8005b06 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d903      	bls.n	8005b0e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b0c:	e0f4      	b.n	8005cf8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2200      	movs	r2, #0
 8005b12:	461c      	mov	r4, r3
 8005b14:	4615      	mov	r5, r2
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	022b      	lsls	r3, r5, #8
 8005b20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b24:	0222      	lsls	r2, r4, #8
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	6849      	ldr	r1, [r1, #4]
 8005b2a:	0849      	lsrs	r1, r1, #1
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	4688      	mov	r8, r1
 8005b30:	4681      	mov	r9, r0
 8005b32:	eb12 0a08 	adds.w	sl, r2, r8
 8005b36:	eb43 0b09 	adc.w	fp, r3, r9
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b48:	4650      	mov	r0, sl
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	f7fa fb90 	bl	8000270 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b5e:	d308      	bcc.n	8005b72 <UART_SetConfig+0x2b2>
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b66:	d204      	bcs.n	8005b72 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	60da      	str	r2, [r3, #12]
 8005b70:	e0c2      	b.n	8005cf8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b78:	e0be      	b.n	8005cf8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b82:	d16a      	bne.n	8005c5a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005b84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d834      	bhi.n	8005bf6 <UART_SetConfig+0x336>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0x2d4>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005be1 	.word	0x08005be1
 8005ba0:	08005bf7 	.word	0x08005bf7
 8005ba4:	08005be7 	.word	0x08005be7
 8005ba8:	08005bf7 	.word	0x08005bf7
 8005bac:	08005bf7 	.word	0x08005bf7
 8005bb0:	08005bf7 	.word	0x08005bf7
 8005bb4:	08005bef 	.word	0x08005bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7fd ff70 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8005bbc:	61f8      	str	r0, [r7, #28]
        break;
 8005bbe:	e020      	b.n	8005c02 <UART_SetConfig+0x342>
 8005bc0:	efff69f3 	.word	0xefff69f3
 8005bc4:	40008000 	.word	0x40008000
 8005bc8:	40013800 	.word	0x40013800
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40004400 	.word	0x40004400
 8005bd4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd8:	f7fd ff76 	bl	8003ac8 <HAL_RCC_GetPCLK2Freq>
 8005bdc:	61f8      	str	r0, [r7, #28]
        break;
 8005bde:	e010      	b.n	8005c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d14 <UART_SetConfig+0x454>)
 8005be2:	61fb      	str	r3, [r7, #28]
        break;
 8005be4:	e00d      	b.n	8005c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be6:	f7fd fec1 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8005bea:	61f8      	str	r0, [r7, #28]
        break;
 8005bec:	e009      	b.n	8005c02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bf2:	61fb      	str	r3, [r7, #28]
        break;
 8005bf4:	e005      	b.n	8005c02 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d077      	beq.n	8005cf8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	005a      	lsls	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b0f      	cmp	r3, #15
 8005c22:	d916      	bls.n	8005c52 <UART_SetConfig+0x392>
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2a:	d212      	bcs.n	8005c52 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f023 030f 	bic.w	r3, r3, #15
 8005c34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	8afb      	ldrh	r3, [r7, #22]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	8afa      	ldrh	r2, [r7, #22]
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	e052      	b.n	8005cf8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c58:	e04e      	b.n	8005cf8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d827      	bhi.n	8005cb2 <UART_SetConfig+0x3f2>
 8005c62:	a201      	add	r2, pc, #4	@ (adr r2, 8005c68 <UART_SetConfig+0x3a8>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005cb3 	.word	0x08005cb3
 8005c78:	08005ca3 	.word	0x08005ca3
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f7fd ff06 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8005c90:	61f8      	str	r0, [r7, #28]
        break;
 8005c92:	e014      	b.n	8005cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fd ff18 	bl	8003ac8 <HAL_RCC_GetPCLK2Freq>
 8005c98:	61f8      	str	r0, [r7, #28]
        break;
 8005c9a:	e010      	b.n	8005cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <UART_SetConfig+0x454>)
 8005c9e:	61fb      	str	r3, [r7, #28]
        break;
 8005ca0:	e00d      	b.n	8005cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fd fe63 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8005ca6:	61f8      	str	r0, [r7, #28]
        break;
 8005ca8:	e009      	b.n	8005cbe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cae:	61fb      	str	r3, [r7, #28]
        break;
 8005cb0:	e005      	b.n	8005cbe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d019      	beq.n	8005cf8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	085a      	lsrs	r2, r3, #1
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	441a      	add	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d909      	bls.n	8005cf2 <UART_SetConfig+0x432>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce4:	d205      	bcs.n	8005cf2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	e002      	b.n	8005cf8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3728      	adds	r7, #40	@ 0x28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	00f42400 	.word	0x00f42400

08005d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01a      	beq.n	8005e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e16:	d10a      	bne.n	8005e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b098      	sub	sp, #96	@ 0x60
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e6c:	f7fb f9a0 	bl	80011b0 <HAL_GetTick>
 8005e70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d12e      	bne.n	8005ede <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f88c 	bl	8005fac <UART_WaitOnFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d021      	beq.n	8005ede <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e6      	bne.n	8005e9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e062      	b.n	8005fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d149      	bne.n	8005f80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f856 	bl	8005fac <UART_WaitOnFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d03c      	beq.n	8005f80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	623b      	str	r3, [r7, #32]
   return(result);
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e6      	bne.n	8005f06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3308      	adds	r3, #8
 8005f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f58:	61fa      	str	r2, [r7, #28]
 8005f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	69b9      	ldr	r1, [r7, #24]
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	617b      	str	r3, [r7, #20]
   return(result);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e5      	bne.n	8005f38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e011      	b.n	8005fa4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3758      	adds	r7, #88	@ 0x58
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fbc:	e04f      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d04b      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc6:	f7fb f8f3 	bl	80011b0 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e04e      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d037      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b80      	cmp	r3, #128	@ 0x80
 8005ff2:	d034      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b40      	cmp	r3, #64	@ 0x40
 8005ff8:	d031      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d110      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2208      	movs	r2, #8
 800600e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f8ff 	bl	8006214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2208      	movs	r2, #8
 800601a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e029      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006038:	d111      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f8e5 	bl	8006214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e00f      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	bf0c      	ite	eq
 800606e:	2301      	moveq	r3, #1
 8006070:	2300      	movne	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	429a      	cmp	r2, r3
 800607a:	d0a0      	beq.n	8005fbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006088:	b480      	push	{r7}
 800608a:	b097      	sub	sp, #92	@ 0x5c
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ba:	d10e      	bne.n	80060da <UART_Start_Receive_IT+0x52>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d105      	bne.n	80060d0 <UART_Start_Receive_IT+0x48>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80060ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060ce:	e02d      	b.n	800612c <UART_Start_Receive_IT+0xa4>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	22ff      	movs	r2, #255	@ 0xff
 80060d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060d8:	e028      	b.n	800612c <UART_Start_Receive_IT+0xa4>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10d      	bne.n	80060fe <UART_Start_Receive_IT+0x76>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <UART_Start_Receive_IT+0x6c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	22ff      	movs	r2, #255	@ 0xff
 80060ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060f2:	e01b      	b.n	800612c <UART_Start_Receive_IT+0xa4>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	227f      	movs	r2, #127	@ 0x7f
 80060f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80060fc:	e016      	b.n	800612c <UART_Start_Receive_IT+0xa4>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006106:	d10d      	bne.n	8006124 <UART_Start_Receive_IT+0x9c>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d104      	bne.n	800611a <UART_Start_Receive_IT+0x92>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	227f      	movs	r2, #127	@ 0x7f
 8006114:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006118:	e008      	b.n	800612c <UART_Start_Receive_IT+0xa4>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	223f      	movs	r2, #63	@ 0x3f
 800611e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006122:	e003      	b.n	800612c <UART_Start_Receive_IT+0xa4>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2222      	movs	r2, #34	@ 0x22
 8006138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3308      	adds	r3, #8
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	657b      	str	r3, [r7, #84]	@ 0x54
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800615c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800615e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800616a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006178:	d107      	bne.n	800618a <UART_Start_Receive_IT+0x102>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a21      	ldr	r2, [pc, #132]	@ (800620c <UART_Start_Receive_IT+0x184>)
 8006186:	669a      	str	r2, [r3, #104]	@ 0x68
 8006188:	e002      	b.n	8006190 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a20      	ldr	r2, [pc, #128]	@ (8006210 <UART_Start_Receive_IT+0x188>)
 800618e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d019      	beq.n	80061cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80061ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061b8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <UART_Start_Receive_IT+0x110>
 80061ca:	e018      	b.n	80061fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	613b      	str	r3, [r7, #16]
   return(result);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ea:	623b      	str	r3, [r7, #32]
 80061ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	69f9      	ldr	r1, [r7, #28]
 80061f0:	6a3a      	ldr	r2, [r7, #32]
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e6      	bne.n	80061cc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	375c      	adds	r7, #92	@ 0x5c
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	08006499 	.word	0x08006499
 8006210:	080062dd 	.word	0x080062dd

08006214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b095      	sub	sp, #84	@ 0x54
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623a:	643b      	str	r3, [r7, #64]	@ 0x40
 800623c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006240:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e6      	bne.n	800621c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3308      	adds	r3, #8
 8006254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	61fb      	str	r3, [r7, #28]
   return(result);
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3308      	adds	r3, #8
 800626c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800626e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e5      	bne.n	800624e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006286:	2b01      	cmp	r3, #1
 8006288:	d118      	bne.n	80062bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	60bb      	str	r3, [r7, #8]
   return(result);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f023 0310 	bic.w	r3, r3, #16
 800629e:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6979      	ldr	r1, [r7, #20]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	613b      	str	r3, [r7, #16]
   return(result);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e6      	bne.n	800628a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062d0:	bf00      	nop
 80062d2:	3754      	adds	r7, #84	@ 0x54
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b09c      	sub	sp, #112	@ 0x70
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062f4:	2b22      	cmp	r3, #34	@ 0x22
 80062f6:	f040 80be 	bne.w	8006476 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006300:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006304:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006308:	b2d9      	uxtb	r1, r3
 800630a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006314:	400a      	ands	r2, r1
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 80a3 	bne.w	800648a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006362:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006364:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e6      	bne.n	8006344 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	667b      	str	r3, [r7, #100]	@ 0x64
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006396:	647a      	str	r2, [r7, #68]	@ 0x44
 8006398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800639c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e5      	bne.n	8006376 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a34      	ldr	r2, [pc, #208]	@ (8006494 <UART_RxISR_8BIT+0x1b8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d01f      	beq.n	8006408 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d018      	beq.n	8006408 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	623b      	str	r3, [r7, #32]
   return(result);
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800640c:	2b01      	cmp	r3, #1
 800640e:	d12e      	bne.n	800646e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	60fb      	str	r3, [r7, #12]
   return(result);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0310 	bic.w	r3, r3, #16
 800642a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006434:	61fb      	str	r3, [r7, #28]
 8006436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	69b9      	ldr	r1, [r7, #24]
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	617b      	str	r3, [r7, #20]
   return(result);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b10      	cmp	r3, #16
 8006454:	d103      	bne.n	800645e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2210      	movs	r2, #16
 800645c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff fa1e 	bl	80058a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800646c:	e00d      	b.n	800648a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa50 	bl	8006914 <HAL_UART_RxCpltCallback>
}
 8006474:	e009      	b.n	800648a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	8b1b      	ldrh	r3, [r3, #24]
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0208 	orr.w	r2, r2, #8
 8006486:	b292      	uxth	r2, r2
 8006488:	831a      	strh	r2, [r3, #24]
}
 800648a:	bf00      	nop
 800648c:	3770      	adds	r7, #112	@ 0x70
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40008000 	.word	0x40008000

08006498 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b09c      	sub	sp, #112	@ 0x70
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b0:	2b22      	cmp	r3, #34	@ 0x22
 80064b2:	f040 80be 	bne.w	8006632 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80064c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80064ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80064ce:	4013      	ands	r3, r2
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064da:	1c9a      	adds	r2, r3, #2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 80a3 	bne.w	8006646 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800650e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006514:	667b      	str	r3, [r7, #100]	@ 0x64
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800651e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006520:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006524:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800652c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e6      	bne.n	8006500 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	f023 0301 	bic.w	r3, r3, #1
 8006548:	663b      	str	r3, [r7, #96]	@ 0x60
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006552:	643a      	str	r2, [r7, #64]	@ 0x40
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e5      	bne.n	8006532 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a34      	ldr	r2, [pc, #208]	@ (8006650 <UART_RxISR_16BIT+0x1b8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d01f      	beq.n	80065c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d018      	beq.n	80065c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e6      	bne.n	8006592 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d12e      	bne.n	800662a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	60bb      	str	r3, [r7, #8]
   return(result);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f023 0310 	bic.w	r3, r3, #16
 80065e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6979      	ldr	r1, [r7, #20]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	613b      	str	r3, [r7, #16]
   return(result);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e6      	bne.n	80065d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b10      	cmp	r3, #16
 8006610:	d103      	bne.n	800661a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2210      	movs	r2, #16
 8006618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff f940 	bl	80058a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006628:	e00d      	b.n	8006646 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f972 	bl	8006914 <HAL_UART_RxCpltCallback>
}
 8006630:	e009      	b.n	8006646 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	8b1b      	ldrh	r3, [r3, #24]
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0208 	orr.w	r2, r2, #8
 8006642:	b292      	uxth	r2, r2
 8006644:	831a      	strh	r2, [r3, #24]
}
 8006646:	bf00      	nop
 8006648:	3770      	adds	r7, #112	@ 0x70
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40008000 	.word	0x40008000

08006654 <VAL_Analog_Init>:

/**
  * @brief  Initialize the analog module
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Analog_Init(void) {
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* Initialize ADC */
  MX_ADC1_Init();
 8006658:	f7fa f8a6 	bl	80007a8 <MX_ADC1_Init>
  
  /* Calibrate ADC */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 800665c:	217f      	movs	r1, #127	@ 0x7f
 800665e:	480a      	ldr	r0, [pc, #40]	@ (8006688 <VAL_Analog_Init+0x34>)
 8006660:	f7fb ff26 	bl	80024b0 <HAL_ADCEx_Calibration_Start>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <VAL_Analog_Init+0x1a>
    return VAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e00a      	b.n	8006684 <VAL_Analog_Init+0x30>
  }
  
  /* Start ADC in DMA mode */
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUFFER_SIZE) != HAL_OK) {
 800666e:	2206      	movs	r2, #6
 8006670:	4906      	ldr	r1, [pc, #24]	@ (800668c <VAL_Analog_Init+0x38>)
 8006672:	4805      	ldr	r0, [pc, #20]	@ (8006688 <VAL_Analog_Init+0x34>)
 8006674:	f7fb f8fc 	bl	8001870 <HAL_ADC_Start_DMA>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <VAL_Analog_Init+0x2e>
    return VAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <VAL_Analog_Init+0x30>
  }
  
  return VAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	bd80      	pop	{r7, pc}
 8006688:	200007c0 	.word	0x200007c0
 800668c:	20000994 	.word	0x20000994

08006690 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  ADC conversion complete callback
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a05      	ldr	r2, [pc, #20]	@ (80066b4 <HAL_ADC_ConvCpltCallback+0x24>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d102      	bne.n	80066a8 <HAL_ADC_ConvCpltCallback+0x18>
    conversionComplete = 1;
 80066a2:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_ADC_ConvCpltCallback+0x28>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	701a      	strb	r2, [r3, #0]
  }
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	50040000 	.word	0x50040000
 80066b8:	200009ac 	.word	0x200009ac

080066bc <VAL_Pins_Init>:

/**
  * @brief  Initialize the pins module
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Pins_Init(void) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Initialize GPIO */
  MX_GPIO_Init();
 80066c0:	f7fa f9bc 	bl	8000a3c <MX_GPIO_Init>
  
  return VAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <VAL_PWM_Init>:

/**
  * @brief  Initialize the PWM module
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_PWM_Init(void) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
  /* Initialize PWM timer */
  MX_TIM1_Init();
 80066d2:	f7fa fb9d 	bl	8000e10 <MX_TIM1_Init>
  
  /* Start PWM generation for all channels */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 80066d6:	2100      	movs	r1, #0
 80066d8:	481d      	ldr	r0, [pc, #116]	@ (8006750 <VAL_PWM_Init+0x84>)
 80066da:	f7fd fea3 	bl	8004424 <HAL_TIM_PWM_Start>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <VAL_PWM_Init+0x1c>
    return VAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e02e      	b.n	8006746 <VAL_PWM_Init+0x7a>
  }
  
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) {
 80066e8:	2104      	movs	r1, #4
 80066ea:	4819      	ldr	r0, [pc, #100]	@ (8006750 <VAL_PWM_Init+0x84>)
 80066ec:	f7fd fe9a 	bl	8004424 <HAL_TIM_PWM_Start>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <VAL_PWM_Init+0x36>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80066f6:	2100      	movs	r1, #0
 80066f8:	4815      	ldr	r0, [pc, #84]	@ (8006750 <VAL_PWM_Init+0x84>)
 80066fa:	f7fd ff71 	bl	80045e0 <HAL_TIM_PWM_Stop>
    return VAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e021      	b.n	8006746 <VAL_PWM_Init+0x7a>
  }
  
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) {
 8006702:	2108      	movs	r1, #8
 8006704:	4812      	ldr	r0, [pc, #72]	@ (8006750 <VAL_PWM_Init+0x84>)
 8006706:	f7fd fe8d 	bl	8004424 <HAL_TIM_PWM_Start>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <VAL_PWM_Init+0x58>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8006710:	2100      	movs	r1, #0
 8006712:	480f      	ldr	r0, [pc, #60]	@ (8006750 <VAL_PWM_Init+0x84>)
 8006714:	f7fd ff64 	bl	80045e0 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8006718:	2104      	movs	r1, #4
 800671a:	480d      	ldr	r0, [pc, #52]	@ (8006750 <VAL_PWM_Init+0x84>)
 800671c:	f7fd ff60 	bl	80045e0 <HAL_TIM_PWM_Stop>
    return VAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e010      	b.n	8006746 <VAL_PWM_Init+0x7a>
  }
  
  /* Initialize all channels to 0% intensity */
  for (uint8_t i = 0; i < PWM_CHANNEL_COUNT; i++) {
 8006724:	2300      	movs	r3, #0
 8006726:	71fb      	strb	r3, [r7, #7]
 8006728:	e009      	b.n	800673e <VAL_PWM_Init+0x72>
    VAL_PWM_SetIntensity(i + 1, 0);
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	3301      	adds	r3, #1
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f80e 	bl	8006754 <VAL_PWM_SetIntensity>
  for (uint8_t i = 0; i < PWM_CHANNEL_COUNT; i++) {
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	3301      	adds	r3, #1
 800673c:	71fb      	strb	r3, [r7, #7]
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d9f2      	bls.n	800672a <VAL_PWM_Init+0x5e>
  }
  
  return VAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200008bc 	.word	0x200008bc

08006754 <VAL_PWM_SetIntensity>:
  * @brief  Set PWM intensity for a specific channel
  * @param  channel: Channel number (1-3)
  * @param  intensity: Intensity value (0-100)
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_PWM_SetIntensity(uint8_t channel, uint8_t intensity) {
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	460a      	mov	r2, r1
 800675e:	71fb      	strb	r3, [r7, #7]
 8006760:	4613      	mov	r3, r2
 8006762:	71bb      	strb	r3, [r7, #6]
  /* Check parameters */
  if (channel < 1 || channel > PWM_CHANNEL_COUNT) {
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <VAL_PWM_SetIntensity+0x1c>
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	2b03      	cmp	r3, #3
 800676e:	d901      	bls.n	8006774 <VAL_PWM_SetIntensity+0x20>
    return VAL_PARAM;
 8006770:	2304      	movs	r3, #4
 8006772:	e045      	b.n	8006800 <VAL_PWM_SetIntensity+0xac>
  }
  
  if (intensity > PWM_MAX_INTENSITY) {
 8006774:	79bb      	ldrb	r3, [r7, #6]
 8006776:	2b64      	cmp	r3, #100	@ 0x64
 8006778:	d901      	bls.n	800677e <VAL_PWM_SetIntensity+0x2a>
    intensity = PWM_MAX_INTENSITY;
 800677a:	2364      	movs	r3, #100	@ 0x64
 800677c:	71bb      	strb	r3, [r7, #6]
  }
  
  /* Set PWM duty cycle */
  __HAL_TIM_SET_COMPARE(&htim1, pwmChannels[channel - 1], intensity);
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	3b01      	subs	r3, #1
 8006782:	4a22      	ldr	r2, [pc, #136]	@ (800680c <VAL_PWM_SetIntensity+0xb8>)
 8006784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <VAL_PWM_SetIntensity+0x42>
 800678c:	4b20      	ldr	r3, [pc, #128]	@ (8006810 <VAL_PWM_SetIntensity+0xbc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	79ba      	ldrb	r2, [r7, #6]
 8006792:	635a      	str	r2, [r3, #52]	@ 0x34
 8006794:	e033      	b.n	80067fe <VAL_PWM_SetIntensity+0xaa>
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	3b01      	subs	r3, #1
 800679a:	4a1c      	ldr	r2, [pc, #112]	@ (800680c <VAL_PWM_SetIntensity+0xb8>)
 800679c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d104      	bne.n	80067ae <VAL_PWM_SetIntensity+0x5a>
 80067a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <VAL_PWM_SetIntensity+0xbc>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	79bb      	ldrb	r3, [r7, #6]
 80067aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80067ac:	e027      	b.n	80067fe <VAL_PWM_SetIntensity+0xaa>
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	4a16      	ldr	r2, [pc, #88]	@ (800680c <VAL_PWM_SetIntensity+0xb8>)
 80067b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d104      	bne.n	80067c6 <VAL_PWM_SetIntensity+0x72>
 80067bc:	4b14      	ldr	r3, [pc, #80]	@ (8006810 <VAL_PWM_SetIntensity+0xbc>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	79bb      	ldrb	r3, [r7, #6]
 80067c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80067c4:	e01b      	b.n	80067fe <VAL_PWM_SetIntensity+0xaa>
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	4a10      	ldr	r2, [pc, #64]	@ (800680c <VAL_PWM_SetIntensity+0xb8>)
 80067cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d0:	2b0c      	cmp	r3, #12
 80067d2:	d104      	bne.n	80067de <VAL_PWM_SetIntensity+0x8a>
 80067d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006810 <VAL_PWM_SetIntensity+0xbc>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	79bb      	ldrb	r3, [r7, #6]
 80067da:	6413      	str	r3, [r2, #64]	@ 0x40
 80067dc:	e00f      	b.n	80067fe <VAL_PWM_SetIntensity+0xaa>
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	4a0a      	ldr	r2, [pc, #40]	@ (800680c <VAL_PWM_SetIntensity+0xb8>)
 80067e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d104      	bne.n	80067f6 <VAL_PWM_SetIntensity+0xa2>
 80067ec:	4b08      	ldr	r3, [pc, #32]	@ (8006810 <VAL_PWM_SetIntensity+0xbc>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	79bb      	ldrb	r3, [r7, #6]
 80067f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f4:	e003      	b.n	80067fe <VAL_PWM_SetIntensity+0xaa>
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <VAL_PWM_SetIntensity+0xbc>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	79bb      	ldrb	r3, [r7, #6]
 80067fc:	65d3      	str	r3, [r2, #92]	@ 0x5c
  
  return VAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	08009e78 	.word	0x08009e78
 8006810:	200008bc 	.word	0x200008bc

08006814 <VAL_Serial_Init>:
/**
  * @brief  Initialize the serial communication module
  * @param  callback: Optional callback function for received data
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Serial_Init(SerialRxCallback callback) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Initialize UART peripheral */
  MX_USART1_UART_Init();
 800681c:	f7fa fc14 	bl	8001048 <MX_USART1_UART_Init>

  /* Store callback function */
  rxCallback = callback;
 8006820:	4a06      	ldr	r2, [pc, #24]	@ (800683c <VAL_Serial_Init+0x28>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6013      	str	r3, [r2, #0]

  /* Start continuous reception if callback is provided */
  if (rxCallback != NULL) {
 8006826:	4b05      	ldr	r3, [pc, #20]	@ (800683c <VAL_Serial_Init+0x28>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <VAL_Serial_Init+0x1e>
    StartReceive();
 800682e:	f000 f863 	bl	80068f8 <StartReceive>
  }

  return VAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000ab4 	.word	0x20000ab4

08006840 <VAL_Serial_Send>:
  * @param  data: Pointer to data buffer
  * @param  length: Length of data to send
  * @param  timeout: Timeout in milliseconds
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Serial_Send(const uint8_t* data, uint16_t length, uint32_t timeout) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	460b      	mov	r3, r1
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status;

  /* Check if previous transmission is ongoing */
  if (txBusy) {
 800684e:	4b0f      	ldr	r3, [pc, #60]	@ (800688c <VAL_Serial_Send+0x4c>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <VAL_Serial_Send+0x1c>
    return VAL_BUSY;
 8006858:	2302      	movs	r3, #2
 800685a:	e013      	b.n	8006884 <VAL_Serial_Send+0x44>
  }

  txBusy = 1;
 800685c:	4b0b      	ldr	r3, [pc, #44]	@ (800688c <VAL_Serial_Send+0x4c>)
 800685e:	2201      	movs	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]

  /* Send data via UART */
  status = HAL_UART_Transmit(&huart1, (uint8_t*)data, length, timeout);
 8006862:	897a      	ldrh	r2, [r7, #10]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	4809      	ldr	r0, [pc, #36]	@ (8006890 <VAL_Serial_Send+0x50>)
 800686a:	f7fe ff47 	bl	80056fc <HAL_UART_Transmit>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]

  txBusy = 0;
 8006872:	4b06      	ldr	r3, [pc, #24]	@ (800688c <VAL_Serial_Send+0x4c>)
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]

  return (status == HAL_OK) ? VAL_OK : VAL_ERROR;
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000ab0 	.word	0x20000ab0
 8006890:	20000908 	.word	0x20000908

08006894 <VAL_Serial_Printf>:
  * @brief  Send formatted string over serial interface
  * @param  format: String format (printf style)
  * @param  ...: Variable arguments
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Serial_Printf(const char* format, ...) {
 8006894:	b40f      	push	{r0, r1, r2, r3}
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
  va_list args;
  int length;

  /* Check if previous transmission is ongoing */
  if (txBusy) {
 800689c:	4b14      	ldr	r3, [pc, #80]	@ (80068f0 <VAL_Serial_Printf+0x5c>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <VAL_Serial_Printf+0x16>
    return VAL_BUSY;
 80068a6:	2302      	movs	r3, #2
 80068a8:	e01b      	b.n	80068e2 <VAL_Serial_Printf+0x4e>
  }

  /* Format string */
  va_start(args, format);
 80068aa:	f107 0314 	add.w	r3, r7, #20
 80068ae:	603b      	str	r3, [r7, #0]
  length = vsnprintf((char*)txBuffer, SERIAL_TX_BUFFER_SIZE, format, args);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068b8:	480e      	ldr	r0, [pc, #56]	@ (80068f4 <VAL_Serial_Printf+0x60>)
 80068ba:	f002 fd83 	bl	80093c4 <vsniprintf>
 80068be:	6078      	str	r0, [r7, #4]
  va_end(args);

  if (length < 0 || length >= SERIAL_TX_BUFFER_SIZE) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	db02      	blt.n	80068cc <VAL_Serial_Printf+0x38>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2bff      	cmp	r3, #255	@ 0xff
 80068ca:	dd01      	ble.n	80068d0 <VAL_Serial_Printf+0x3c>
    return VAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e008      	b.n	80068e2 <VAL_Serial_Printf+0x4e>
  }

  /* Send formatted string */
  return VAL_Serial_Send(txBuffer, length, 1000);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068d8:	4619      	mov	r1, r3
 80068da:	4806      	ldr	r0, [pc, #24]	@ (80068f4 <VAL_Serial_Printf+0x60>)
 80068dc:	f7ff ffb0 	bl	8006840 <VAL_Serial_Send>
 80068e0:	4603      	mov	r3, r0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068ec:	b004      	add	sp, #16
 80068ee:	4770      	bx	lr
 80068f0:	20000ab0 	.word	0x20000ab0
 80068f4:	200009b0 	.word	0x200009b0

080068f8 <StartReceive>:

/**
  * @brief  Start continuous reception
  * @retval None
  */
static void StartReceive(void) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Start UART reception in interrupt mode for a single byte */
  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 80068fc:	2201      	movs	r2, #1
 80068fe:	4903      	ldr	r1, [pc, #12]	@ (800690c <StartReceive+0x14>)
 8006900:	4803      	ldr	r0, [pc, #12]	@ (8006910 <StartReceive+0x18>)
 8006902:	f7fe ff85 	bl	8005810 <HAL_UART_Receive_IT>
}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000ab8 	.word	0x20000ab8
 8006910:	20000908 	.word	0x20000908

08006914 <HAL_UART_RxCpltCallback>:
/**
  * @brief  UART RX complete callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <HAL_UART_RxCpltCallback+0x38>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d10e      	bne.n	8006944 <HAL_UART_RxCpltCallback+0x30>
    /* Call user callback with received byte */
    if (rxCallback != NULL) {
 8006926:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <HAL_UART_RxCpltCallback+0x3c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_RxCpltCallback+0x26>
      rxCallback(rxBuffer[0]);
 800692e:	4b08      	ldr	r3, [pc, #32]	@ (8006950 <HAL_UART_RxCpltCallback+0x3c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a08      	ldr	r2, [pc, #32]	@ (8006954 <HAL_UART_RxCpltCallback+0x40>)
 8006934:	7812      	ldrb	r2, [r2, #0]
 8006936:	4610      	mov	r0, r2
 8006938:	4798      	blx	r3
    }

    /* Restart reception for next byte */
    HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 800693a:	2201      	movs	r2, #1
 800693c:	4905      	ldr	r1, [pc, #20]	@ (8006954 <HAL_UART_RxCpltCallback+0x40>)
 800693e:	4806      	ldr	r0, [pc, #24]	@ (8006958 <HAL_UART_RxCpltCallback+0x44>)
 8006940:	f7fe ff66 	bl	8005810 <HAL_UART_Receive_IT>
  }
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40013800 	.word	0x40013800
 8006950:	20000ab4 	.word	0x20000ab4
 8006954:	20000ab8 	.word	0x20000ab8
 8006958:	20000908 	.word	0x20000908

0800695c <VAL_SysClock_Init>:

/**
  * @brief  Initialize the system clock
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_SysClock_Init(void) {
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 8006960:	f7fa f8da 	bl	8000b18 <SystemClock_Config>
  
  return VAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	bd80      	pop	{r7, pc}

0800696a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	4603      	mov	r3, r0
 8006972:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800697c:	2b84      	cmp	r3, #132	@ 0x84
 800697e:	d005      	beq.n	800698c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006980:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	3303      	adds	r3, #3
 800698a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800699e:	f000 fff3 	bl	8007988 <vTaskStartScheduler>
  
  return osOK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	b089      	sub	sp, #36	@ 0x24
 80069ac:	af04      	add	r7, sp, #16
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d020      	beq.n	80069fc <osThreadCreate+0x54>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01c      	beq.n	80069fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685c      	ldr	r4, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691e      	ldr	r6, [r3, #16]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ffc8 	bl	800696a <makeFreeRtosPriority>
 80069da:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069e4:	9202      	str	r2, [sp, #8]
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	9100      	str	r1, [sp, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	4632      	mov	r2, r6
 80069ee:	4629      	mov	r1, r5
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fde3 	bl	80075bc <xTaskCreateStatic>
 80069f6:	4603      	mov	r3, r0
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e01c      	b.n	8006a36 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685c      	ldr	r4, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a08:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ffaa 	bl	800696a <makeFreeRtosPriority>
 8006a16:	4602      	mov	r2, r0
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	9200      	str	r2, [sp, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	4632      	mov	r2, r6
 8006a24:	4629      	mov	r1, r5
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 fe28 	bl	800767c <xTaskCreate>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d001      	beq.n	8006a36 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006a36:	68fb      	ldr	r3, [r7, #12]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a40 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <osDelay+0x16>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	e000      	b.n	8006a58 <osDelay+0x18>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 ff5f 	bl	800791c <vTaskDelay>
  
  return osOK;
 8006a5e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f103 0208 	add.w	r2, r3, #8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f103 0208 	add.w	r2, r3, #8
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f103 0208 	add.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b085      	sub	sp, #20
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	601a      	str	r2, [r3, #0]
}
 8006afe:	bf00      	nop
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d103      	bne.n	8006b2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	e00c      	b.n	8006b44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e002      	b.n	8006b38 <vListInsert+0x2e>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d2f6      	bcs.n	8006b32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	601a      	str	r2, [r3, #0]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6892      	ldr	r2, [r2, #8]
 8006b92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6852      	ldr	r2, [r2, #4]
 8006b9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d103      	bne.n	8006bb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1e5a      	subs	r2, r3, #1
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006bfc:	f002 f8a4 	bl	8008d48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c08:	68f9      	ldr	r1, [r7, #12]
 8006c0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	441a      	add	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	441a      	add	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	22ff      	movs	r2, #255	@ 0xff
 8006c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	22ff      	movs	r2, #255	@ 0xff
 8006c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d114      	bne.n	8006c7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01a      	beq.n	8006c90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3310      	adds	r3, #16
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 f92e 	bl	8007ec0 <xTaskRemoveFromEventList>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d012      	beq.n	8006c90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <xQueueGenericReset+0xd0>)
 8006c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	e009      	b.n	8006c90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3310      	adds	r3, #16
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fef1 	bl	8006a68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3324      	adds	r3, #36	@ 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff feec 	bl	8006a68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c90:	f002 f88c 	bl	8008dac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c94:	2301      	movs	r3, #1
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	@ 0x38
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10b      	bne.n	8006cd0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
 8006cce:	e7fd      	b.n	8006ccc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	e7fd      	b.n	8006cea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <xQueueGenericCreateStatic+0x56>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <xQueueGenericCreateStatic+0x5a>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <xQueueGenericCreateStatic+0x5c>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10b      	bne.n	8006d1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	623b      	str	r3, [r7, #32]
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d102      	bne.n	8006d28 <xQueueGenericCreateStatic+0x84>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <xQueueGenericCreateStatic+0x88>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <xQueueGenericCreateStatic+0x8a>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	61fb      	str	r3, [r7, #28]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d4a:	2348      	movs	r3, #72	@ 0x48
 8006d4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b48      	cmp	r3, #72	@ 0x48
 8006d52:	d00b      	beq.n	8006d6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61bb      	str	r3, [r7, #24]
}
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	e7fd      	b.n	8006d68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f805 	bl	8006d9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3730      	adds	r7, #48	@ 0x30
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e002      	b.n	8006dc0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dcc:	2101      	movs	r1, #1
 8006dce:	69b8      	ldr	r0, [r7, #24]
 8006dd0:	f7ff fefe 	bl	8006bd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	@ 0x38
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006dea:	2300      	movs	r3, #0
 8006dec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <xQueueGenericSend+0x34>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	e7fd      	b.n	8006e0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d103      	bne.n	8006e1e <xQueueGenericSend+0x42>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <xQueueGenericSend+0x46>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <xQueueGenericSend+0x48>
 8006e22:	2300      	movs	r3, #0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10b      	bne.n	8006e40 <xQueueGenericSend+0x64>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
 8006e3e:	e7fd      	b.n	8006e3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d103      	bne.n	8006e4e <xQueueGenericSend+0x72>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <xQueueGenericSend+0x76>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueGenericSend+0x78>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10b      	bne.n	8006e70 <xQueueGenericSend+0x94>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	623b      	str	r3, [r7, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e70:	f001 f9ec 	bl	800824c <xTaskGetSchedulerState>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <xQueueGenericSend+0xa4>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <xQueueGenericSend+0xa8>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <xQueueGenericSend+0xaa>
 8006e84:	2300      	movs	r3, #0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	61fb      	str	r3, [r7, #28]
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	e7fd      	b.n	8006e9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ea2:	f001 ff51 	bl	8008d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <xQueueGenericSend+0xdc>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d129      	bne.n	8006f0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ebe:	f000 fa0f 	bl	80072e0 <prvCopyDataToQueue>
 8006ec2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d010      	beq.n	8006eee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	3324      	adds	r3, #36	@ 0x24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fff5 	bl	8007ec0 <xTaskRemoveFromEventList>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d013      	beq.n	8006f04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006edc:	4b3f      	ldr	r3, [pc, #252]	@ (8006fdc <xQueueGenericSend+0x200>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	e00a      	b.n	8006f04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ef4:	4b39      	ldr	r3, [pc, #228]	@ (8006fdc <xQueueGenericSend+0x200>)
 8006ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f04:	f001 ff52 	bl	8008dac <vPortExitCritical>
				return pdPASS;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e063      	b.n	8006fd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d103      	bne.n	8006f1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f12:	f001 ff4b 	bl	8008dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e05c      	b.n	8006fd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f20:	f107 0314 	add.w	r3, r7, #20
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 f82f 	bl	8007f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f2e:	f001 ff3d 	bl	8008dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f32:	f000 fd99 	bl	8007a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f36:	f001 ff07 	bl	8008d48 <vPortEnterCritical>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f40:	b25b      	sxtb	r3, r3
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d103      	bne.n	8006f50 <xQueueGenericSend+0x174>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f56:	b25b      	sxtb	r3, r3
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d103      	bne.n	8006f66 <xQueueGenericSend+0x18a>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f66:	f001 ff21 	bl	8008dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f6a:	1d3a      	adds	r2, r7, #4
 8006f6c:	f107 0314 	add.w	r3, r7, #20
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 f81e 	bl	8007fb4 <xTaskCheckForTimeOut>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d124      	bne.n	8006fc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f80:	f000 faa6 	bl	80074d0 <prvIsQueueFull>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d018      	beq.n	8006fbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 ff42 	bl	8007e1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f9a:	f000 fa31 	bl	8007400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f9e:	f000 fd71 	bl	8007a84 <xTaskResumeAll>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f af7c 	bne.w	8006ea2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006faa:	4b0c      	ldr	r3, [pc, #48]	@ (8006fdc <xQueueGenericSend+0x200>)
 8006fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	e772      	b.n	8006ea2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fbe:	f000 fa1f 	bl	8007400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fc2:	f000 fd5f 	bl	8007a84 <xTaskResumeAll>
 8006fc6:	e76c      	b.n	8006ea2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fca:	f000 fa19 	bl	8007400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fce:	f000 fd59 	bl	8007a84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3738      	adds	r7, #56	@ 0x38
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b090      	sub	sp, #64	@ 0x40
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <xQueueGenericSendFromISR+0x3e>
 8007016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <xQueueGenericSendFromISR+0x42>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <xQueueGenericSendFromISR+0x44>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d103      	bne.n	800704e <xQueueGenericSendFromISR+0x6e>
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <xQueueGenericSendFromISR+0x72>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <xQueueGenericSendFromISR+0x74>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10b      	bne.n	8007070 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	623b      	str	r3, [r7, #32]
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	e7fd      	b.n	800706c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007070:	f001 ff4a 	bl	8008f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007074:	f3ef 8211 	mrs	r2, BASEPRI
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	61fa      	str	r2, [r7, #28]
 800708a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800708c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007098:	429a      	cmp	r2, r3
 800709a:	d302      	bcc.n	80070a2 <xQueueGenericSendFromISR+0xc2>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d12f      	bne.n	8007102 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070b8:	f000 f912 	bl	80072e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d112      	bne.n	80070ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d016      	beq.n	80070fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d0:	3324      	adds	r3, #36	@ 0x24
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fef4 	bl	8007ec0 <xTaskRemoveFromEventList>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00e      	beq.n	80070fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e007      	b.n	80070fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070f0:	3301      	adds	r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	b25a      	sxtb	r2, r3
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80070fc:	2301      	movs	r3, #1
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007100:	e001      	b.n	8007106 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007102:	2300      	movs	r3, #0
 8007104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007108:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007114:	4618      	mov	r0, r3
 8007116:	3740      	adds	r7, #64	@ 0x40
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08c      	sub	sp, #48	@ 0x30
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007128:	2300      	movs	r3, #0
 800712a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <xQueueReceive+0x32>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	623b      	str	r3, [r7, #32]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d103      	bne.n	800715c <xQueueReceive+0x40>
 8007154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <xQueueReceive+0x44>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <xQueueReceive+0x46>
 8007160:	2300      	movs	r3, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10b      	bne.n	800717e <xQueueReceive+0x62>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	61fb      	str	r3, [r7, #28]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800717e:	f001 f865 	bl	800824c <xTaskGetSchedulerState>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <xQueueReceive+0x72>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <xQueueReceive+0x76>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <xQueueReceive+0x78>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10b      	bne.n	80071b0 <xQueueReceive+0x94>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	61bb      	str	r3, [r7, #24]
}
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	e7fd      	b.n	80071ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071b0:	f001 fdca 	bl	8008d48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01f      	beq.n	8007200 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c4:	f000 f8f6 	bl	80073b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	1e5a      	subs	r2, r3, #1
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00f      	beq.n	80071f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	3310      	adds	r3, #16
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fe6f 	bl	8007ec0 <xTaskRemoveFromEventList>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071e8:	4b3c      	ldr	r3, [pc, #240]	@ (80072dc <xQueueReceive+0x1c0>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071f8:	f001 fdd8 	bl	8008dac <vPortExitCritical>
				return pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e069      	b.n	80072d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d103      	bne.n	800720e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007206:	f001 fdd1 	bl	8008dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800720a:	2300      	movs	r3, #0
 800720c:	e062      	b.n	80072d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800720e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007214:	f107 0310 	add.w	r3, r7, #16
 8007218:	4618      	mov	r0, r3
 800721a:	f000 feb5 	bl	8007f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800721e:	2301      	movs	r3, #1
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007222:	f001 fdc3 	bl	8008dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007226:	f000 fc1f 	bl	8007a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800722a:	f001 fd8d 	bl	8008d48 <vPortEnterCritical>
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d103      	bne.n	8007244 <xQueueReceive+0x128>
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d103      	bne.n	800725a <xQueueReceive+0x13e>
 8007252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800725a:	f001 fda7 	bl	8008dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800725e:	1d3a      	adds	r2, r7, #4
 8007260:	f107 0310 	add.w	r3, r7, #16
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fea4 	bl	8007fb4 <xTaskCheckForTimeOut>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d123      	bne.n	80072ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007274:	f000 f916 	bl	80074a4 <prvIsQueueEmpty>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d017      	beq.n	80072ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800727e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007280:	3324      	adds	r3, #36	@ 0x24
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fdc8 	bl	8007e1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800728c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800728e:	f000 f8b7 	bl	8007400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007292:	f000 fbf7 	bl	8007a84 <xTaskResumeAll>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d189      	bne.n	80071b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800729c:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <xQueueReceive+0x1c0>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	e780      	b.n	80071b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072b0:	f000 f8a6 	bl	8007400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072b4:	f000 fbe6 	bl	8007a84 <xTaskResumeAll>
 80072b8:	e77a      	b.n	80071b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072bc:	f000 f8a0 	bl	8007400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c0:	f000 fbe0 	bl	8007a84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072c6:	f000 f8ed 	bl	80074a4 <prvIsQueueEmpty>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f43f af6f 	beq.w	80071b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3730      	adds	r7, #48	@ 0x30
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	e000ed04 	.word	0xe000ed04

080072e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10d      	bne.n	800731a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d14d      	bne.n	80073a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 ffbc 	bl	8008288 <xTaskPriorityDisinherit>
 8007310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	609a      	str	r2, [r3, #8]
 8007318:	e043      	b.n	80073a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d119      	bne.n	8007354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6858      	ldr	r0, [r3, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	f002 f8ea 	bl	8009504 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	441a      	add	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	d32b      	bcc.n	80073a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e026      	b.n	80073a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68d8      	ldr	r0, [r3, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735c:	461a      	mov	r2, r3
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	f002 f8d0 	bl	8009504 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736c:	425b      	negs	r3, r3
 800736e:	441a      	add	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d207      	bcs.n	8007390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007388:	425b      	negs	r3, r3
 800738a:	441a      	add	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d105      	bne.n	80073a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	3b01      	subs	r3, #1
 80073a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80073aa:	697b      	ldr	r3, [r7, #20]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	441a      	add	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d303      	bcc.n	80073e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68d9      	ldr	r1, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	461a      	mov	r2, r3
 80073f2:	6838      	ldr	r0, [r7, #0]
 80073f4:	f002 f886 	bl	8009504 <memcpy>
	}
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007408:	f001 fc9e 	bl	8008d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007414:	e011      	b.n	800743a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	d012      	beq.n	8007444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3324      	adds	r3, #36	@ 0x24
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fd4c 	bl	8007ec0 <xTaskRemoveFromEventList>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800742e:	f000 fe25 	bl	800807c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	3b01      	subs	r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800743a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800743e:	2b00      	cmp	r3, #0
 8007440:	dce9      	bgt.n	8007416 <prvUnlockQueue+0x16>
 8007442:	e000      	b.n	8007446 <prvUnlockQueue+0x46>
					break;
 8007444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	22ff      	movs	r2, #255	@ 0xff
 800744a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800744e:	f001 fcad 	bl	8008dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007452:	f001 fc79 	bl	8008d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800745c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800745e:	e011      	b.n	8007484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d012      	beq.n	800748e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3310      	adds	r3, #16
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fd27 	bl	8007ec0 <xTaskRemoveFromEventList>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007478:	f000 fe00 	bl	800807c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	3b01      	subs	r3, #1
 8007480:	b2db      	uxtb	r3, r3
 8007482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007488:	2b00      	cmp	r3, #0
 800748a:	dce9      	bgt.n	8007460 <prvUnlockQueue+0x60>
 800748c:	e000      	b.n	8007490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800748e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	22ff      	movs	r2, #255	@ 0xff
 8007494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007498:	f001 fc88 	bl	8008dac <vPortExitCritical>
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074ac:	f001 fc4c 	bl	8008d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e001      	b.n	80074c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074c2:	f001 fc73 	bl	8008dac <vPortExitCritical>

	return xReturn;
 80074c6:	68fb      	ldr	r3, [r7, #12]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074d8:	f001 fc36 	bl	8008d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d102      	bne.n	80074ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e001      	b.n	80074f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074f2:	f001 fc5b 	bl	8008dac <vPortExitCritical>

	return xReturn;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	e014      	b.n	800753a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007510:	4a0f      	ldr	r2, [pc, #60]	@ (8007550 <vQueueAddToRegistry+0x50>)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800751c:	490c      	ldr	r1, [pc, #48]	@ (8007550 <vQueueAddToRegistry+0x50>)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007526:	4a0a      	ldr	r2, [pc, #40]	@ (8007550 <vQueueAddToRegistry+0x50>)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007532:	e006      	b.n	8007542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3301      	adds	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b07      	cmp	r3, #7
 800753e:	d9e7      	bls.n	8007510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20000abc 	.word	0x20000abc

08007554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007564:	f001 fbf0 	bl	8008d48 <vPortEnterCritical>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800756e:	b25b      	sxtb	r3, r3
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d103      	bne.n	800757e <vQueueWaitForMessageRestricted+0x2a>
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007584:	b25b      	sxtb	r3, r3
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d103      	bne.n	8007594 <vQueueWaitForMessageRestricted+0x40>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007594:	f001 fc0a 	bl	8008dac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	3324      	adds	r3, #36	@ 0x24
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fc5d 	bl	8007e68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075ae:	6978      	ldr	r0, [r7, #20]
 80075b0:	f7ff ff26 	bl	8007400 <prvUnlockQueue>
	}
 80075b4:	bf00      	nop
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08e      	sub	sp, #56	@ 0x38
 80075c0:	af04      	add	r7, sp, #16
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10b      	bne.n	80075e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	623b      	str	r3, [r7, #32]
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	e7fd      	b.n	80075e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10b      	bne.n	8007606 <xTaskCreateStatic+0x4a>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	61fb      	str	r3, [r7, #28]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007606:	23a0      	movs	r3, #160	@ 0xa0
 8007608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2ba0      	cmp	r3, #160	@ 0xa0
 800760e:	d00b      	beq.n	8007628 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	61bb      	str	r3, [r7, #24]
}
 8007622:	bf00      	nop
 8007624:	bf00      	nop
 8007626:	e7fd      	b.n	8007624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800762a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01e      	beq.n	800766e <xTaskCreateStatic+0xb2>
 8007630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01b      	beq.n	800766e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800763e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	2202      	movs	r2, #2
 8007644:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007648:	2300      	movs	r3, #0
 800764a:	9303      	str	r3, [sp, #12]
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	9302      	str	r3, [sp, #8]
 8007650:	f107 0314 	add.w	r3, r7, #20
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f851 	bl	8007708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007668:	f000 f8ee 	bl	8007848 <prvAddNewTaskToReadyList>
 800766c:	e001      	b.n	8007672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007672:	697b      	ldr	r3, [r7, #20]
	}
 8007674:	4618      	mov	r0, r3
 8007676:	3728      	adds	r7, #40	@ 0x28
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08c      	sub	sp, #48	@ 0x30
 8007680:	af04      	add	r7, sp, #16
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4618      	mov	r0, r3
 8007692:	f001 fc7b 	bl	8008f8c <pvPortMalloc>
 8007696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00e      	beq.n	80076bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800769e:	20a0      	movs	r0, #160	@ 0xa0
 80076a0:	f001 fc74 	bl	8008f8c <pvPortMalloc>
 80076a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80076b2:	e005      	b.n	80076c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076b4:	6978      	ldr	r0, [r7, #20]
 80076b6:	f001 fd37 	bl	8009128 <vPortFree>
 80076ba:	e001      	b.n	80076c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d017      	beq.n	80076f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	2300      	movs	r3, #0
 80076d2:	9303      	str	r3, [sp, #12]
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	9302      	str	r3, [sp, #8]
 80076d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f80f 	bl	8007708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ea:	69f8      	ldr	r0, [r7, #28]
 80076ec:	f000 f8ac 	bl	8007848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076f0:	2301      	movs	r3, #1
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	e002      	b.n	80076fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076fc:	69bb      	ldr	r3, [r7, #24]
	}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007720:	3b01      	subs	r3, #1
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	617b      	str	r3, [r7, #20]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01f      	beq.n	8007798 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007758:	2300      	movs	r3, #0
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	e012      	b.n	8007784 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	7819      	ldrb	r1, [r3, #0]
 8007766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	3334      	adds	r3, #52	@ 0x34
 800776e:	460a      	mov	r2, r1
 8007770:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	3301      	adds	r3, #1
 8007782:	61fb      	str	r3, [r7, #28]
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d9e9      	bls.n	800775e <prvInitialiseNewTask+0x56>
 800778a:	e000      	b.n	800778e <prvInitialiseNewTask+0x86>
			{
				break;
 800778c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007796:	e003      	b.n	80077a0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a2:	2b06      	cmp	r3, #6
 80077a4:	d901      	bls.n	80077aa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077a6:	2306      	movs	r3, #6
 80077a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	2200      	movs	r2, #0
 80077ba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	3304      	adds	r3, #4
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff f971 	bl	8006aa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	3318      	adds	r3, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff f96c 	bl	8006aa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	f1c3 0207 	rsb	r2, r3, #7
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	334c      	adds	r3, #76	@ 0x4c
 80077fa:	224c      	movs	r2, #76	@ 0x4c
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fdee 	bl	80093e0 <memset>
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	4a0d      	ldr	r2, [pc, #52]	@ (800783c <prvInitialiseNewTask+0x134>)
 8007808:	651a      	str	r2, [r3, #80]	@ 0x50
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	4a0c      	ldr	r2, [pc, #48]	@ (8007840 <prvInitialiseNewTask+0x138>)
 800780e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007812:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <prvInitialiseNewTask+0x13c>)
 8007814:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	68f9      	ldr	r1, [r7, #12]
 800781a:	69b8      	ldr	r0, [r7, #24]
 800781c:	f001 f960 	bl	8008ae0 <pxPortInitialiseStack>
 8007820:	4602      	mov	r2, r0
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800782c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007832:	bf00      	nop
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20002d4c 	.word	0x20002d4c
 8007840:	20002db4 	.word	0x20002db4
 8007844:	20002e1c 	.word	0x20002e1c

08007848 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007850:	f001 fa7a 	bl	8008d48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007854:	4b2a      	ldr	r3, [pc, #168]	@ (8007900 <prvAddNewTaskToReadyList+0xb8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	4a29      	ldr	r2, [pc, #164]	@ (8007900 <prvAddNewTaskToReadyList+0xb8>)
 800785c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800785e:	4b29      	ldr	r3, [pc, #164]	@ (8007904 <prvAddNewTaskToReadyList+0xbc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007866:	4a27      	ldr	r2, [pc, #156]	@ (8007904 <prvAddNewTaskToReadyList+0xbc>)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800786c:	4b24      	ldr	r3, [pc, #144]	@ (8007900 <prvAddNewTaskToReadyList+0xb8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d110      	bne.n	8007896 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007874:	f000 fc26 	bl	80080c4 <prvInitialiseTaskLists>
 8007878:	e00d      	b.n	8007896 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800787a:	4b23      	ldr	r3, [pc, #140]	@ (8007908 <prvAddNewTaskToReadyList+0xc0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007882:	4b20      	ldr	r3, [pc, #128]	@ (8007904 <prvAddNewTaskToReadyList+0xbc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	429a      	cmp	r2, r3
 800788e:	d802      	bhi.n	8007896 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007890:	4a1c      	ldr	r2, [pc, #112]	@ (8007904 <prvAddNewTaskToReadyList+0xbc>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007896:	4b1d      	ldr	r3, [pc, #116]	@ (800790c <prvAddNewTaskToReadyList+0xc4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	4a1b      	ldr	r2, [pc, #108]	@ (800790c <prvAddNewTaskToReadyList+0xc4>)
 800789e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	2201      	movs	r2, #1
 80078a6:	409a      	lsls	r2, r3
 80078a8:	4b19      	ldr	r3, [pc, #100]	@ (8007910 <prvAddNewTaskToReadyList+0xc8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	4a18      	ldr	r2, [pc, #96]	@ (8007910 <prvAddNewTaskToReadyList+0xc8>)
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4a15      	ldr	r2, [pc, #84]	@ (8007914 <prvAddNewTaskToReadyList+0xcc>)
 80078c0:	441a      	add	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f7ff f8fa 	bl	8006ac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078ce:	f001 fa6d 	bl	8008dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007908 <prvAddNewTaskToReadyList+0xc0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00e      	beq.n	80078f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078da:	4b0a      	ldr	r3, [pc, #40]	@ (8007904 <prvAddNewTaskToReadyList+0xbc>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d207      	bcs.n	80078f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <prvAddNewTaskToReadyList+0xd0>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20000bfc 	.word	0x20000bfc
 8007904:	20000afc 	.word	0x20000afc
 8007908:	20000c08 	.word	0x20000c08
 800790c:	20000c18 	.word	0x20000c18
 8007910:	20000c04 	.word	0x20000c04
 8007914:	20000b00 	.word	0x20000b00
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d018      	beq.n	8007960 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800792e:	4b14      	ldr	r3, [pc, #80]	@ (8007980 <vTaskDelay+0x64>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <vTaskDelay+0x32>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60bb      	str	r3, [r7, #8]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800794e:	f000 f88b 	bl	8007a68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007952:	2100      	movs	r1, #0
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fd1f 	bl	8008398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800795a:	f000 f893 	bl	8007a84 <xTaskResumeAll>
 800795e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d107      	bne.n	8007976 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007966:	4b07      	ldr	r3, [pc, #28]	@ (8007984 <vTaskDelay+0x68>)
 8007968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000c24 	.word	0x20000c24
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	@ 0x28
 800798c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007996:	463a      	mov	r2, r7
 8007998:	1d39      	adds	r1, r7, #4
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4618      	mov	r0, r3
 80079a0:	f7f8 fdfc 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	9202      	str	r2, [sp, #8]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	2300      	movs	r3, #0
 80079b4:	460a      	mov	r2, r1
 80079b6:	4924      	ldr	r1, [pc, #144]	@ (8007a48 <vTaskStartScheduler+0xc0>)
 80079b8:	4824      	ldr	r0, [pc, #144]	@ (8007a4c <vTaskStartScheduler+0xc4>)
 80079ba:	f7ff fdff 	bl	80075bc <xTaskCreateStatic>
 80079be:	4603      	mov	r3, r0
 80079c0:	4a23      	ldr	r2, [pc, #140]	@ (8007a50 <vTaskStartScheduler+0xc8>)
 80079c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079c4:	4b22      	ldr	r3, [pc, #136]	@ (8007a50 <vTaskStartScheduler+0xc8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079cc:	2301      	movs	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e001      	b.n	80079d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d102      	bne.n	80079e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80079dc:	f000 fd42 	bl	8008464 <xTimerCreateTimerTask>
 80079e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d11b      	bne.n	8007a20 <vTaskStartScheduler+0x98>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	613b      	str	r3, [r7, #16]
}
 80079fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079fc:	4b15      	ldr	r3, [pc, #84]	@ (8007a54 <vTaskStartScheduler+0xcc>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	334c      	adds	r3, #76	@ 0x4c
 8007a02:	4a15      	ldr	r2, [pc, #84]	@ (8007a58 <vTaskStartScheduler+0xd0>)
 8007a04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a06:	4b15      	ldr	r3, [pc, #84]	@ (8007a5c <vTaskStartScheduler+0xd4>)
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a0e:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <vTaskStartScheduler+0xd8>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a14:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <vTaskStartScheduler+0xdc>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a1a:	f001 f8f1 	bl	8008c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a1e:	e00f      	b.n	8007a40 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d10b      	bne.n	8007a40 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	60fb      	str	r3, [r7, #12]
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	e7fd      	b.n	8007a3c <vTaskStartScheduler+0xb4>
}
 8007a40:	bf00      	nop
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	08009e18 	.word	0x08009e18
 8007a4c:	08008095 	.word	0x08008095
 8007a50:	20000c20 	.word	0x20000c20
 8007a54:	20000afc 	.word	0x20000afc
 8007a58:	20000010 	.word	0x20000010
 8007a5c:	20000c1c 	.word	0x20000c1c
 8007a60:	20000c08 	.word	0x20000c08
 8007a64:	20000c00 	.word	0x20000c00

08007a68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a6c:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <vTaskSuspendAll+0x18>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	4a03      	ldr	r2, [pc, #12]	@ (8007a80 <vTaskSuspendAll+0x18>)
 8007a74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a76:	bf00      	nop
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	20000c24 	.word	0x20000c24

08007a84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a92:	4b42      	ldr	r3, [pc, #264]	@ (8007b9c <xTaskResumeAll+0x118>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	603b      	str	r3, [r7, #0]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ab2:	f001 f949 	bl	8008d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ab6:	4b39      	ldr	r3, [pc, #228]	@ (8007b9c <xTaskResumeAll+0x118>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	4a37      	ldr	r2, [pc, #220]	@ (8007b9c <xTaskResumeAll+0x118>)
 8007abe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac0:	4b36      	ldr	r3, [pc, #216]	@ (8007b9c <xTaskResumeAll+0x118>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d161      	bne.n	8007b8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ac8:	4b35      	ldr	r3, [pc, #212]	@ (8007ba0 <xTaskResumeAll+0x11c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05d      	beq.n	8007b8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ad0:	e02e      	b.n	8007b30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad2:	4b34      	ldr	r3, [pc, #208]	@ (8007ba4 <xTaskResumeAll+0x120>)
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3318      	adds	r3, #24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff f84c 	bl	8006b7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff f847 	bl	8006b7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af2:	2201      	movs	r2, #1
 8007af4:	409a      	lsls	r2, r3
 8007af6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ba8 <xTaskResumeAll+0x124>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	4a2a      	ldr	r2, [pc, #168]	@ (8007ba8 <xTaskResumeAll+0x124>)
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4a27      	ldr	r2, [pc, #156]	@ (8007bac <xTaskResumeAll+0x128>)
 8007b0e:	441a      	add	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f7fe ffd3 	bl	8006ac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b20:	4b23      	ldr	r3, [pc, #140]	@ (8007bb0 <xTaskResumeAll+0x12c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d302      	bcc.n	8007b30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b2a:	4b22      	ldr	r3, [pc, #136]	@ (8007bb4 <xTaskResumeAll+0x130>)
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b30:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba4 <xTaskResumeAll+0x120>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1cc      	bne.n	8007ad2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b3e:	f000 fb65 	bl	800820c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b42:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb8 <xTaskResumeAll+0x134>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d010      	beq.n	8007b70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b4e:	f000 f847 	bl	8007be0 <xTaskIncrementTick>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b58:	4b16      	ldr	r3, [pc, #88]	@ (8007bb4 <xTaskResumeAll+0x130>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f1      	bne.n	8007b4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b6a:	4b13      	ldr	r3, [pc, #76]	@ (8007bb8 <xTaskResumeAll+0x134>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b70:	4b10      	ldr	r3, [pc, #64]	@ (8007bb4 <xTaskResumeAll+0x130>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bbc <xTaskResumeAll+0x138>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b8c:	f001 f90e 	bl	8008dac <vPortExitCritical>

	return xAlreadyYielded;
 8007b90:	68bb      	ldr	r3, [r7, #8]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000c24 	.word	0x20000c24
 8007ba0:	20000bfc 	.word	0x20000bfc
 8007ba4:	20000bbc 	.word	0x20000bbc
 8007ba8:	20000c04 	.word	0x20000c04
 8007bac:	20000b00 	.word	0x20000b00
 8007bb0:	20000afc 	.word	0x20000afc
 8007bb4:	20000c10 	.word	0x20000c10
 8007bb8:	20000c0c 	.word	0x20000c0c
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bc6:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <xTaskGetTickCount+0x1c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007bcc:	687b      	ldr	r3, [r7, #4]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	20000c00 	.word	0x20000c00

08007be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bea:	4b4f      	ldr	r3, [pc, #316]	@ (8007d28 <xTaskIncrementTick+0x148>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f040 808f 	bne.w	8007d12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8007d2c <xTaskIncrementTick+0x14c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8007d2c <xTaskIncrementTick+0x14c>)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d121      	bne.n	8007c4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c08:	4b49      	ldr	r3, [pc, #292]	@ (8007d30 <xTaskIncrementTick+0x150>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	603b      	str	r3, [r7, #0]
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <xTaskIncrementTick+0x46>
 8007c2a:	4b41      	ldr	r3, [pc, #260]	@ (8007d30 <xTaskIncrementTick+0x150>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	4b40      	ldr	r3, [pc, #256]	@ (8007d34 <xTaskIncrementTick+0x154>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a3e      	ldr	r2, [pc, #248]	@ (8007d30 <xTaskIncrementTick+0x150>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	4a3e      	ldr	r2, [pc, #248]	@ (8007d34 <xTaskIncrementTick+0x154>)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d38 <xTaskIncrementTick+0x158>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	4a3c      	ldr	r2, [pc, #240]	@ (8007d38 <xTaskIncrementTick+0x158>)
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	f000 fae0 	bl	800820c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8007d3c <xTaskIncrementTick+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d348      	bcc.n	8007ce8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c56:	4b36      	ldr	r3, [pc, #216]	@ (8007d30 <xTaskIncrementTick+0x150>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c60:	4b36      	ldr	r3, [pc, #216]	@ (8007d3c <xTaskIncrementTick+0x15c>)
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	601a      	str	r2, [r3, #0]
					break;
 8007c68:	e03e      	b.n	8007ce8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6a:	4b31      	ldr	r3, [pc, #196]	@ (8007d30 <xTaskIncrementTick+0x150>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d203      	bcs.n	8007c8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c82:	4a2e      	ldr	r2, [pc, #184]	@ (8007d3c <xTaskIncrementTick+0x15c>)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c88:	e02e      	b.n	8007ce8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe ff74 	bl	8006b7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3318      	adds	r3, #24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe ff6b 	bl	8006b7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	2201      	movs	r2, #1
 8007cac:	409a      	lsls	r2, r3
 8007cae:	4b24      	ldr	r3, [pc, #144]	@ (8007d40 <xTaskIncrementTick+0x160>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	4a22      	ldr	r2, [pc, #136]	@ (8007d40 <xTaskIncrementTick+0x160>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d44 <xTaskIncrementTick+0x164>)
 8007cc6:	441a      	add	r2, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fe fef7 	bl	8006ac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d48 <xTaskIncrementTick+0x168>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d3b9      	bcc.n	8007c56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ce6:	e7b6      	b.n	8007c56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ce8:	4b17      	ldr	r3, [pc, #92]	@ (8007d48 <xTaskIncrementTick+0x168>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cee:	4915      	ldr	r1, [pc, #84]	@ (8007d44 <xTaskIncrementTick+0x164>)
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d901      	bls.n	8007d04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d04:	4b11      	ldr	r3, [pc, #68]	@ (8007d4c <xTaskIncrementTick+0x16c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	e004      	b.n	8007d1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d12:	4b0f      	ldr	r3, [pc, #60]	@ (8007d50 <xTaskIncrementTick+0x170>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3301      	adds	r3, #1
 8007d18:	4a0d      	ldr	r2, [pc, #52]	@ (8007d50 <xTaskIncrementTick+0x170>)
 8007d1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d1c:	697b      	ldr	r3, [r7, #20]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000c24 	.word	0x20000c24
 8007d2c:	20000c00 	.word	0x20000c00
 8007d30:	20000bb4 	.word	0x20000bb4
 8007d34:	20000bb8 	.word	0x20000bb8
 8007d38:	20000c14 	.word	0x20000c14
 8007d3c:	20000c1c 	.word	0x20000c1c
 8007d40:	20000c04 	.word	0x20000c04
 8007d44:	20000b00 	.word	0x20000b00
 8007d48:	20000afc 	.word	0x20000afc
 8007d4c:	20000c10 	.word	0x20000c10
 8007d50:	20000c0c 	.word	0x20000c0c

08007d54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007e04 <vTaskSwitchContext+0xb0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d62:	4b29      	ldr	r3, [pc, #164]	@ (8007e08 <vTaskSwitchContext+0xb4>)
 8007d64:	2201      	movs	r2, #1
 8007d66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d68:	e045      	b.n	8007df6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007d6a:	4b27      	ldr	r3, [pc, #156]	@ (8007e08 <vTaskSwitchContext+0xb4>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d70:	4b26      	ldr	r3, [pc, #152]	@ (8007e0c <vTaskSwitchContext+0xb8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	fab3 f383 	clz	r3, r3
 8007d7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d7e:	7afb      	ldrb	r3, [r7, #11]
 8007d80:	f1c3 031f 	rsb	r3, r3, #31
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	4922      	ldr	r1, [pc, #136]	@ (8007e10 <vTaskSwitchContext+0xbc>)
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	607b      	str	r3, [r7, #4]
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <vTaskSwitchContext+0x5a>
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4a14      	ldr	r2, [pc, #80]	@ (8007e10 <vTaskSwitchContext+0xbc>)
 8007dbe:	4413      	add	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	605a      	str	r2, [r3, #4]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d104      	bne.n	8007de2 <vTaskSwitchContext+0x8e>
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4a0a      	ldr	r2, [pc, #40]	@ (8007e14 <vTaskSwitchContext+0xc0>)
 8007dea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dec:	4b09      	ldr	r3, [pc, #36]	@ (8007e14 <vTaskSwitchContext+0xc0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	334c      	adds	r3, #76	@ 0x4c
 8007df2:	4a09      	ldr	r2, [pc, #36]	@ (8007e18 <vTaskSwitchContext+0xc4>)
 8007df4:	6013      	str	r3, [r2, #0]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000c24 	.word	0x20000c24
 8007e08:	20000c10 	.word	0x20000c10
 8007e0c:	20000c04 	.word	0x20000c04
 8007e10:	20000b00 	.word	0x20000b00
 8007e14:	20000afc 	.word	0x20000afc
 8007e18:	20000010 	.word	0x20000010

08007e1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	60fb      	str	r3, [r7, #12]
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e44:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <vTaskPlaceOnEventList+0x48>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3318      	adds	r3, #24
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fe fe5c 	bl	8006b0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e52:	2101      	movs	r1, #1
 8007e54:	6838      	ldr	r0, [r7, #0]
 8007e56:	f000 fa9f 	bl	8008398 <prvAddCurrentTaskToDelayedList>
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000afc 	.word	0x20000afc

08007e68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10b      	bne.n	8007e92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	617b      	str	r3, [r7, #20]
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	e7fd      	b.n	8007e8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e92:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <vTaskPlaceOnEventListRestricted+0x54>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3318      	adds	r3, #24
 8007e98:	4619      	mov	r1, r3
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7fe fe11 	bl	8006ac2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	68b8      	ldr	r0, [r7, #8]
 8007eb0:	f000 fa72 	bl	8008398 <prvAddCurrentTaskToDelayedList>
	}
 8007eb4:	bf00      	nop
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000afc 	.word	0x20000afc

08007ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10b      	bne.n	8007eee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60fb      	str	r3, [r7, #12]
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	e7fd      	b.n	8007eea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	3318      	adds	r3, #24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fe42 	bl	8006b7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f70 <xTaskRemoveFromEventList+0xb0>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11c      	bne.n	8007f3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fe39 	bl	8006b7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0e:	2201      	movs	r2, #1
 8007f10:	409a      	lsls	r2, r3
 8007f12:	4b18      	ldr	r3, [pc, #96]	@ (8007f74 <xTaskRemoveFromEventList+0xb4>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	4a16      	ldr	r2, [pc, #88]	@ (8007f74 <xTaskRemoveFromEventList+0xb4>)
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4a13      	ldr	r2, [pc, #76]	@ (8007f78 <xTaskRemoveFromEventList+0xb8>)
 8007f2a:	441a      	add	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7fe fdc5 	bl	8006ac2 <vListInsertEnd>
 8007f38:	e005      	b.n	8007f46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	3318      	adds	r3, #24
 8007f3e:	4619      	mov	r1, r3
 8007f40:	480e      	ldr	r0, [pc, #56]	@ (8007f7c <xTaskRemoveFromEventList+0xbc>)
 8007f42:	f7fe fdbe 	bl	8006ac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <xTaskRemoveFromEventList+0xc0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d905      	bls.n	8007f60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f54:	2301      	movs	r3, #1
 8007f56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f58:	4b0a      	ldr	r3, [pc, #40]	@ (8007f84 <xTaskRemoveFromEventList+0xc4>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e001      	b.n	8007f64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f64:	697b      	ldr	r3, [r7, #20]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000c24 	.word	0x20000c24
 8007f74:	20000c04 	.word	0x20000c04
 8007f78:	20000b00 	.word	0x20000b00
 8007f7c:	20000bbc 	.word	0x20000bbc
 8007f80:	20000afc 	.word	0x20000afc
 8007f84:	20000c10 	.word	0x20000c10

08007f88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f90:	4b06      	ldr	r3, [pc, #24]	@ (8007fac <vTaskInternalSetTimeOutState+0x24>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f98:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <vTaskInternalSetTimeOutState+0x28>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	605a      	str	r2, [r3, #4]
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20000c14 	.word	0x20000c14
 8007fb0:	20000c00 	.word	0x20000c00

08007fb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	613b      	str	r3, [r7, #16]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10b      	bne.n	8007ffa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60fb      	str	r3, [r7, #12]
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	e7fd      	b.n	8007ff6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007ffa:	f000 fea5 	bl	8008d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8008074 <xTaskCheckForTimeOut+0xc0>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008016:	d102      	bne.n	800801e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	e023      	b.n	8008066 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b15      	ldr	r3, [pc, #84]	@ (8008078 <xTaskCheckForTimeOut+0xc4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d007      	beq.n	800803a <xTaskCheckForTimeOut+0x86>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	429a      	cmp	r2, r3
 8008032:	d302      	bcc.n	800803a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008034:	2301      	movs	r3, #1
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	e015      	b.n	8008066 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	429a      	cmp	r2, r3
 8008042:	d20b      	bcs.n	800805c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ff99 	bl	8007f88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008056:	2300      	movs	r3, #0
 8008058:	61fb      	str	r3, [r7, #28]
 800805a:	e004      	b.n	8008066 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008062:	2301      	movs	r3, #1
 8008064:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008066:	f000 fea1 	bl	8008dac <vPortExitCritical>

	return xReturn;
 800806a:	69fb      	ldr	r3, [r7, #28]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000c00 	.word	0x20000c00
 8008078:	20000c14 	.word	0x20000c14

0800807c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008080:	4b03      	ldr	r3, [pc, #12]	@ (8008090 <vTaskMissedYield+0x14>)
 8008082:	2201      	movs	r2, #1
 8008084:	601a      	str	r2, [r3, #0]
}
 8008086:	bf00      	nop
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20000c10 	.word	0x20000c10

08008094 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800809c:	f000 f852 	bl	8008144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080a0:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <prvIdleTask+0x28>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d9f9      	bls.n	800809c <prvIdleTask+0x8>
			{
				taskYIELD();
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <prvIdleTask+0x2c>)
 80080aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080b8:	e7f0      	b.n	800809c <prvIdleTask+0x8>
 80080ba:	bf00      	nop
 80080bc:	20000b00 	.word	0x20000b00
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080ca:	2300      	movs	r3, #0
 80080cc:	607b      	str	r3, [r7, #4]
 80080ce:	e00c      	b.n	80080ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4613      	mov	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4a12      	ldr	r2, [pc, #72]	@ (8008124 <prvInitialiseTaskLists+0x60>)
 80080dc:	4413      	add	r3, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fcc2 	bl	8006a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3301      	adds	r3, #1
 80080e8:	607b      	str	r3, [r7, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	d9ef      	bls.n	80080d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080f0:	480d      	ldr	r0, [pc, #52]	@ (8008128 <prvInitialiseTaskLists+0x64>)
 80080f2:	f7fe fcb9 	bl	8006a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080f6:	480d      	ldr	r0, [pc, #52]	@ (800812c <prvInitialiseTaskLists+0x68>)
 80080f8:	f7fe fcb6 	bl	8006a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080fc:	480c      	ldr	r0, [pc, #48]	@ (8008130 <prvInitialiseTaskLists+0x6c>)
 80080fe:	f7fe fcb3 	bl	8006a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008102:	480c      	ldr	r0, [pc, #48]	@ (8008134 <prvInitialiseTaskLists+0x70>)
 8008104:	f7fe fcb0 	bl	8006a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008108:	480b      	ldr	r0, [pc, #44]	@ (8008138 <prvInitialiseTaskLists+0x74>)
 800810a:	f7fe fcad 	bl	8006a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800810e:	4b0b      	ldr	r3, [pc, #44]	@ (800813c <prvInitialiseTaskLists+0x78>)
 8008110:	4a05      	ldr	r2, [pc, #20]	@ (8008128 <prvInitialiseTaskLists+0x64>)
 8008112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008114:	4b0a      	ldr	r3, [pc, #40]	@ (8008140 <prvInitialiseTaskLists+0x7c>)
 8008116:	4a05      	ldr	r2, [pc, #20]	@ (800812c <prvInitialiseTaskLists+0x68>)
 8008118:	601a      	str	r2, [r3, #0]
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000b00 	.word	0x20000b00
 8008128:	20000b8c 	.word	0x20000b8c
 800812c:	20000ba0 	.word	0x20000ba0
 8008130:	20000bbc 	.word	0x20000bbc
 8008134:	20000bd0 	.word	0x20000bd0
 8008138:	20000be8 	.word	0x20000be8
 800813c:	20000bb4 	.word	0x20000bb4
 8008140:	20000bb8 	.word	0x20000bb8

08008144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800814a:	e019      	b.n	8008180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800814c:	f000 fdfc 	bl	8008d48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008150:	4b10      	ldr	r3, [pc, #64]	@ (8008194 <prvCheckTasksWaitingTermination+0x50>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3304      	adds	r3, #4
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fd0d 	bl	8006b7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008162:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <prvCheckTasksWaitingTermination+0x54>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3b01      	subs	r3, #1
 8008168:	4a0b      	ldr	r2, [pc, #44]	@ (8008198 <prvCheckTasksWaitingTermination+0x54>)
 800816a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800816c:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <prvCheckTasksWaitingTermination+0x58>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	4a0a      	ldr	r2, [pc, #40]	@ (800819c <prvCheckTasksWaitingTermination+0x58>)
 8008174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008176:	f000 fe19 	bl	8008dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f810 	bl	80081a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008180:	4b06      	ldr	r3, [pc, #24]	@ (800819c <prvCheckTasksWaitingTermination+0x58>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e1      	bne.n	800814c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000bd0 	.word	0x20000bd0
 8008198:	20000bfc 	.word	0x20000bfc
 800819c:	20000be4 	.word	0x20000be4

080081a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	334c      	adds	r3, #76	@ 0x4c
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f91f 	bl	80093f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d108      	bne.n	80081ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 ffb1 	bl	8009128 <vPortFree>
				vPortFree( pxTCB );
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 ffae 	bl	8009128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081cc:	e019      	b.n	8008202 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d103      	bne.n	80081e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 ffa5 	bl	8009128 <vPortFree>
	}
 80081de:	e010      	b.n	8008202 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d00b      	beq.n	8008202 <prvDeleteTCB+0x62>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60fb      	str	r3, [r7, #12]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <prvDeleteTCB+0x5e>
	}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008212:	4b0c      	ldr	r3, [pc, #48]	@ (8008244 <prvResetNextTaskUnblockTime+0x38>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800821c:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <prvResetNextTaskUnblockTime+0x3c>)
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008224:	e008      	b.n	8008238 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008226:	4b07      	ldr	r3, [pc, #28]	@ (8008244 <prvResetNextTaskUnblockTime+0x38>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	4a04      	ldr	r2, [pc, #16]	@ (8008248 <prvResetNextTaskUnblockTime+0x3c>)
 8008236:	6013      	str	r3, [r2, #0]
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	20000bb4 	.word	0x20000bb4
 8008248:	20000c1c 	.word	0x20000c1c

0800824c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008252:	4b0b      	ldr	r3, [pc, #44]	@ (8008280 <xTaskGetSchedulerState+0x34>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800825a:	2301      	movs	r3, #1
 800825c:	607b      	str	r3, [r7, #4]
 800825e:	e008      	b.n	8008272 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008260:	4b08      	ldr	r3, [pc, #32]	@ (8008284 <xTaskGetSchedulerState+0x38>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008268:	2302      	movs	r3, #2
 800826a:	607b      	str	r3, [r7, #4]
 800826c:	e001      	b.n	8008272 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800826e:	2300      	movs	r3, #0
 8008270:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008272:	687b      	ldr	r3, [r7, #4]
	}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000c08 	.word	0x20000c08
 8008284:	20000c24 	.word	0x20000c24

08008288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008294:	2300      	movs	r3, #0
 8008296:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d070      	beq.n	8008380 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800829e:	4b3b      	ldr	r3, [pc, #236]	@ (800838c <xTaskPriorityDisinherit+0x104>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d00b      	beq.n	80082c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	60fb      	str	r3, [r7, #12]
}
 80082ba:	bf00      	nop
 80082bc:	bf00      	nop
 80082be:	e7fd      	b.n	80082bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10b      	bne.n	80082e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60bb      	str	r3, [r7, #8]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082e4:	1e5a      	subs	r2, r3, #1
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d044      	beq.n	8008380 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d140      	bne.n	8008380 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	3304      	adds	r3, #4
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fc3a 	bl	8006b7c <uxListRemove>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d115      	bne.n	800833a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008312:	491f      	ldr	r1, [pc, #124]	@ (8008390 <xTaskPriorityDisinherit+0x108>)
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <xTaskPriorityDisinherit+0xb2>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	2201      	movs	r2, #1
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	43da      	mvns	r2, r3
 8008330:	4b18      	ldr	r3, [pc, #96]	@ (8008394 <xTaskPriorityDisinherit+0x10c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4013      	ands	r3, r2
 8008336:	4a17      	ldr	r2, [pc, #92]	@ (8008394 <xTaskPriorityDisinherit+0x10c>)
 8008338:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008346:	f1c3 0207 	rsb	r2, r3, #7
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008352:	2201      	movs	r2, #1
 8008354:	409a      	lsls	r2, r3
 8008356:	4b0f      	ldr	r3, [pc, #60]	@ (8008394 <xTaskPriorityDisinherit+0x10c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4313      	orrs	r3, r2
 800835c:	4a0d      	ldr	r2, [pc, #52]	@ (8008394 <xTaskPriorityDisinherit+0x10c>)
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4a08      	ldr	r2, [pc, #32]	@ (8008390 <xTaskPriorityDisinherit+0x108>)
 800836e:	441a      	add	r2, r3
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	3304      	adds	r3, #4
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f7fe fba3 	bl	8006ac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800837c:	2301      	movs	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008380:	697b      	ldr	r3, [r7, #20]
	}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000afc 	.word	0x20000afc
 8008390:	20000b00 	.word	0x20000b00
 8008394:	20000c04 	.word	0x20000c04

08008398 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083a2:	4b29      	ldr	r3, [pc, #164]	@ (8008448 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083a8:	4b28      	ldr	r3, [pc, #160]	@ (800844c <prvAddCurrentTaskToDelayedList+0xb4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fbe4 	bl	8006b7c <uxListRemove>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083ba:	4b24      	ldr	r3, [pc, #144]	@ (800844c <prvAddCurrentTaskToDelayedList+0xb4>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	2201      	movs	r2, #1
 80083c2:	fa02 f303 	lsl.w	r3, r2, r3
 80083c6:	43da      	mvns	r2, r3
 80083c8:	4b21      	ldr	r3, [pc, #132]	@ (8008450 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4013      	ands	r3, r2
 80083ce:	4a20      	ldr	r2, [pc, #128]	@ (8008450 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d8:	d10a      	bne.n	80083f0 <prvAddCurrentTaskToDelayedList+0x58>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083e0:	4b1a      	ldr	r3, [pc, #104]	@ (800844c <prvAddCurrentTaskToDelayedList+0xb4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	481a      	ldr	r0, [pc, #104]	@ (8008454 <prvAddCurrentTaskToDelayedList+0xbc>)
 80083ea:	f7fe fb6a 	bl	8006ac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083ee:	e026      	b.n	800843e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4413      	add	r3, r2
 80083f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083f8:	4b14      	ldr	r3, [pc, #80]	@ (800844c <prvAddCurrentTaskToDelayedList+0xb4>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d209      	bcs.n	800841c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008408:	4b13      	ldr	r3, [pc, #76]	@ (8008458 <prvAddCurrentTaskToDelayedList+0xc0>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b0f      	ldr	r3, [pc, #60]	@ (800844c <prvAddCurrentTaskToDelayedList+0xb4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3304      	adds	r3, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7fe fb78 	bl	8006b0a <vListInsert>
}
 800841a:	e010      	b.n	800843e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800841c:	4b0f      	ldr	r3, [pc, #60]	@ (800845c <prvAddCurrentTaskToDelayedList+0xc4>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b0a      	ldr	r3, [pc, #40]	@ (800844c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3304      	adds	r3, #4
 8008426:	4619      	mov	r1, r3
 8008428:	4610      	mov	r0, r2
 800842a:	f7fe fb6e 	bl	8006b0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800842e:	4b0c      	ldr	r3, [pc, #48]	@ (8008460 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	429a      	cmp	r2, r3
 8008436:	d202      	bcs.n	800843e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008438:	4a09      	ldr	r2, [pc, #36]	@ (8008460 <prvAddCurrentTaskToDelayedList+0xc8>)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6013      	str	r3, [r2, #0]
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000c00 	.word	0x20000c00
 800844c:	20000afc 	.word	0x20000afc
 8008450:	20000c04 	.word	0x20000c04
 8008454:	20000be8 	.word	0x20000be8
 8008458:	20000bb8 	.word	0x20000bb8
 800845c:	20000bb4 	.word	0x20000bb4
 8008460:	20000c1c 	.word	0x20000c1c

08008464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08a      	sub	sp, #40	@ 0x28
 8008468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800846a:	2300      	movs	r3, #0
 800846c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800846e:	f000 faf7 	bl	8008a60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008472:	4b1d      	ldr	r3, [pc, #116]	@ (80084e8 <xTimerCreateTimerTask+0x84>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d021      	beq.n	80084be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008482:	1d3a      	adds	r2, r7, #4
 8008484:	f107 0108 	add.w	r1, r7, #8
 8008488:	f107 030c 	add.w	r3, r7, #12
 800848c:	4618      	mov	r0, r3
 800848e:	f7f8 f89f 	bl	80005d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	9202      	str	r2, [sp, #8]
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	2302      	movs	r3, #2
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	2300      	movs	r3, #0
 80084a2:	460a      	mov	r2, r1
 80084a4:	4911      	ldr	r1, [pc, #68]	@ (80084ec <xTimerCreateTimerTask+0x88>)
 80084a6:	4812      	ldr	r0, [pc, #72]	@ (80084f0 <xTimerCreateTimerTask+0x8c>)
 80084a8:	f7ff f888 	bl	80075bc <xTaskCreateStatic>
 80084ac:	4603      	mov	r3, r0
 80084ae:	4a11      	ldr	r2, [pc, #68]	@ (80084f4 <xTimerCreateTimerTask+0x90>)
 80084b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084b2:	4b10      	ldr	r3, [pc, #64]	@ (80084f4 <xTimerCreateTimerTask+0x90>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084ba:	2301      	movs	r3, #1
 80084bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	613b      	str	r3, [r7, #16]
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	e7fd      	b.n	80084d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084dc:	697b      	ldr	r3, [r7, #20]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000c58 	.word	0x20000c58
 80084ec:	08009e20 	.word	0x08009e20
 80084f0:	08008631 	.word	0x08008631
 80084f4:	20000c5c 	.word	0x20000c5c

080084f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	@ 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008506:	2300      	movs	r3, #0
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10b      	bne.n	8008528 <xTimerGenericCommand+0x30>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	623b      	str	r3, [r7, #32]
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008528:	4b19      	ldr	r3, [pc, #100]	@ (8008590 <xTimerGenericCommand+0x98>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d02a      	beq.n	8008586 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b05      	cmp	r3, #5
 8008540:	dc18      	bgt.n	8008574 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008542:	f7ff fe83 	bl	800824c <xTaskGetSchedulerState>
 8008546:	4603      	mov	r3, r0
 8008548:	2b02      	cmp	r3, #2
 800854a:	d109      	bne.n	8008560 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800854c:	4b10      	ldr	r3, [pc, #64]	@ (8008590 <xTimerGenericCommand+0x98>)
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	f107 0114 	add.w	r1, r7, #20
 8008554:	2300      	movs	r3, #0
 8008556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008558:	f7fe fc40 	bl	8006ddc <xQueueGenericSend>
 800855c:	6278      	str	r0, [r7, #36]	@ 0x24
 800855e:	e012      	b.n	8008586 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008560:	4b0b      	ldr	r3, [pc, #44]	@ (8008590 <xTimerGenericCommand+0x98>)
 8008562:	6818      	ldr	r0, [r3, #0]
 8008564:	f107 0114 	add.w	r1, r7, #20
 8008568:	2300      	movs	r3, #0
 800856a:	2200      	movs	r2, #0
 800856c:	f7fe fc36 	bl	8006ddc <xQueueGenericSend>
 8008570:	6278      	str	r0, [r7, #36]	@ 0x24
 8008572:	e008      	b.n	8008586 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008574:	4b06      	ldr	r3, [pc, #24]	@ (8008590 <xTimerGenericCommand+0x98>)
 8008576:	6818      	ldr	r0, [r3, #0]
 8008578:	f107 0114 	add.w	r1, r7, #20
 800857c:	2300      	movs	r3, #0
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	f7fe fd2e 	bl	8006fe0 <xQueueGenericSendFromISR>
 8008584:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008588:	4618      	mov	r0, r3
 800858a:	3728      	adds	r7, #40	@ 0x28
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000c58 	.word	0x20000c58

08008594 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859e:	4b23      	ldr	r3, [pc, #140]	@ (800862c <prvProcessExpiredTimer+0x98>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	3304      	adds	r3, #4
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fe fae5 	bl	8006b7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d023      	beq.n	8008608 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	699a      	ldr	r2, [r3, #24]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	18d1      	adds	r1, r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	6978      	ldr	r0, [r7, #20]
 80085ce:	f000 f8d5 	bl	800877c <prvInsertTimerInActiveList>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d020      	beq.n	800861a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085d8:	2300      	movs	r3, #0
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2300      	movs	r3, #0
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	2100      	movs	r1, #0
 80085e2:	6978      	ldr	r0, [r7, #20]
 80085e4:	f7ff ff88 	bl	80084f8 <xTimerGenericCommand>
 80085e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d114      	bne.n	800861a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	6978      	ldr	r0, [r7, #20]
 8008620:	4798      	blx	r3
}
 8008622:	bf00      	nop
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000c50 	.word	0x20000c50

08008630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f859 	bl	80086f4 <prvGetNextExpireTime>
 8008642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f805 	bl	8008658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800864e:	f000 f8d7 	bl	8008800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008652:	bf00      	nop
 8008654:	e7f0      	b.n	8008638 <prvTimerTask+0x8>
	...

08008658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008662:	f7ff fa01 	bl	8007a68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f866 	bl	800873c <prvSampleTimeNow>
 8008670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d130      	bne.n	80086da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <prvProcessTimerOrBlockTask+0x3c>
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	429a      	cmp	r2, r3
 8008684:	d806      	bhi.n	8008694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008686:	f7ff f9fd 	bl	8007a84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff ff81 	bl	8008594 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008692:	e024      	b.n	80086de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800869a:	4b13      	ldr	r3, [pc, #76]	@ (80086e8 <prvProcessTimerOrBlockTask+0x90>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <prvProcessTimerOrBlockTask+0x50>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <prvProcessTimerOrBlockTask+0x52>
 80086a8:	2300      	movs	r3, #0
 80086aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086ac:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <prvProcessTimerOrBlockTask+0x94>)
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4619      	mov	r1, r3
 80086ba:	f7fe ff4b 	bl	8007554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086be:	f7ff f9e1 	bl	8007a84 <xTaskResumeAll>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086c8:	4b09      	ldr	r3, [pc, #36]	@ (80086f0 <prvProcessTimerOrBlockTask+0x98>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
}
 80086d8:	e001      	b.n	80086de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086da:	f7ff f9d3 	bl	8007a84 <xTaskResumeAll>
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000c54 	.word	0x20000c54
 80086ec:	20000c58 	.word	0x20000c58
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008738 <prvGetNextExpireTime+0x44>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <prvGetNextExpireTime+0x16>
 8008706:	2201      	movs	r2, #1
 8008708:	e000      	b.n	800870c <prvGetNextExpireTime+0x18>
 800870a:	2200      	movs	r2, #0
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d105      	bne.n	8008724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008718:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <prvGetNextExpireTime+0x44>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e001      	b.n	8008728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000c50 	.word	0x20000c50

0800873c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008744:	f7ff fa3c 	bl	8007bc0 <xTaskGetTickCount>
 8008748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800874a:	4b0b      	ldr	r3, [pc, #44]	@ (8008778 <prvSampleTimeNow+0x3c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	429a      	cmp	r2, r3
 8008752:	d205      	bcs.n	8008760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008754:	f000 f91e 	bl	8008994 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	e002      	b.n	8008766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008766:	4a04      	ldr	r2, [pc, #16]	@ (8008778 <prvSampleTimeNow+0x3c>)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800876c:	68fb      	ldr	r3, [r7, #12]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000c60 	.word	0x20000c60

0800877c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d812      	bhi.n	80087c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d302      	bcc.n	80087b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	e01b      	b.n	80087ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087b6:	4b10      	ldr	r3, [pc, #64]	@ (80087f8 <prvInsertTimerInActiveList+0x7c>)
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3304      	adds	r3, #4
 80087be:	4619      	mov	r1, r3
 80087c0:	4610      	mov	r0, r2
 80087c2:	f7fe f9a2 	bl	8006b0a <vListInsert>
 80087c6:	e012      	b.n	80087ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d206      	bcs.n	80087de <prvInsertTimerInActiveList+0x62>
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d302      	bcc.n	80087de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087d8:	2301      	movs	r3, #1
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e007      	b.n	80087ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087de:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <prvInsertTimerInActiveList+0x80>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7fe f98e 	bl	8006b0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087ee:	697b      	ldr	r3, [r7, #20]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000c54 	.word	0x20000c54
 80087fc:	20000c50 	.word	0x20000c50

08008800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	@ 0x30
 8008804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008806:	e0b2      	b.n	800896e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f2c0 80af 	blt.w	800896e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	3304      	adds	r3, #4
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe f9ab 	bl	8006b7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008826:	1d3b      	adds	r3, r7, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff ff87 	bl	800873c <prvSampleTimeNow>
 800882e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b09      	cmp	r3, #9
 8008834:	f200 8098 	bhi.w	8008968 <prvProcessReceivedCommands+0x168>
 8008838:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <prvProcessReceivedCommands+0x40>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008869 	.word	0x08008869
 8008844:	08008869 	.word	0x08008869
 8008848:	08008869 	.word	0x08008869
 800884c:	080088df 	.word	0x080088df
 8008850:	080088f3 	.word	0x080088f3
 8008854:	0800893f 	.word	0x0800893f
 8008858:	08008869 	.word	0x08008869
 800885c:	08008869 	.word	0x08008869
 8008860:	080088df 	.word	0x080088df
 8008864:	080088f3 	.word	0x080088f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	b2da      	uxtb	r2, r3
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	18d1      	adds	r1, r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a3a      	ldr	r2, [r7, #32]
 8008886:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008888:	f7ff ff78 	bl	800877c <prvInsertTimerInActiveList>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d06c      	beq.n	800896c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008898:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d061      	beq.n	800896c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	441a      	add	r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	2100      	movs	r1, #0
 80088b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088ba:	f7ff fe1d 	bl	80084f8 <xTimerGenericCommand>
 80088be:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d152      	bne.n	800896c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	61bb      	str	r3, [r7, #24]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80088f0:	e03d      	b.n	800896e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10b      	bne.n	800892a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	617b      	str	r3, [r7, #20]
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	e7fd      	b.n	8008926 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	699a      	ldr	r2, [r3, #24]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	18d1      	adds	r1, r2, r3
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	6a3a      	ldr	r2, [r7, #32]
 8008936:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008938:	f7ff ff20 	bl	800877c <prvInsertTimerInActiveList>
					break;
 800893c:	e017      	b.n	800896e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800894c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800894e:	f000 fbeb 	bl	8009128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008952:	e00c      	b.n	800896e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800895a:	f023 0301 	bic.w	r3, r3, #1
 800895e:	b2da      	uxtb	r2, r3
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8008966:	e002      	b.n	800896e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8008968:	bf00      	nop
 800896a:	e000      	b.n	800896e <prvProcessReceivedCommands+0x16e>
					break;
 800896c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800896e:	4b08      	ldr	r3, [pc, #32]	@ (8008990 <prvProcessReceivedCommands+0x190>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f107 0108 	add.w	r1, r7, #8
 8008976:	2200      	movs	r2, #0
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fbcf 	bl	800711c <xQueueReceive>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	f47f af41 	bne.w	8008808 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	3728      	adds	r7, #40	@ 0x28
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000c58 	.word	0x20000c58

08008994 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800899a:	e049      	b.n	8008a30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800899c:	4b2e      	ldr	r3, [pc, #184]	@ (8008a58 <prvSwitchTimerLists+0xc4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008a58 <prvSwitchTimerLists+0xc4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3304      	adds	r3, #4
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fe f8e1 	bl	8006b7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d02f      	beq.n	8008a30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4413      	add	r3, r2
 80089d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d90e      	bls.n	8008a00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008a58 <prvSwitchTimerLists+0xc4>)
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f7fe f886 	bl	8006b0a <vListInsert>
 80089fe:	e017      	b.n	8008a30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a00:	2300      	movs	r3, #0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	2300      	movs	r3, #0
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	2100      	movs	r1, #0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7ff fd74 	bl	80084f8 <xTimerGenericCommand>
 8008a10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	603b      	str	r3, [r7, #0]
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	e7fd      	b.n	8008a2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a30:	4b09      	ldr	r3, [pc, #36]	@ (8008a58 <prvSwitchTimerLists+0xc4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1b0      	bne.n	800899c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a3a:	4b07      	ldr	r3, [pc, #28]	@ (8008a58 <prvSwitchTimerLists+0xc4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a40:	4b06      	ldr	r3, [pc, #24]	@ (8008a5c <prvSwitchTimerLists+0xc8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a04      	ldr	r2, [pc, #16]	@ (8008a58 <prvSwitchTimerLists+0xc4>)
 8008a46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a48:	4a04      	ldr	r2, [pc, #16]	@ (8008a5c <prvSwitchTimerLists+0xc8>)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	6013      	str	r3, [r2, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000c50 	.word	0x20000c50
 8008a5c:	20000c54 	.word	0x20000c54

08008a60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a66:	f000 f96f 	bl	8008d48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a6a:	4b15      	ldr	r3, [pc, #84]	@ (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d120      	bne.n	8008ab4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a72:	4814      	ldr	r0, [pc, #80]	@ (8008ac4 <prvCheckForValidListAndQueue+0x64>)
 8008a74:	f7fd fff8 	bl	8006a68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a78:	4813      	ldr	r0, [pc, #76]	@ (8008ac8 <prvCheckForValidListAndQueue+0x68>)
 8008a7a:	f7fd fff5 	bl	8006a68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a7e:	4b13      	ldr	r3, [pc, #76]	@ (8008acc <prvCheckForValidListAndQueue+0x6c>)
 8008a80:	4a10      	ldr	r2, [pc, #64]	@ (8008ac4 <prvCheckForValidListAndQueue+0x64>)
 8008a82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a84:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <prvCheckForValidListAndQueue+0x70>)
 8008a86:	4a10      	ldr	r2, [pc, #64]	@ (8008ac8 <prvCheckForValidListAndQueue+0x68>)
 8008a88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	4b11      	ldr	r3, [pc, #68]	@ (8008ad4 <prvCheckForValidListAndQueue+0x74>)
 8008a90:	4a11      	ldr	r2, [pc, #68]	@ (8008ad8 <prvCheckForValidListAndQueue+0x78>)
 8008a92:	210c      	movs	r1, #12
 8008a94:	200a      	movs	r0, #10
 8008a96:	f7fe f905 	bl	8006ca4 <xQueueGenericCreateStatic>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4a08      	ldr	r2, [pc, #32]	@ (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008a9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008aa0:	4b07      	ldr	r3, [pc, #28]	@ (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008aa8:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	490b      	ldr	r1, [pc, #44]	@ (8008adc <prvCheckForValidListAndQueue+0x7c>)
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fd26 	bl	8007500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ab4:	f000 f97a 	bl	8008dac <vPortExitCritical>
}
 8008ab8:	bf00      	nop
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000c58 	.word	0x20000c58
 8008ac4:	20000c28 	.word	0x20000c28
 8008ac8:	20000c3c 	.word	0x20000c3c
 8008acc:	20000c50 	.word	0x20000c50
 8008ad0:	20000c54 	.word	0x20000c54
 8008ad4:	20000cdc 	.word	0x20000cdc
 8008ad8:	20000c64 	.word	0x20000c64
 8008adc:	08009e28 	.word	0x08009e28

08008ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3b04      	subs	r3, #4
 8008af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3b04      	subs	r3, #4
 8008afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0201 	bic.w	r2, r3, #1
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b10:	4a0c      	ldr	r2, [pc, #48]	@ (8008b44 <pxPortInitialiseStack+0x64>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b14      	subs	r3, #20
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f06f 0202 	mvn.w	r2, #2
 8008b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3b20      	subs	r3, #32
 8008b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b36:	68fb      	ldr	r3, [r7, #12]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	08008b49 	.word	0x08008b49

08008b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b52:	4b13      	ldr	r3, [pc, #76]	@ (8008ba0 <prvTaskExitError+0x58>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5a:	d00b      	beq.n	8008b74 <prvTaskExitError+0x2c>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60fb      	str	r3, [r7, #12]
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	e7fd      	b.n	8008b70 <prvTaskExitError+0x28>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	60bb      	str	r3, [r7, #8]
}
 8008b86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b88:	bf00      	nop
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0fc      	beq.n	8008b8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	2000000c 	.word	0x2000000c
	...

08008bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bb0:	4b07      	ldr	r3, [pc, #28]	@ (8008bd0 <pxCurrentTCBConst2>)
 8008bb2:	6819      	ldr	r1, [r3, #0]
 8008bb4:	6808      	ldr	r0, [r1, #0]
 8008bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	f380 8809 	msr	PSP, r0
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	f380 8811 	msr	BASEPRI, r0
 8008bca:	4770      	bx	lr
 8008bcc:	f3af 8000 	nop.w

08008bd0 <pxCurrentTCBConst2>:
 8008bd0:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop

08008bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bd8:	4808      	ldr	r0, [pc, #32]	@ (8008bfc <prvPortStartFirstTask+0x24>)
 8008bda:	6800      	ldr	r0, [r0, #0]
 8008bdc:	6800      	ldr	r0, [r0, #0]
 8008bde:	f380 8808 	msr	MSP, r0
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8814 	msr	CONTROL, r0
 8008bea:	b662      	cpsie	i
 8008bec:	b661      	cpsie	f
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	df00      	svc	0
 8008bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bfa:	bf00      	nop
 8008bfc:	e000ed08 	.word	0xe000ed08

08008c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c06:	4b47      	ldr	r3, [pc, #284]	@ (8008d24 <xPortStartScheduler+0x124>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a47      	ldr	r2, [pc, #284]	@ (8008d28 <xPortStartScheduler+0x128>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d10b      	bne.n	8008c28 <xPortStartScheduler+0x28>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	60fb      	str	r3, [r7, #12]
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	e7fd      	b.n	8008c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c28:	4b3e      	ldr	r3, [pc, #248]	@ (8008d24 <xPortStartScheduler+0x124>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d2c <xPortStartScheduler+0x12c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d10b      	bne.n	8008c4a <xPortStartScheduler+0x4a>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	613b      	str	r3, [r7, #16]
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	e7fd      	b.n	8008c46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c4a:	4b39      	ldr	r3, [pc, #228]	@ (8008d30 <xPortStartScheduler+0x130>)
 8008c4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	22ff      	movs	r2, #255	@ 0xff
 8008c5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	4b31      	ldr	r3, [pc, #196]	@ (8008d34 <xPortStartScheduler+0x134>)
 8008c70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c72:	4b31      	ldr	r3, [pc, #196]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008c74:	2207      	movs	r2, #7
 8008c76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c78:	e009      	b.n	8008c8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	4a2d      	ldr	r2, [pc, #180]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008c82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c96:	2b80      	cmp	r3, #128	@ 0x80
 8008c98:	d0ef      	beq.n	8008c7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c9a:	4b27      	ldr	r3, [pc, #156]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f1c3 0307 	rsb	r3, r3, #7
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d00b      	beq.n	8008cbe <xPortStartScheduler+0xbe>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	60bb      	str	r3, [r7, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	021b      	lsls	r3, r3, #8
 8008cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008cc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cd0:	4a19      	ldr	r2, [pc, #100]	@ (8008d38 <xPortStartScheduler+0x138>)
 8008cd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cdc:	4b17      	ldr	r3, [pc, #92]	@ (8008d3c <xPortStartScheduler+0x13c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a16      	ldr	r2, [pc, #88]	@ (8008d3c <xPortStartScheduler+0x13c>)
 8008ce2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008ce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ce8:	4b14      	ldr	r3, [pc, #80]	@ (8008d3c <xPortStartScheduler+0x13c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a13      	ldr	r2, [pc, #76]	@ (8008d3c <xPortStartScheduler+0x13c>)
 8008cee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008cf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cf4:	f000 f8da 	bl	8008eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	@ (8008d40 <xPortStartScheduler+0x140>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cfe:	f000 f8f9 	bl	8008ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d02:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <xPortStartScheduler+0x144>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a0f      	ldr	r2, [pc, #60]	@ (8008d44 <xPortStartScheduler+0x144>)
 8008d08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d0e:	f7ff ff63 	bl	8008bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d12:	f7ff f81f 	bl	8007d54 <vTaskSwitchContext>
	prvTaskExitError();
 8008d16:	f7ff ff17 	bl	8008b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	e000ed00 	.word	0xe000ed00
 8008d28:	410fc271 	.word	0x410fc271
 8008d2c:	410fc270 	.word	0x410fc270
 8008d30:	e000e400 	.word	0xe000e400
 8008d34:	20000d24 	.word	0x20000d24
 8008d38:	20000d28 	.word	0x20000d28
 8008d3c:	e000ed20 	.word	0xe000ed20
 8008d40:	2000000c 	.word	0x2000000c
 8008d44:	e000ef34 	.word	0xe000ef34

08008d48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
}
 8008d60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d62:	4b10      	ldr	r3, [pc, #64]	@ (8008da4 <vPortEnterCritical+0x5c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	4a0e      	ldr	r2, [pc, #56]	@ (8008da4 <vPortEnterCritical+0x5c>)
 8008d6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008da4 <vPortEnterCritical+0x5c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d110      	bne.n	8008d96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d74:	4b0c      	ldr	r3, [pc, #48]	@ (8008da8 <vPortEnterCritical+0x60>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	603b      	str	r3, [r7, #0]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <vPortEnterCritical+0x4a>
	}
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	2000000c 	.word	0x2000000c
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008db2:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <vPortExitCritical+0x50>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10b      	bne.n	8008dd2 <vPortExitCritical+0x26>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	607b      	str	r3, [r7, #4]
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	e7fd      	b.n	8008dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <vPortExitCritical+0x50>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	4a08      	ldr	r2, [pc, #32]	@ (8008dfc <vPortExitCritical+0x50>)
 8008dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ddc:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <vPortExitCritical+0x50>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d105      	bne.n	8008df0 <vPortExitCritical+0x44>
 8008de4:	2300      	movs	r3, #0
 8008de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f383 8811 	msr	BASEPRI, r3
}
 8008dee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	2000000c 	.word	0x2000000c

08008e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e00:	f3ef 8009 	mrs	r0, PSP
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4b15      	ldr	r3, [pc, #84]	@ (8008e60 <pxCurrentTCBConst>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	f01e 0f10 	tst.w	lr, #16
 8008e10:	bf08      	it	eq
 8008e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1a:	6010      	str	r0, [r2, #0]
 8008e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e24:	f380 8811 	msr	BASEPRI, r0
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f7fe ff90 	bl	8007d54 <vTaskSwitchContext>
 8008e34:	f04f 0000 	mov.w	r0, #0
 8008e38:	f380 8811 	msr	BASEPRI, r0
 8008e3c:	bc09      	pop	{r0, r3}
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	6808      	ldr	r0, [r1, #0]
 8008e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e46:	f01e 0f10 	tst.w	lr, #16
 8008e4a:	bf08      	it	eq
 8008e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e50:	f380 8809 	msr	PSP, r0
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	f3af 8000 	nop.w

08008e60 <pxCurrentTCBConst>:
 8008e60:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop

08008e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	607b      	str	r3, [r7, #4]
}
 8008e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e82:	f7fe fead 	bl	8007be0 <xTaskIncrementTick>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <SysTick_Handler+0x40>)
 8008e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	2300      	movs	r3, #0
 8008e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	f383 8811 	msr	BASEPRI, r3
}
 8008e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008eac:	b480      	push	{r7}
 8008eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee0 <vPortSetupTimerInterrupt+0x34>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee4 <vPortSetupTimerInterrupt+0x38>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <vPortSetupTimerInterrupt+0x3c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8008eec <vPortSetupTimerInterrupt+0x40>)
 8008ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec6:	099b      	lsrs	r3, r3, #6
 8008ec8:	4a09      	ldr	r2, [pc, #36]	@ (8008ef0 <vPortSetupTimerInterrupt+0x44>)
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ece:	4b04      	ldr	r3, [pc, #16]	@ (8008ee0 <vPortSetupTimerInterrupt+0x34>)
 8008ed0:	2207      	movs	r2, #7
 8008ed2:	601a      	str	r2, [r3, #0]
}
 8008ed4:	bf00      	nop
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	e000e010 	.word	0xe000e010
 8008ee4:	e000e018 	.word	0xe000e018
 8008ee8:	20000000 	.word	0x20000000
 8008eec:	10624dd3 	.word	0x10624dd3
 8008ef0:	e000e014 	.word	0xe000e014

08008ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f04 <vPortEnableVFP+0x10>
 8008ef8:	6801      	ldr	r1, [r0, #0]
 8008efa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008efe:	6001      	str	r1, [r0, #0]
 8008f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f02:	bf00      	nop
 8008f04:	e000ed88 	.word	0xe000ed88

08008f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f0e:	f3ef 8305 	mrs	r3, IPSR
 8008f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b0f      	cmp	r3, #15
 8008f18:	d915      	bls.n	8008f46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f1a:	4a18      	ldr	r2, [pc, #96]	@ (8008f7c <vPortValidateInterruptPriority+0x74>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f24:	4b16      	ldr	r3, [pc, #88]	@ (8008f80 <vPortValidateInterruptPriority+0x78>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	7afa      	ldrb	r2, [r7, #11]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d20b      	bcs.n	8008f46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	e7fd      	b.n	8008f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f46:	4b0f      	ldr	r3, [pc, #60]	@ (8008f84 <vPortValidateInterruptPriority+0x7c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f88 <vPortValidateInterruptPriority+0x80>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d90b      	bls.n	8008f6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	603b      	str	r3, [r7, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	bf00      	nop
 8008f6c:	e7fd      	b.n	8008f6a <vPortValidateInterruptPriority+0x62>
	}
 8008f6e:	bf00      	nop
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	e000e3f0 	.word	0xe000e3f0
 8008f80:	20000d24 	.word	0x20000d24
 8008f84:	e000ed0c 	.word	0xe000ed0c
 8008f88:	20000d28 	.word	0x20000d28

08008f8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	@ 0x28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f98:	f7fe fd66 	bl	8007a68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8009110 <pvPortMalloc+0x184>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fa4:	f000 f924 	bl	80091f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8009114 <pvPortMalloc+0x188>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4013      	ands	r3, r2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f040 8095 	bne.w	80090e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01e      	beq.n	8008ffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d015      	beq.n	8008ffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f023 0307 	bic.w	r3, r3, #7
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00b      	beq.n	8008ffa <pvPortMalloc+0x6e>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	617b      	str	r3, [r7, #20]
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	e7fd      	b.n	8008ff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d06f      	beq.n	80090e0 <pvPortMalloc+0x154>
 8009000:	4b45      	ldr	r3, [pc, #276]	@ (8009118 <pvPortMalloc+0x18c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d86a      	bhi.n	80090e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800900a:	4b44      	ldr	r3, [pc, #272]	@ (800911c <pvPortMalloc+0x190>)
 800900c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800900e:	4b43      	ldr	r3, [pc, #268]	@ (800911c <pvPortMalloc+0x190>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009014:	e004      	b.n	8009020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	429a      	cmp	r2, r3
 8009028:	d903      	bls.n	8009032 <pvPortMalloc+0xa6>
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1f1      	bne.n	8009016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009032:	4b37      	ldr	r3, [pc, #220]	@ (8009110 <pvPortMalloc+0x184>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009038:	429a      	cmp	r2, r3
 800903a:	d051      	beq.n	80090e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2208      	movs	r2, #8
 8009042:	4413      	add	r3, r2
 8009044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	2308      	movs	r3, #8
 8009058:	005b      	lsls	r3, r3, #1
 800905a:	429a      	cmp	r2, r3
 800905c:	d920      	bls.n	80090a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800905e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4413      	add	r3, r2
 8009064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <pvPortMalloc+0xfc>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	613b      	str	r3, [r7, #16]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800909a:	69b8      	ldr	r0, [r7, #24]
 800909c:	f000 f90a 	bl	80092b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009118 <pvPortMalloc+0x18c>)
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009118 <pvPortMalloc+0x18c>)
 80090ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <pvPortMalloc+0x18c>)
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009120 <pvPortMalloc+0x194>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d203      	bcs.n	80090c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090ba:	4b17      	ldr	r3, [pc, #92]	@ (8009118 <pvPortMalloc+0x18c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a18      	ldr	r2, [pc, #96]	@ (8009120 <pvPortMalloc+0x194>)
 80090c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	4b13      	ldr	r3, [pc, #76]	@ (8009114 <pvPortMalloc+0x188>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090d6:	4b13      	ldr	r3, [pc, #76]	@ (8009124 <pvPortMalloc+0x198>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3301      	adds	r3, #1
 80090dc:	4a11      	ldr	r2, [pc, #68]	@ (8009124 <pvPortMalloc+0x198>)
 80090de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090e0:	f7fe fcd0 	bl	8007a84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <pvPortMalloc+0x17a>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	60fb      	str	r3, [r7, #12]
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	e7fd      	b.n	8009102 <pvPortMalloc+0x176>
	return pvReturn;
 8009106:	69fb      	ldr	r3, [r7, #28]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3728      	adds	r7, #40	@ 0x28
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20002d34 	.word	0x20002d34
 8009114:	20002d48 	.word	0x20002d48
 8009118:	20002d38 	.word	0x20002d38
 800911c:	20002d2c 	.word	0x20002d2c
 8009120:	20002d3c 	.word	0x20002d3c
 8009124:	20002d40 	.word	0x20002d40

08009128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d04f      	beq.n	80091da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800913a:	2308      	movs	r3, #8
 800913c:	425b      	negs	r3, r3
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	4413      	add	r3, r2
 8009142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	4b25      	ldr	r3, [pc, #148]	@ (80091e4 <vPortFree+0xbc>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4013      	ands	r3, r2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10b      	bne.n	800916e <vPortFree+0x46>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	60fb      	str	r3, [r7, #12]
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	e7fd      	b.n	800916a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00b      	beq.n	800918e <vPortFree+0x66>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60bb      	str	r3, [r7, #8]
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	e7fd      	b.n	800918a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	4b14      	ldr	r3, [pc, #80]	@ (80091e4 <vPortFree+0xbc>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4013      	ands	r3, r2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01e      	beq.n	80091da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d11a      	bne.n	80091da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	4b0e      	ldr	r3, [pc, #56]	@ (80091e4 <vPortFree+0xbc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	43db      	mvns	r3, r3
 80091ae:	401a      	ands	r2, r3
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091b4:	f7fe fc58 	bl	8007a68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b0a      	ldr	r3, [pc, #40]	@ (80091e8 <vPortFree+0xc0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4413      	add	r3, r2
 80091c2:	4a09      	ldr	r2, [pc, #36]	@ (80091e8 <vPortFree+0xc0>)
 80091c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091c6:	6938      	ldr	r0, [r7, #16]
 80091c8:	f000 f874 	bl	80092b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091cc:	4b07      	ldr	r3, [pc, #28]	@ (80091ec <vPortFree+0xc4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	4a06      	ldr	r2, [pc, #24]	@ (80091ec <vPortFree+0xc4>)
 80091d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091d6:	f7fe fc55 	bl	8007a84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091da:	bf00      	nop
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20002d48 	.word	0x20002d48
 80091e8:	20002d38 	.word	0x20002d38
 80091ec:	20002d44 	.word	0x20002d44

080091f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80091fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091fc:	4b27      	ldr	r3, [pc, #156]	@ (800929c <prvHeapInit+0xac>)
 80091fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00c      	beq.n	8009224 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3307      	adds	r3, #7
 800920e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	4a1f      	ldr	r2, [pc, #124]	@ (800929c <prvHeapInit+0xac>)
 8009220:	4413      	add	r3, r2
 8009222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009228:	4a1d      	ldr	r2, [pc, #116]	@ (80092a0 <prvHeapInit+0xb0>)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800922e:	4b1c      	ldr	r3, [pc, #112]	@ (80092a0 <prvHeapInit+0xb0>)
 8009230:	2200      	movs	r2, #0
 8009232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	4413      	add	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800923c:	2208      	movs	r2, #8
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4a15      	ldr	r2, [pc, #84]	@ (80092a4 <prvHeapInit+0xb4>)
 8009250:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009252:	4b14      	ldr	r3, [pc, #80]	@ (80092a4 <prvHeapInit+0xb4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2200      	movs	r2, #0
 8009258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800925a:	4b12      	ldr	r3, [pc, #72]	@ (80092a4 <prvHeapInit+0xb4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	1ad2      	subs	r2, r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009270:	4b0c      	ldr	r3, [pc, #48]	@ (80092a4 <prvHeapInit+0xb4>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	4a0a      	ldr	r2, [pc, #40]	@ (80092a8 <prvHeapInit+0xb8>)
 800927e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	4a09      	ldr	r2, [pc, #36]	@ (80092ac <prvHeapInit+0xbc>)
 8009286:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009288:	4b09      	ldr	r3, [pc, #36]	@ (80092b0 <prvHeapInit+0xc0>)
 800928a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800928e:	601a      	str	r2, [r3, #0]
}
 8009290:	bf00      	nop
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20000d2c 	.word	0x20000d2c
 80092a0:	20002d2c 	.word	0x20002d2c
 80092a4:	20002d34 	.word	0x20002d34
 80092a8:	20002d3c 	.word	0x20002d3c
 80092ac:	20002d38 	.word	0x20002d38
 80092b0:	20002d48 	.word	0x20002d48

080092b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092bc:	4b28      	ldr	r3, [pc, #160]	@ (8009360 <prvInsertBlockIntoFreeList+0xac>)
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	e002      	b.n	80092c8 <prvInsertBlockIntoFreeList+0x14>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d8f7      	bhi.n	80092c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	4413      	add	r3, r2
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d108      	bne.n	80092f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	441a      	add	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d118      	bne.n	800933c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4b15      	ldr	r3, [pc, #84]	@ (8009364 <prvInsertBlockIntoFreeList+0xb0>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d00d      	beq.n	8009332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	441a      	add	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	e008      	b.n	8009344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009332:	4b0c      	ldr	r3, [pc, #48]	@ (8009364 <prvInsertBlockIntoFreeList+0xb0>)
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e003      	b.n	8009344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	d002      	beq.n	8009352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009352:	bf00      	nop
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20002d2c 	.word	0x20002d2c
 8009364:	20002d34 	.word	0x20002d34

08009368 <_vsniprintf_r>:
 8009368:	b530      	push	{r4, r5, lr}
 800936a:	4614      	mov	r4, r2
 800936c:	2c00      	cmp	r4, #0
 800936e:	b09b      	sub	sp, #108	@ 0x6c
 8009370:	4605      	mov	r5, r0
 8009372:	461a      	mov	r2, r3
 8009374:	da05      	bge.n	8009382 <_vsniprintf_r+0x1a>
 8009376:	238b      	movs	r3, #139	@ 0x8b
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	f04f 30ff 	mov.w	r0, #4294967295
 800937e:	b01b      	add	sp, #108	@ 0x6c
 8009380:	bd30      	pop	{r4, r5, pc}
 8009382:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009386:	f8ad 300c 	strh.w	r3, [sp, #12]
 800938a:	f04f 0300 	mov.w	r3, #0
 800938e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009390:	bf14      	ite	ne
 8009392:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009396:	4623      	moveq	r3, r4
 8009398:	9302      	str	r3, [sp, #8]
 800939a:	9305      	str	r3, [sp, #20]
 800939c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093a0:	9100      	str	r1, [sp, #0]
 80093a2:	9104      	str	r1, [sp, #16]
 80093a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80093a8:	4669      	mov	r1, sp
 80093aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80093ac:	f000 fa0c 	bl	80097c8 <_svfiprintf_r>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	bfbc      	itt	lt
 80093b4:	238b      	movlt	r3, #139	@ 0x8b
 80093b6:	602b      	strlt	r3, [r5, #0]
 80093b8:	2c00      	cmp	r4, #0
 80093ba:	d0e0      	beq.n	800937e <_vsniprintf_r+0x16>
 80093bc:	9b00      	ldr	r3, [sp, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	e7dc      	b.n	800937e <_vsniprintf_r+0x16>

080093c4 <vsniprintf>:
 80093c4:	b507      	push	{r0, r1, r2, lr}
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	4613      	mov	r3, r2
 80093ca:	460a      	mov	r2, r1
 80093cc:	4601      	mov	r1, r0
 80093ce:	4803      	ldr	r0, [pc, #12]	@ (80093dc <vsniprintf+0x18>)
 80093d0:	6800      	ldr	r0, [r0, #0]
 80093d2:	f7ff ffc9 	bl	8009368 <_vsniprintf_r>
 80093d6:	b003      	add	sp, #12
 80093d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80093dc:	20000010 	.word	0x20000010

080093e0 <memset>:
 80093e0:	4402      	add	r2, r0
 80093e2:	4603      	mov	r3, r0
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d100      	bne.n	80093ea <memset+0xa>
 80093e8:	4770      	bx	lr
 80093ea:	f803 1b01 	strb.w	r1, [r3], #1
 80093ee:	e7f9      	b.n	80093e4 <memset+0x4>

080093f0 <_reclaim_reent>:
 80093f0:	4b2d      	ldr	r3, [pc, #180]	@ (80094a8 <_reclaim_reent+0xb8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4283      	cmp	r3, r0
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	d053      	beq.n	80094a4 <_reclaim_reent+0xb4>
 80093fc:	69c3      	ldr	r3, [r0, #28]
 80093fe:	b31b      	cbz	r3, 8009448 <_reclaim_reent+0x58>
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	b163      	cbz	r3, 800941e <_reclaim_reent+0x2e>
 8009404:	2500      	movs	r5, #0
 8009406:	69e3      	ldr	r3, [r4, #28]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	5959      	ldr	r1, [r3, r5]
 800940c:	b9b1      	cbnz	r1, 800943c <_reclaim_reent+0x4c>
 800940e:	3504      	adds	r5, #4
 8009410:	2d80      	cmp	r5, #128	@ 0x80
 8009412:	d1f8      	bne.n	8009406 <_reclaim_reent+0x16>
 8009414:	69e3      	ldr	r3, [r4, #28]
 8009416:	4620      	mov	r0, r4
 8009418:	68d9      	ldr	r1, [r3, #12]
 800941a:	f000 f881 	bl	8009520 <_free_r>
 800941e:	69e3      	ldr	r3, [r4, #28]
 8009420:	6819      	ldr	r1, [r3, #0]
 8009422:	b111      	cbz	r1, 800942a <_reclaim_reent+0x3a>
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f87b 	bl	8009520 <_free_r>
 800942a:	69e3      	ldr	r3, [r4, #28]
 800942c:	689d      	ldr	r5, [r3, #8]
 800942e:	b15d      	cbz	r5, 8009448 <_reclaim_reent+0x58>
 8009430:	4629      	mov	r1, r5
 8009432:	4620      	mov	r0, r4
 8009434:	682d      	ldr	r5, [r5, #0]
 8009436:	f000 f873 	bl	8009520 <_free_r>
 800943a:	e7f8      	b.n	800942e <_reclaim_reent+0x3e>
 800943c:	680e      	ldr	r6, [r1, #0]
 800943e:	4620      	mov	r0, r4
 8009440:	f000 f86e 	bl	8009520 <_free_r>
 8009444:	4631      	mov	r1, r6
 8009446:	e7e1      	b.n	800940c <_reclaim_reent+0x1c>
 8009448:	6961      	ldr	r1, [r4, #20]
 800944a:	b111      	cbz	r1, 8009452 <_reclaim_reent+0x62>
 800944c:	4620      	mov	r0, r4
 800944e:	f000 f867 	bl	8009520 <_free_r>
 8009452:	69e1      	ldr	r1, [r4, #28]
 8009454:	b111      	cbz	r1, 800945c <_reclaim_reent+0x6c>
 8009456:	4620      	mov	r0, r4
 8009458:	f000 f862 	bl	8009520 <_free_r>
 800945c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800945e:	b111      	cbz	r1, 8009466 <_reclaim_reent+0x76>
 8009460:	4620      	mov	r0, r4
 8009462:	f000 f85d 	bl	8009520 <_free_r>
 8009466:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009468:	b111      	cbz	r1, 8009470 <_reclaim_reent+0x80>
 800946a:	4620      	mov	r0, r4
 800946c:	f000 f858 	bl	8009520 <_free_r>
 8009470:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009472:	b111      	cbz	r1, 800947a <_reclaim_reent+0x8a>
 8009474:	4620      	mov	r0, r4
 8009476:	f000 f853 	bl	8009520 <_free_r>
 800947a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800947c:	b111      	cbz	r1, 8009484 <_reclaim_reent+0x94>
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f84e 	bl	8009520 <_free_r>
 8009484:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009486:	b111      	cbz	r1, 800948e <_reclaim_reent+0x9e>
 8009488:	4620      	mov	r0, r4
 800948a:	f000 f849 	bl	8009520 <_free_r>
 800948e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009490:	b111      	cbz	r1, 8009498 <_reclaim_reent+0xa8>
 8009492:	4620      	mov	r0, r4
 8009494:	f000 f844 	bl	8009520 <_free_r>
 8009498:	6a23      	ldr	r3, [r4, #32]
 800949a:	b11b      	cbz	r3, 80094a4 <_reclaim_reent+0xb4>
 800949c:	4620      	mov	r0, r4
 800949e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094a2:	4718      	bx	r3
 80094a4:	bd70      	pop	{r4, r5, r6, pc}
 80094a6:	bf00      	nop
 80094a8:	20000010 	.word	0x20000010

080094ac <__errno>:
 80094ac:	4b01      	ldr	r3, [pc, #4]	@ (80094b4 <__errno+0x8>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000010 	.word	0x20000010

080094b8 <__libc_init_array>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	4d0d      	ldr	r5, [pc, #52]	@ (80094f0 <__libc_init_array+0x38>)
 80094bc:	4c0d      	ldr	r4, [pc, #52]	@ (80094f4 <__libc_init_array+0x3c>)
 80094be:	1b64      	subs	r4, r4, r5
 80094c0:	10a4      	asrs	r4, r4, #2
 80094c2:	2600      	movs	r6, #0
 80094c4:	42a6      	cmp	r6, r4
 80094c6:	d109      	bne.n	80094dc <__libc_init_array+0x24>
 80094c8:	4d0b      	ldr	r5, [pc, #44]	@ (80094f8 <__libc_init_array+0x40>)
 80094ca:	4c0c      	ldr	r4, [pc, #48]	@ (80094fc <__libc_init_array+0x44>)
 80094cc:	f000 fc64 	bl	8009d98 <_init>
 80094d0:	1b64      	subs	r4, r4, r5
 80094d2:	10a4      	asrs	r4, r4, #2
 80094d4:	2600      	movs	r6, #0
 80094d6:	42a6      	cmp	r6, r4
 80094d8:	d105      	bne.n	80094e6 <__libc_init_array+0x2e>
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e0:	4798      	blx	r3
 80094e2:	3601      	adds	r6, #1
 80094e4:	e7ee      	b.n	80094c4 <__libc_init_array+0xc>
 80094e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ea:	4798      	blx	r3
 80094ec:	3601      	adds	r6, #1
 80094ee:	e7f2      	b.n	80094d6 <__libc_init_array+0x1e>
 80094f0:	08009ec0 	.word	0x08009ec0
 80094f4:	08009ec0 	.word	0x08009ec0
 80094f8:	08009ec0 	.word	0x08009ec0
 80094fc:	08009ec4 	.word	0x08009ec4

08009500 <__retarget_lock_acquire_recursive>:
 8009500:	4770      	bx	lr

08009502 <__retarget_lock_release_recursive>:
 8009502:	4770      	bx	lr

08009504 <memcpy>:
 8009504:	440a      	add	r2, r1
 8009506:	4291      	cmp	r1, r2
 8009508:	f100 33ff 	add.w	r3, r0, #4294967295
 800950c:	d100      	bne.n	8009510 <memcpy+0xc>
 800950e:	4770      	bx	lr
 8009510:	b510      	push	{r4, lr}
 8009512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800951a:	4291      	cmp	r1, r2
 800951c:	d1f9      	bne.n	8009512 <memcpy+0xe>
 800951e:	bd10      	pop	{r4, pc}

08009520 <_free_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4605      	mov	r5, r0
 8009524:	2900      	cmp	r1, #0
 8009526:	d041      	beq.n	80095ac <_free_r+0x8c>
 8009528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800952c:	1f0c      	subs	r4, r1, #4
 800952e:	2b00      	cmp	r3, #0
 8009530:	bfb8      	it	lt
 8009532:	18e4      	addlt	r4, r4, r3
 8009534:	f000 f8e0 	bl	80096f8 <__malloc_lock>
 8009538:	4a1d      	ldr	r2, [pc, #116]	@ (80095b0 <_free_r+0x90>)
 800953a:	6813      	ldr	r3, [r2, #0]
 800953c:	b933      	cbnz	r3, 800954c <_free_r+0x2c>
 800953e:	6063      	str	r3, [r4, #4]
 8009540:	6014      	str	r4, [r2, #0]
 8009542:	4628      	mov	r0, r5
 8009544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009548:	f000 b8dc 	b.w	8009704 <__malloc_unlock>
 800954c:	42a3      	cmp	r3, r4
 800954e:	d908      	bls.n	8009562 <_free_r+0x42>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	1821      	adds	r1, r4, r0
 8009554:	428b      	cmp	r3, r1
 8009556:	bf01      	itttt	eq
 8009558:	6819      	ldreq	r1, [r3, #0]
 800955a:	685b      	ldreq	r3, [r3, #4]
 800955c:	1809      	addeq	r1, r1, r0
 800955e:	6021      	streq	r1, [r4, #0]
 8009560:	e7ed      	b.n	800953e <_free_r+0x1e>
 8009562:	461a      	mov	r2, r3
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	b10b      	cbz	r3, 800956c <_free_r+0x4c>
 8009568:	42a3      	cmp	r3, r4
 800956a:	d9fa      	bls.n	8009562 <_free_r+0x42>
 800956c:	6811      	ldr	r1, [r2, #0]
 800956e:	1850      	adds	r0, r2, r1
 8009570:	42a0      	cmp	r0, r4
 8009572:	d10b      	bne.n	800958c <_free_r+0x6c>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	4401      	add	r1, r0
 8009578:	1850      	adds	r0, r2, r1
 800957a:	4283      	cmp	r3, r0
 800957c:	6011      	str	r1, [r2, #0]
 800957e:	d1e0      	bne.n	8009542 <_free_r+0x22>
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	6053      	str	r3, [r2, #4]
 8009586:	4408      	add	r0, r1
 8009588:	6010      	str	r0, [r2, #0]
 800958a:	e7da      	b.n	8009542 <_free_r+0x22>
 800958c:	d902      	bls.n	8009594 <_free_r+0x74>
 800958e:	230c      	movs	r3, #12
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	e7d6      	b.n	8009542 <_free_r+0x22>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	1821      	adds	r1, r4, r0
 8009598:	428b      	cmp	r3, r1
 800959a:	bf04      	itt	eq
 800959c:	6819      	ldreq	r1, [r3, #0]
 800959e:	685b      	ldreq	r3, [r3, #4]
 80095a0:	6063      	str	r3, [r4, #4]
 80095a2:	bf04      	itt	eq
 80095a4:	1809      	addeq	r1, r1, r0
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	6054      	str	r4, [r2, #4]
 80095aa:	e7ca      	b.n	8009542 <_free_r+0x22>
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	20002e90 	.word	0x20002e90

080095b4 <sbrk_aligned>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	4e0f      	ldr	r6, [pc, #60]	@ (80095f4 <sbrk_aligned+0x40>)
 80095b8:	460c      	mov	r4, r1
 80095ba:	6831      	ldr	r1, [r6, #0]
 80095bc:	4605      	mov	r5, r0
 80095be:	b911      	cbnz	r1, 80095c6 <sbrk_aligned+0x12>
 80095c0:	f000 fba4 	bl	8009d0c <_sbrk_r>
 80095c4:	6030      	str	r0, [r6, #0]
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f000 fb9f 	bl	8009d0c <_sbrk_r>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d103      	bne.n	80095da <sbrk_aligned+0x26>
 80095d2:	f04f 34ff 	mov.w	r4, #4294967295
 80095d6:	4620      	mov	r0, r4
 80095d8:	bd70      	pop	{r4, r5, r6, pc}
 80095da:	1cc4      	adds	r4, r0, #3
 80095dc:	f024 0403 	bic.w	r4, r4, #3
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d0f8      	beq.n	80095d6 <sbrk_aligned+0x22>
 80095e4:	1a21      	subs	r1, r4, r0
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 fb90 	bl	8009d0c <_sbrk_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	d1f2      	bne.n	80095d6 <sbrk_aligned+0x22>
 80095f0:	e7ef      	b.n	80095d2 <sbrk_aligned+0x1e>
 80095f2:	bf00      	nop
 80095f4:	20002e8c 	.word	0x20002e8c

080095f8 <_malloc_r>:
 80095f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	1ccd      	adds	r5, r1, #3
 80095fe:	f025 0503 	bic.w	r5, r5, #3
 8009602:	3508      	adds	r5, #8
 8009604:	2d0c      	cmp	r5, #12
 8009606:	bf38      	it	cc
 8009608:	250c      	movcc	r5, #12
 800960a:	2d00      	cmp	r5, #0
 800960c:	4606      	mov	r6, r0
 800960e:	db01      	blt.n	8009614 <_malloc_r+0x1c>
 8009610:	42a9      	cmp	r1, r5
 8009612:	d904      	bls.n	800961e <_malloc_r+0x26>
 8009614:	230c      	movs	r3, #12
 8009616:	6033      	str	r3, [r6, #0]
 8009618:	2000      	movs	r0, #0
 800961a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096f4 <_malloc_r+0xfc>
 8009622:	f000 f869 	bl	80096f8 <__malloc_lock>
 8009626:	f8d8 3000 	ldr.w	r3, [r8]
 800962a:	461c      	mov	r4, r3
 800962c:	bb44      	cbnz	r4, 8009680 <_malloc_r+0x88>
 800962e:	4629      	mov	r1, r5
 8009630:	4630      	mov	r0, r6
 8009632:	f7ff ffbf 	bl	80095b4 <sbrk_aligned>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	4604      	mov	r4, r0
 800963a:	d158      	bne.n	80096ee <_malloc_r+0xf6>
 800963c:	f8d8 4000 	ldr.w	r4, [r8]
 8009640:	4627      	mov	r7, r4
 8009642:	2f00      	cmp	r7, #0
 8009644:	d143      	bne.n	80096ce <_malloc_r+0xd6>
 8009646:	2c00      	cmp	r4, #0
 8009648:	d04b      	beq.n	80096e2 <_malloc_r+0xea>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	4639      	mov	r1, r7
 800964e:	4630      	mov	r0, r6
 8009650:	eb04 0903 	add.w	r9, r4, r3
 8009654:	f000 fb5a 	bl	8009d0c <_sbrk_r>
 8009658:	4581      	cmp	r9, r0
 800965a:	d142      	bne.n	80096e2 <_malloc_r+0xea>
 800965c:	6821      	ldr	r1, [r4, #0]
 800965e:	1a6d      	subs	r5, r5, r1
 8009660:	4629      	mov	r1, r5
 8009662:	4630      	mov	r0, r6
 8009664:	f7ff ffa6 	bl	80095b4 <sbrk_aligned>
 8009668:	3001      	adds	r0, #1
 800966a:	d03a      	beq.n	80096e2 <_malloc_r+0xea>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	442b      	add	r3, r5
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	f8d8 3000 	ldr.w	r3, [r8]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	bb62      	cbnz	r2, 80096d4 <_malloc_r+0xdc>
 800967a:	f8c8 7000 	str.w	r7, [r8]
 800967e:	e00f      	b.n	80096a0 <_malloc_r+0xa8>
 8009680:	6822      	ldr	r2, [r4, #0]
 8009682:	1b52      	subs	r2, r2, r5
 8009684:	d420      	bmi.n	80096c8 <_malloc_r+0xd0>
 8009686:	2a0b      	cmp	r2, #11
 8009688:	d917      	bls.n	80096ba <_malloc_r+0xc2>
 800968a:	1961      	adds	r1, r4, r5
 800968c:	42a3      	cmp	r3, r4
 800968e:	6025      	str	r5, [r4, #0]
 8009690:	bf18      	it	ne
 8009692:	6059      	strne	r1, [r3, #4]
 8009694:	6863      	ldr	r3, [r4, #4]
 8009696:	bf08      	it	eq
 8009698:	f8c8 1000 	streq.w	r1, [r8]
 800969c:	5162      	str	r2, [r4, r5]
 800969e:	604b      	str	r3, [r1, #4]
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 f82f 	bl	8009704 <__malloc_unlock>
 80096a6:	f104 000b 	add.w	r0, r4, #11
 80096aa:	1d23      	adds	r3, r4, #4
 80096ac:	f020 0007 	bic.w	r0, r0, #7
 80096b0:	1ac2      	subs	r2, r0, r3
 80096b2:	bf1c      	itt	ne
 80096b4:	1a1b      	subne	r3, r3, r0
 80096b6:	50a3      	strne	r3, [r4, r2]
 80096b8:	e7af      	b.n	800961a <_malloc_r+0x22>
 80096ba:	6862      	ldr	r2, [r4, #4]
 80096bc:	42a3      	cmp	r3, r4
 80096be:	bf0c      	ite	eq
 80096c0:	f8c8 2000 	streq.w	r2, [r8]
 80096c4:	605a      	strne	r2, [r3, #4]
 80096c6:	e7eb      	b.n	80096a0 <_malloc_r+0xa8>
 80096c8:	4623      	mov	r3, r4
 80096ca:	6864      	ldr	r4, [r4, #4]
 80096cc:	e7ae      	b.n	800962c <_malloc_r+0x34>
 80096ce:	463c      	mov	r4, r7
 80096d0:	687f      	ldr	r7, [r7, #4]
 80096d2:	e7b6      	b.n	8009642 <_malloc_r+0x4a>
 80096d4:	461a      	mov	r2, r3
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d1fb      	bne.n	80096d4 <_malloc_r+0xdc>
 80096dc:	2300      	movs	r3, #0
 80096de:	6053      	str	r3, [r2, #4]
 80096e0:	e7de      	b.n	80096a0 <_malloc_r+0xa8>
 80096e2:	230c      	movs	r3, #12
 80096e4:	6033      	str	r3, [r6, #0]
 80096e6:	4630      	mov	r0, r6
 80096e8:	f000 f80c 	bl	8009704 <__malloc_unlock>
 80096ec:	e794      	b.n	8009618 <_malloc_r+0x20>
 80096ee:	6005      	str	r5, [r0, #0]
 80096f0:	e7d6      	b.n	80096a0 <_malloc_r+0xa8>
 80096f2:	bf00      	nop
 80096f4:	20002e90 	.word	0x20002e90

080096f8 <__malloc_lock>:
 80096f8:	4801      	ldr	r0, [pc, #4]	@ (8009700 <__malloc_lock+0x8>)
 80096fa:	f7ff bf01 	b.w	8009500 <__retarget_lock_acquire_recursive>
 80096fe:	bf00      	nop
 8009700:	20002e88 	.word	0x20002e88

08009704 <__malloc_unlock>:
 8009704:	4801      	ldr	r0, [pc, #4]	@ (800970c <__malloc_unlock+0x8>)
 8009706:	f7ff befc 	b.w	8009502 <__retarget_lock_release_recursive>
 800970a:	bf00      	nop
 800970c:	20002e88 	.word	0x20002e88

08009710 <__ssputs_r>:
 8009710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009714:	688e      	ldr	r6, [r1, #8]
 8009716:	461f      	mov	r7, r3
 8009718:	42be      	cmp	r6, r7
 800971a:	680b      	ldr	r3, [r1, #0]
 800971c:	4682      	mov	sl, r0
 800971e:	460c      	mov	r4, r1
 8009720:	4690      	mov	r8, r2
 8009722:	d82d      	bhi.n	8009780 <__ssputs_r+0x70>
 8009724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009728:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800972c:	d026      	beq.n	800977c <__ssputs_r+0x6c>
 800972e:	6965      	ldr	r5, [r4, #20]
 8009730:	6909      	ldr	r1, [r1, #16]
 8009732:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009736:	eba3 0901 	sub.w	r9, r3, r1
 800973a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800973e:	1c7b      	adds	r3, r7, #1
 8009740:	444b      	add	r3, r9
 8009742:	106d      	asrs	r5, r5, #1
 8009744:	429d      	cmp	r5, r3
 8009746:	bf38      	it	cc
 8009748:	461d      	movcc	r5, r3
 800974a:	0553      	lsls	r3, r2, #21
 800974c:	d527      	bpl.n	800979e <__ssputs_r+0x8e>
 800974e:	4629      	mov	r1, r5
 8009750:	f7ff ff52 	bl	80095f8 <_malloc_r>
 8009754:	4606      	mov	r6, r0
 8009756:	b360      	cbz	r0, 80097b2 <__ssputs_r+0xa2>
 8009758:	6921      	ldr	r1, [r4, #16]
 800975a:	464a      	mov	r2, r9
 800975c:	f7ff fed2 	bl	8009504 <memcpy>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	6126      	str	r6, [r4, #16]
 800976e:	6165      	str	r5, [r4, #20]
 8009770:	444e      	add	r6, r9
 8009772:	eba5 0509 	sub.w	r5, r5, r9
 8009776:	6026      	str	r6, [r4, #0]
 8009778:	60a5      	str	r5, [r4, #8]
 800977a:	463e      	mov	r6, r7
 800977c:	42be      	cmp	r6, r7
 800977e:	d900      	bls.n	8009782 <__ssputs_r+0x72>
 8009780:	463e      	mov	r6, r7
 8009782:	6820      	ldr	r0, [r4, #0]
 8009784:	4632      	mov	r2, r6
 8009786:	4641      	mov	r1, r8
 8009788:	f000 faa6 	bl	8009cd8 <memmove>
 800978c:	68a3      	ldr	r3, [r4, #8]
 800978e:	1b9b      	subs	r3, r3, r6
 8009790:	60a3      	str	r3, [r4, #8]
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	4433      	add	r3, r6
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	2000      	movs	r0, #0
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979e:	462a      	mov	r2, r5
 80097a0:	f000 fac4 	bl	8009d2c <_realloc_r>
 80097a4:	4606      	mov	r6, r0
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d1e0      	bne.n	800976c <__ssputs_r+0x5c>
 80097aa:	6921      	ldr	r1, [r4, #16]
 80097ac:	4650      	mov	r0, sl
 80097ae:	f7ff feb7 	bl	8009520 <_free_r>
 80097b2:	230c      	movs	r3, #12
 80097b4:	f8ca 3000 	str.w	r3, [sl]
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
 80097c4:	e7e9      	b.n	800979a <__ssputs_r+0x8a>
	...

080097c8 <_svfiprintf_r>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	4698      	mov	r8, r3
 80097ce:	898b      	ldrh	r3, [r1, #12]
 80097d0:	061b      	lsls	r3, r3, #24
 80097d2:	b09d      	sub	sp, #116	@ 0x74
 80097d4:	4607      	mov	r7, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	d510      	bpl.n	80097fe <_svfiprintf_r+0x36>
 80097dc:	690b      	ldr	r3, [r1, #16]
 80097de:	b973      	cbnz	r3, 80097fe <_svfiprintf_r+0x36>
 80097e0:	2140      	movs	r1, #64	@ 0x40
 80097e2:	f7ff ff09 	bl	80095f8 <_malloc_r>
 80097e6:	6028      	str	r0, [r5, #0]
 80097e8:	6128      	str	r0, [r5, #16]
 80097ea:	b930      	cbnz	r0, 80097fa <_svfiprintf_r+0x32>
 80097ec:	230c      	movs	r3, #12
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	b01d      	add	sp, #116	@ 0x74
 80097f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fa:	2340      	movs	r3, #64	@ 0x40
 80097fc:	616b      	str	r3, [r5, #20]
 80097fe:	2300      	movs	r3, #0
 8009800:	9309      	str	r3, [sp, #36]	@ 0x24
 8009802:	2320      	movs	r3, #32
 8009804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009808:	f8cd 800c 	str.w	r8, [sp, #12]
 800980c:	2330      	movs	r3, #48	@ 0x30
 800980e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099ac <_svfiprintf_r+0x1e4>
 8009812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009816:	f04f 0901 	mov.w	r9, #1
 800981a:	4623      	mov	r3, r4
 800981c:	469a      	mov	sl, r3
 800981e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009822:	b10a      	cbz	r2, 8009828 <_svfiprintf_r+0x60>
 8009824:	2a25      	cmp	r2, #37	@ 0x25
 8009826:	d1f9      	bne.n	800981c <_svfiprintf_r+0x54>
 8009828:	ebba 0b04 	subs.w	fp, sl, r4
 800982c:	d00b      	beq.n	8009846 <_svfiprintf_r+0x7e>
 800982e:	465b      	mov	r3, fp
 8009830:	4622      	mov	r2, r4
 8009832:	4629      	mov	r1, r5
 8009834:	4638      	mov	r0, r7
 8009836:	f7ff ff6b 	bl	8009710 <__ssputs_r>
 800983a:	3001      	adds	r0, #1
 800983c:	f000 80a7 	beq.w	800998e <_svfiprintf_r+0x1c6>
 8009840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009842:	445a      	add	r2, fp
 8009844:	9209      	str	r2, [sp, #36]	@ 0x24
 8009846:	f89a 3000 	ldrb.w	r3, [sl]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 809f 	beq.w	800998e <_svfiprintf_r+0x1c6>
 8009850:	2300      	movs	r3, #0
 8009852:	f04f 32ff 	mov.w	r2, #4294967295
 8009856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800985a:	f10a 0a01 	add.w	sl, sl, #1
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	9307      	str	r3, [sp, #28]
 8009862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009866:	931a      	str	r3, [sp, #104]	@ 0x68
 8009868:	4654      	mov	r4, sl
 800986a:	2205      	movs	r2, #5
 800986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009870:	484e      	ldr	r0, [pc, #312]	@ (80099ac <_svfiprintf_r+0x1e4>)
 8009872:	f7f6 fcad 	bl	80001d0 <memchr>
 8009876:	9a04      	ldr	r2, [sp, #16]
 8009878:	b9d8      	cbnz	r0, 80098b2 <_svfiprintf_r+0xea>
 800987a:	06d0      	lsls	r0, r2, #27
 800987c:	bf44      	itt	mi
 800987e:	2320      	movmi	r3, #32
 8009880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009884:	0711      	lsls	r1, r2, #28
 8009886:	bf44      	itt	mi
 8009888:	232b      	movmi	r3, #43	@ 0x2b
 800988a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800988e:	f89a 3000 	ldrb.w	r3, [sl]
 8009892:	2b2a      	cmp	r3, #42	@ 0x2a
 8009894:	d015      	beq.n	80098c2 <_svfiprintf_r+0xfa>
 8009896:	9a07      	ldr	r2, [sp, #28]
 8009898:	4654      	mov	r4, sl
 800989a:	2000      	movs	r0, #0
 800989c:	f04f 0c0a 	mov.w	ip, #10
 80098a0:	4621      	mov	r1, r4
 80098a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098a6:	3b30      	subs	r3, #48	@ 0x30
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	d94b      	bls.n	8009944 <_svfiprintf_r+0x17c>
 80098ac:	b1b0      	cbz	r0, 80098dc <_svfiprintf_r+0x114>
 80098ae:	9207      	str	r2, [sp, #28]
 80098b0:	e014      	b.n	80098dc <_svfiprintf_r+0x114>
 80098b2:	eba0 0308 	sub.w	r3, r0, r8
 80098b6:	fa09 f303 	lsl.w	r3, r9, r3
 80098ba:	4313      	orrs	r3, r2
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	46a2      	mov	sl, r4
 80098c0:	e7d2      	b.n	8009868 <_svfiprintf_r+0xa0>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	1d19      	adds	r1, r3, #4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	9103      	str	r1, [sp, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfbb      	ittet	lt
 80098ce:	425b      	neglt	r3, r3
 80098d0:	f042 0202 	orrlt.w	r2, r2, #2
 80098d4:	9307      	strge	r3, [sp, #28]
 80098d6:	9307      	strlt	r3, [sp, #28]
 80098d8:	bfb8      	it	lt
 80098da:	9204      	strlt	r2, [sp, #16]
 80098dc:	7823      	ldrb	r3, [r4, #0]
 80098de:	2b2e      	cmp	r3, #46	@ 0x2e
 80098e0:	d10a      	bne.n	80098f8 <_svfiprintf_r+0x130>
 80098e2:	7863      	ldrb	r3, [r4, #1]
 80098e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80098e6:	d132      	bne.n	800994e <_svfiprintf_r+0x186>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	1d1a      	adds	r2, r3, #4
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	9203      	str	r2, [sp, #12]
 80098f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098f4:	3402      	adds	r4, #2
 80098f6:	9305      	str	r3, [sp, #20]
 80098f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099bc <_svfiprintf_r+0x1f4>
 80098fc:	7821      	ldrb	r1, [r4, #0]
 80098fe:	2203      	movs	r2, #3
 8009900:	4650      	mov	r0, sl
 8009902:	f7f6 fc65 	bl	80001d0 <memchr>
 8009906:	b138      	cbz	r0, 8009918 <_svfiprintf_r+0x150>
 8009908:	9b04      	ldr	r3, [sp, #16]
 800990a:	eba0 000a 	sub.w	r0, r0, sl
 800990e:	2240      	movs	r2, #64	@ 0x40
 8009910:	4082      	lsls	r2, r0
 8009912:	4313      	orrs	r3, r2
 8009914:	3401      	adds	r4, #1
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991c:	4824      	ldr	r0, [pc, #144]	@ (80099b0 <_svfiprintf_r+0x1e8>)
 800991e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009922:	2206      	movs	r2, #6
 8009924:	f7f6 fc54 	bl	80001d0 <memchr>
 8009928:	2800      	cmp	r0, #0
 800992a:	d036      	beq.n	800999a <_svfiprintf_r+0x1d2>
 800992c:	4b21      	ldr	r3, [pc, #132]	@ (80099b4 <_svfiprintf_r+0x1ec>)
 800992e:	bb1b      	cbnz	r3, 8009978 <_svfiprintf_r+0x1b0>
 8009930:	9b03      	ldr	r3, [sp, #12]
 8009932:	3307      	adds	r3, #7
 8009934:	f023 0307 	bic.w	r3, r3, #7
 8009938:	3308      	adds	r3, #8
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993e:	4433      	add	r3, r6
 8009940:	9309      	str	r3, [sp, #36]	@ 0x24
 8009942:	e76a      	b.n	800981a <_svfiprintf_r+0x52>
 8009944:	fb0c 3202 	mla	r2, ip, r2, r3
 8009948:	460c      	mov	r4, r1
 800994a:	2001      	movs	r0, #1
 800994c:	e7a8      	b.n	80098a0 <_svfiprintf_r+0xd8>
 800994e:	2300      	movs	r3, #0
 8009950:	3401      	adds	r4, #1
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	4619      	mov	r1, r3
 8009956:	f04f 0c0a 	mov.w	ip, #10
 800995a:	4620      	mov	r0, r4
 800995c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009960:	3a30      	subs	r2, #48	@ 0x30
 8009962:	2a09      	cmp	r2, #9
 8009964:	d903      	bls.n	800996e <_svfiprintf_r+0x1a6>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0c6      	beq.n	80098f8 <_svfiprintf_r+0x130>
 800996a:	9105      	str	r1, [sp, #20]
 800996c:	e7c4      	b.n	80098f8 <_svfiprintf_r+0x130>
 800996e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009972:	4604      	mov	r4, r0
 8009974:	2301      	movs	r3, #1
 8009976:	e7f0      	b.n	800995a <_svfiprintf_r+0x192>
 8009978:	ab03      	add	r3, sp, #12
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	462a      	mov	r2, r5
 800997e:	4b0e      	ldr	r3, [pc, #56]	@ (80099b8 <_svfiprintf_r+0x1f0>)
 8009980:	a904      	add	r1, sp, #16
 8009982:	4638      	mov	r0, r7
 8009984:	f3af 8000 	nop.w
 8009988:	1c42      	adds	r2, r0, #1
 800998a:	4606      	mov	r6, r0
 800998c:	d1d6      	bne.n	800993c <_svfiprintf_r+0x174>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	065b      	lsls	r3, r3, #25
 8009992:	f53f af2d 	bmi.w	80097f0 <_svfiprintf_r+0x28>
 8009996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009998:	e72c      	b.n	80097f4 <_svfiprintf_r+0x2c>
 800999a:	ab03      	add	r3, sp, #12
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	462a      	mov	r2, r5
 80099a0:	4b05      	ldr	r3, [pc, #20]	@ (80099b8 <_svfiprintf_r+0x1f0>)
 80099a2:	a904      	add	r1, sp, #16
 80099a4:	4638      	mov	r0, r7
 80099a6:	f000 f879 	bl	8009a9c <_printf_i>
 80099aa:	e7ed      	b.n	8009988 <_svfiprintf_r+0x1c0>
 80099ac:	08009e84 	.word	0x08009e84
 80099b0:	08009e8e 	.word	0x08009e8e
 80099b4:	00000000 	.word	0x00000000
 80099b8:	08009711 	.word	0x08009711
 80099bc:	08009e8a 	.word	0x08009e8a

080099c0 <_printf_common>:
 80099c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c4:	4616      	mov	r6, r2
 80099c6:	4698      	mov	r8, r3
 80099c8:	688a      	ldr	r2, [r1, #8]
 80099ca:	690b      	ldr	r3, [r1, #16]
 80099cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	bfb8      	it	lt
 80099d4:	4613      	movlt	r3, r2
 80099d6:	6033      	str	r3, [r6, #0]
 80099d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099dc:	4607      	mov	r7, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	b10a      	cbz	r2, 80099e6 <_printf_common+0x26>
 80099e2:	3301      	adds	r3, #1
 80099e4:	6033      	str	r3, [r6, #0]
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	0699      	lsls	r1, r3, #26
 80099ea:	bf42      	ittt	mi
 80099ec:	6833      	ldrmi	r3, [r6, #0]
 80099ee:	3302      	addmi	r3, #2
 80099f0:	6033      	strmi	r3, [r6, #0]
 80099f2:	6825      	ldr	r5, [r4, #0]
 80099f4:	f015 0506 	ands.w	r5, r5, #6
 80099f8:	d106      	bne.n	8009a08 <_printf_common+0x48>
 80099fa:	f104 0a19 	add.w	sl, r4, #25
 80099fe:	68e3      	ldr	r3, [r4, #12]
 8009a00:	6832      	ldr	r2, [r6, #0]
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	42ab      	cmp	r3, r5
 8009a06:	dc26      	bgt.n	8009a56 <_printf_common+0x96>
 8009a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a0c:	6822      	ldr	r2, [r4, #0]
 8009a0e:	3b00      	subs	r3, #0
 8009a10:	bf18      	it	ne
 8009a12:	2301      	movne	r3, #1
 8009a14:	0692      	lsls	r2, r2, #26
 8009a16:	d42b      	bmi.n	8009a70 <_printf_common+0xb0>
 8009a18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a1c:	4641      	mov	r1, r8
 8009a1e:	4638      	mov	r0, r7
 8009a20:	47c8      	blx	r9
 8009a22:	3001      	adds	r0, #1
 8009a24:	d01e      	beq.n	8009a64 <_printf_common+0xa4>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	6922      	ldr	r2, [r4, #16]
 8009a2a:	f003 0306 	and.w	r3, r3, #6
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	bf02      	ittt	eq
 8009a32:	68e5      	ldreq	r5, [r4, #12]
 8009a34:	6833      	ldreq	r3, [r6, #0]
 8009a36:	1aed      	subeq	r5, r5, r3
 8009a38:	68a3      	ldr	r3, [r4, #8]
 8009a3a:	bf0c      	ite	eq
 8009a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a40:	2500      	movne	r5, #0
 8009a42:	4293      	cmp	r3, r2
 8009a44:	bfc4      	itt	gt
 8009a46:	1a9b      	subgt	r3, r3, r2
 8009a48:	18ed      	addgt	r5, r5, r3
 8009a4a:	2600      	movs	r6, #0
 8009a4c:	341a      	adds	r4, #26
 8009a4e:	42b5      	cmp	r5, r6
 8009a50:	d11a      	bne.n	8009a88 <_printf_common+0xc8>
 8009a52:	2000      	movs	r0, #0
 8009a54:	e008      	b.n	8009a68 <_printf_common+0xa8>
 8009a56:	2301      	movs	r3, #1
 8009a58:	4652      	mov	r2, sl
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	47c8      	blx	r9
 8009a60:	3001      	adds	r0, #1
 8009a62:	d103      	bne.n	8009a6c <_printf_common+0xac>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e7c6      	b.n	80099fe <_printf_common+0x3e>
 8009a70:	18e1      	adds	r1, r4, r3
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	2030      	movs	r0, #48	@ 0x30
 8009a76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a7a:	4422      	add	r2, r4
 8009a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a84:	3302      	adds	r3, #2
 8009a86:	e7c7      	b.n	8009a18 <_printf_common+0x58>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	4641      	mov	r1, r8
 8009a8e:	4638      	mov	r0, r7
 8009a90:	47c8      	blx	r9
 8009a92:	3001      	adds	r0, #1
 8009a94:	d0e6      	beq.n	8009a64 <_printf_common+0xa4>
 8009a96:	3601      	adds	r6, #1
 8009a98:	e7d9      	b.n	8009a4e <_printf_common+0x8e>
	...

08009a9c <_printf_i>:
 8009a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa0:	7e0f      	ldrb	r7, [r1, #24]
 8009aa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009aa4:	2f78      	cmp	r7, #120	@ 0x78
 8009aa6:	4691      	mov	r9, r2
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	469a      	mov	sl, r3
 8009aae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ab2:	d807      	bhi.n	8009ac4 <_printf_i+0x28>
 8009ab4:	2f62      	cmp	r7, #98	@ 0x62
 8009ab6:	d80a      	bhi.n	8009ace <_printf_i+0x32>
 8009ab8:	2f00      	cmp	r7, #0
 8009aba:	f000 80d1 	beq.w	8009c60 <_printf_i+0x1c4>
 8009abe:	2f58      	cmp	r7, #88	@ 0x58
 8009ac0:	f000 80b8 	beq.w	8009c34 <_printf_i+0x198>
 8009ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ac8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009acc:	e03a      	b.n	8009b44 <_printf_i+0xa8>
 8009ace:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ad2:	2b15      	cmp	r3, #21
 8009ad4:	d8f6      	bhi.n	8009ac4 <_printf_i+0x28>
 8009ad6:	a101      	add	r1, pc, #4	@ (adr r1, 8009adc <_printf_i+0x40>)
 8009ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009adc:	08009b35 	.word	0x08009b35
 8009ae0:	08009b49 	.word	0x08009b49
 8009ae4:	08009ac5 	.word	0x08009ac5
 8009ae8:	08009ac5 	.word	0x08009ac5
 8009aec:	08009ac5 	.word	0x08009ac5
 8009af0:	08009ac5 	.word	0x08009ac5
 8009af4:	08009b49 	.word	0x08009b49
 8009af8:	08009ac5 	.word	0x08009ac5
 8009afc:	08009ac5 	.word	0x08009ac5
 8009b00:	08009ac5 	.word	0x08009ac5
 8009b04:	08009ac5 	.word	0x08009ac5
 8009b08:	08009c47 	.word	0x08009c47
 8009b0c:	08009b73 	.word	0x08009b73
 8009b10:	08009c01 	.word	0x08009c01
 8009b14:	08009ac5 	.word	0x08009ac5
 8009b18:	08009ac5 	.word	0x08009ac5
 8009b1c:	08009c69 	.word	0x08009c69
 8009b20:	08009ac5 	.word	0x08009ac5
 8009b24:	08009b73 	.word	0x08009b73
 8009b28:	08009ac5 	.word	0x08009ac5
 8009b2c:	08009ac5 	.word	0x08009ac5
 8009b30:	08009c09 	.word	0x08009c09
 8009b34:	6833      	ldr	r3, [r6, #0]
 8009b36:	1d1a      	adds	r2, r3, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6032      	str	r2, [r6, #0]
 8009b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b44:	2301      	movs	r3, #1
 8009b46:	e09c      	b.n	8009c82 <_printf_i+0x1e6>
 8009b48:	6833      	ldr	r3, [r6, #0]
 8009b4a:	6820      	ldr	r0, [r4, #0]
 8009b4c:	1d19      	adds	r1, r3, #4
 8009b4e:	6031      	str	r1, [r6, #0]
 8009b50:	0606      	lsls	r6, r0, #24
 8009b52:	d501      	bpl.n	8009b58 <_printf_i+0xbc>
 8009b54:	681d      	ldr	r5, [r3, #0]
 8009b56:	e003      	b.n	8009b60 <_printf_i+0xc4>
 8009b58:	0645      	lsls	r5, r0, #25
 8009b5a:	d5fb      	bpl.n	8009b54 <_printf_i+0xb8>
 8009b5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	da03      	bge.n	8009b6c <_printf_i+0xd0>
 8009b64:	232d      	movs	r3, #45	@ 0x2d
 8009b66:	426d      	negs	r5, r5
 8009b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b6c:	4858      	ldr	r0, [pc, #352]	@ (8009cd0 <_printf_i+0x234>)
 8009b6e:	230a      	movs	r3, #10
 8009b70:	e011      	b.n	8009b96 <_printf_i+0xfa>
 8009b72:	6821      	ldr	r1, [r4, #0]
 8009b74:	6833      	ldr	r3, [r6, #0]
 8009b76:	0608      	lsls	r0, r1, #24
 8009b78:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b7c:	d402      	bmi.n	8009b84 <_printf_i+0xe8>
 8009b7e:	0649      	lsls	r1, r1, #25
 8009b80:	bf48      	it	mi
 8009b82:	b2ad      	uxthmi	r5, r5
 8009b84:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b86:	4852      	ldr	r0, [pc, #328]	@ (8009cd0 <_printf_i+0x234>)
 8009b88:	6033      	str	r3, [r6, #0]
 8009b8a:	bf14      	ite	ne
 8009b8c:	230a      	movne	r3, #10
 8009b8e:	2308      	moveq	r3, #8
 8009b90:	2100      	movs	r1, #0
 8009b92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b96:	6866      	ldr	r6, [r4, #4]
 8009b98:	60a6      	str	r6, [r4, #8]
 8009b9a:	2e00      	cmp	r6, #0
 8009b9c:	db05      	blt.n	8009baa <_printf_i+0x10e>
 8009b9e:	6821      	ldr	r1, [r4, #0]
 8009ba0:	432e      	orrs	r6, r5
 8009ba2:	f021 0104 	bic.w	r1, r1, #4
 8009ba6:	6021      	str	r1, [r4, #0]
 8009ba8:	d04b      	beq.n	8009c42 <_printf_i+0x1a6>
 8009baa:	4616      	mov	r6, r2
 8009bac:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bb0:	fb03 5711 	mls	r7, r3, r1, r5
 8009bb4:	5dc7      	ldrb	r7, [r0, r7]
 8009bb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bba:	462f      	mov	r7, r5
 8009bbc:	42bb      	cmp	r3, r7
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	d9f4      	bls.n	8009bac <_printf_i+0x110>
 8009bc2:	2b08      	cmp	r3, #8
 8009bc4:	d10b      	bne.n	8009bde <_printf_i+0x142>
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	07df      	lsls	r7, r3, #31
 8009bca:	d508      	bpl.n	8009bde <_printf_i+0x142>
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	6861      	ldr	r1, [r4, #4]
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	bfde      	ittt	le
 8009bd4:	2330      	movle	r3, #48	@ 0x30
 8009bd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009bde:	1b92      	subs	r2, r2, r6
 8009be0:	6122      	str	r2, [r4, #16]
 8009be2:	f8cd a000 	str.w	sl, [sp]
 8009be6:	464b      	mov	r3, r9
 8009be8:	aa03      	add	r2, sp, #12
 8009bea:	4621      	mov	r1, r4
 8009bec:	4640      	mov	r0, r8
 8009bee:	f7ff fee7 	bl	80099c0 <_printf_common>
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d14a      	bne.n	8009c8c <_printf_i+0x1f0>
 8009bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfa:	b004      	add	sp, #16
 8009bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	f043 0320 	orr.w	r3, r3, #32
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	4832      	ldr	r0, [pc, #200]	@ (8009cd4 <_printf_i+0x238>)
 8009c0a:	2778      	movs	r7, #120	@ 0x78
 8009c0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	6831      	ldr	r1, [r6, #0]
 8009c14:	061f      	lsls	r7, r3, #24
 8009c16:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c1a:	d402      	bmi.n	8009c22 <_printf_i+0x186>
 8009c1c:	065f      	lsls	r7, r3, #25
 8009c1e:	bf48      	it	mi
 8009c20:	b2ad      	uxthmi	r5, r5
 8009c22:	6031      	str	r1, [r6, #0]
 8009c24:	07d9      	lsls	r1, r3, #31
 8009c26:	bf44      	itt	mi
 8009c28:	f043 0320 	orrmi.w	r3, r3, #32
 8009c2c:	6023      	strmi	r3, [r4, #0]
 8009c2e:	b11d      	cbz	r5, 8009c38 <_printf_i+0x19c>
 8009c30:	2310      	movs	r3, #16
 8009c32:	e7ad      	b.n	8009b90 <_printf_i+0xf4>
 8009c34:	4826      	ldr	r0, [pc, #152]	@ (8009cd0 <_printf_i+0x234>)
 8009c36:	e7e9      	b.n	8009c0c <_printf_i+0x170>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	f023 0320 	bic.w	r3, r3, #32
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	e7f6      	b.n	8009c30 <_printf_i+0x194>
 8009c42:	4616      	mov	r6, r2
 8009c44:	e7bd      	b.n	8009bc2 <_printf_i+0x126>
 8009c46:	6833      	ldr	r3, [r6, #0]
 8009c48:	6825      	ldr	r5, [r4, #0]
 8009c4a:	6961      	ldr	r1, [r4, #20]
 8009c4c:	1d18      	adds	r0, r3, #4
 8009c4e:	6030      	str	r0, [r6, #0]
 8009c50:	062e      	lsls	r6, r5, #24
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	d501      	bpl.n	8009c5a <_printf_i+0x1be>
 8009c56:	6019      	str	r1, [r3, #0]
 8009c58:	e002      	b.n	8009c60 <_printf_i+0x1c4>
 8009c5a:	0668      	lsls	r0, r5, #25
 8009c5c:	d5fb      	bpl.n	8009c56 <_printf_i+0x1ba>
 8009c5e:	8019      	strh	r1, [r3, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	6123      	str	r3, [r4, #16]
 8009c64:	4616      	mov	r6, r2
 8009c66:	e7bc      	b.n	8009be2 <_printf_i+0x146>
 8009c68:	6833      	ldr	r3, [r6, #0]
 8009c6a:	1d1a      	adds	r2, r3, #4
 8009c6c:	6032      	str	r2, [r6, #0]
 8009c6e:	681e      	ldr	r6, [r3, #0]
 8009c70:	6862      	ldr	r2, [r4, #4]
 8009c72:	2100      	movs	r1, #0
 8009c74:	4630      	mov	r0, r6
 8009c76:	f7f6 faab 	bl	80001d0 <memchr>
 8009c7a:	b108      	cbz	r0, 8009c80 <_printf_i+0x1e4>
 8009c7c:	1b80      	subs	r0, r0, r6
 8009c7e:	6060      	str	r0, [r4, #4]
 8009c80:	6863      	ldr	r3, [r4, #4]
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	2300      	movs	r3, #0
 8009c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c8a:	e7aa      	b.n	8009be2 <_printf_i+0x146>
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	4632      	mov	r2, r6
 8009c90:	4649      	mov	r1, r9
 8009c92:	4640      	mov	r0, r8
 8009c94:	47d0      	blx	sl
 8009c96:	3001      	adds	r0, #1
 8009c98:	d0ad      	beq.n	8009bf6 <_printf_i+0x15a>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	079b      	lsls	r3, r3, #30
 8009c9e:	d413      	bmi.n	8009cc8 <_printf_i+0x22c>
 8009ca0:	68e0      	ldr	r0, [r4, #12]
 8009ca2:	9b03      	ldr	r3, [sp, #12]
 8009ca4:	4298      	cmp	r0, r3
 8009ca6:	bfb8      	it	lt
 8009ca8:	4618      	movlt	r0, r3
 8009caa:	e7a6      	b.n	8009bfa <_printf_i+0x15e>
 8009cac:	2301      	movs	r3, #1
 8009cae:	4632      	mov	r2, r6
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	47d0      	blx	sl
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d09d      	beq.n	8009bf6 <_printf_i+0x15a>
 8009cba:	3501      	adds	r5, #1
 8009cbc:	68e3      	ldr	r3, [r4, #12]
 8009cbe:	9903      	ldr	r1, [sp, #12]
 8009cc0:	1a5b      	subs	r3, r3, r1
 8009cc2:	42ab      	cmp	r3, r5
 8009cc4:	dcf2      	bgt.n	8009cac <_printf_i+0x210>
 8009cc6:	e7eb      	b.n	8009ca0 <_printf_i+0x204>
 8009cc8:	2500      	movs	r5, #0
 8009cca:	f104 0619 	add.w	r6, r4, #25
 8009cce:	e7f5      	b.n	8009cbc <_printf_i+0x220>
 8009cd0:	08009e95 	.word	0x08009e95
 8009cd4:	08009ea6 	.word	0x08009ea6

08009cd8 <memmove>:
 8009cd8:	4288      	cmp	r0, r1
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	eb01 0402 	add.w	r4, r1, r2
 8009ce0:	d902      	bls.n	8009ce8 <memmove+0x10>
 8009ce2:	4284      	cmp	r4, r0
 8009ce4:	4623      	mov	r3, r4
 8009ce6:	d807      	bhi.n	8009cf8 <memmove+0x20>
 8009ce8:	1e43      	subs	r3, r0, #1
 8009cea:	42a1      	cmp	r1, r4
 8009cec:	d008      	beq.n	8009d00 <memmove+0x28>
 8009cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cf6:	e7f8      	b.n	8009cea <memmove+0x12>
 8009cf8:	4402      	add	r2, r0
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	428a      	cmp	r2, r1
 8009cfe:	d100      	bne.n	8009d02 <memmove+0x2a>
 8009d00:	bd10      	pop	{r4, pc}
 8009d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d0a:	e7f7      	b.n	8009cfc <memmove+0x24>

08009d0c <_sbrk_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	@ (8009d28 <_sbrk_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7f7 f832 	bl	8000d80 <_sbrk>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_sbrk_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_sbrk_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20002e84 	.word	0x20002e84

08009d2c <_realloc_r>:
 8009d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	4607      	mov	r7, r0
 8009d32:	4614      	mov	r4, r2
 8009d34:	460d      	mov	r5, r1
 8009d36:	b921      	cbnz	r1, 8009d42 <_realloc_r+0x16>
 8009d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	f7ff bc5b 	b.w	80095f8 <_malloc_r>
 8009d42:	b92a      	cbnz	r2, 8009d50 <_realloc_r+0x24>
 8009d44:	f7ff fbec 	bl	8009520 <_free_r>
 8009d48:	4625      	mov	r5, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	f000 f81a 	bl	8009d88 <_malloc_usable_size_r>
 8009d54:	4284      	cmp	r4, r0
 8009d56:	4606      	mov	r6, r0
 8009d58:	d802      	bhi.n	8009d60 <_realloc_r+0x34>
 8009d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d5e:	d8f4      	bhi.n	8009d4a <_realloc_r+0x1e>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4638      	mov	r0, r7
 8009d64:	f7ff fc48 	bl	80095f8 <_malloc_r>
 8009d68:	4680      	mov	r8, r0
 8009d6a:	b908      	cbnz	r0, 8009d70 <_realloc_r+0x44>
 8009d6c:	4645      	mov	r5, r8
 8009d6e:	e7ec      	b.n	8009d4a <_realloc_r+0x1e>
 8009d70:	42b4      	cmp	r4, r6
 8009d72:	4622      	mov	r2, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	bf28      	it	cs
 8009d78:	4632      	movcs	r2, r6
 8009d7a:	f7ff fbc3 	bl	8009504 <memcpy>
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4638      	mov	r0, r7
 8009d82:	f7ff fbcd 	bl	8009520 <_free_r>
 8009d86:	e7f1      	b.n	8009d6c <_realloc_r+0x40>

08009d88 <_malloc_usable_size_r>:
 8009d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d8c:	1f18      	subs	r0, r3, #4
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bfbc      	itt	lt
 8009d92:	580b      	ldrlt	r3, [r1, r0]
 8009d94:	18c0      	addlt	r0, r0, r3
 8009d96:	4770      	bx	lr

08009d98 <_init>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	bf00      	nop
 8009d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9e:	bc08      	pop	{r3}
 8009da0:	469e      	mov	lr, r3
 8009da2:	4770      	bx	lr

08009da4 <_fini>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	bf00      	nop
 8009da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009daa:	bc08      	pop	{r3}
 8009dac:	469e      	mov	lr, r3
 8009dae:	4770      	bx	lr
