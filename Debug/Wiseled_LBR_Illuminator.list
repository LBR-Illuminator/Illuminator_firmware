
Wiseled_LBR_Illuminator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb8  08007fb8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fb8  08007fb8  00008fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc0  08007fc0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00008fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007fc8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  20000060  08008028  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d60  08008028  00009d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ceab  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d15  00000000  00000000  00025f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00029c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c6  00000000  00000000  0002b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002479c  00000000  00000000  0002c746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b01a  00000000  00000000  00050ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3444  00000000  00000000  0006befc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e8  00000000  00000000  0014f384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00155c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f18 	.word	0x08007f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007f18 	.word	0x08007f18

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000007c 	.word	0x2000007c
 800052c:	2000011c 	.word	0x2000011c

08000530 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4a07      	ldr	r2, [pc, #28]	@ (800055c <vApplicationGetTimerTaskMemory+0x2c>)
 8000540:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <vApplicationGetTimerTaskMemory+0x30>)
 8000546:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800054e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	2000031c 	.word	0x2000031c
 8000560:	200003bc 	.word	0x200003bc

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fd2e 	bl	8000fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f823 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fa4b 	bl	8000a0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000576:	f000 fa2b 	bl	80009d0 <MX_DMA_Init>
  MX_ADC1_Init();
 800057a:	f000 f87f 	bl	800067c <MX_ADC1_Init>
  MX_TIM1_Init();
 800057e:	f000 f933 	bl	80007e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f9f5 	bl	8000970 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <main+0x4c>)
 8000588:	1d3c      	adds	r4, r7, #4
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f004 fef1 	bl	8005384 <osThreadCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a03      	ldr	r2, [pc, #12]	@ (80005b4 <main+0x50>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a8:	f004 fee5 	bl	8005376 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x48>
 80005b0:	08007f3c 	.word	0x08007f3c
 80005b4:	2000093c 	.word	0x2000093c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	@ 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	@ 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 fbb6 	bl	8007d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005de:	f001 ffc7 	bl	8002570 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 fa98 	bl	8000b1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ec:	f001 ffa2 	bl	8002534 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f0:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <SystemClock_Config+0xc0>)
 80005f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005f6:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <SystemClock_Config+0xc0>)
 80005f8:	f023 0318 	bic.w	r3, r3, #24
 80005fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000600:	2314      	movs	r3, #20
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	@ 0x60
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fff1 	bl	800261c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000640:	f000 fa6c 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fbf1 	bl	8002e44 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000668:	f000 fa58 	bl	8000b1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800066c:	f003 f836 	bl	80036dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	@ 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000692:	4b4d      	ldr	r3, [pc, #308]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 8000694:	4a4d      	ldr	r2, [pc, #308]	@ (80007cc <MX_ADC1_Init+0x150>)
 8000696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000698:	4b4b      	ldr	r3, [pc, #300]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 800069a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800069e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a0:	4b49      	ldr	r3, [pc, #292]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b48      	ldr	r3, [pc, #288]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ac:	4b46      	ldr	r3, [pc, #280]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006b2:	4b45      	ldr	r3, [pc, #276]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006b4:	2208      	movs	r2, #8
 80006b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b8:	4b43      	ldr	r3, [pc, #268]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80006c4:	4b40      	ldr	r3, [pc, #256]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006c6:	2206      	movs	r2, #6
 80006c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d2:	4b3d      	ldr	r3, [pc, #244]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006de:	4b3a      	ldr	r3, [pc, #232]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b38      	ldr	r3, [pc, #224]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006ec:	4b36      	ldr	r3, [pc, #216]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	4834      	ldr	r0, [pc, #208]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80006f6:	f000 fe2d 	bl	8001354 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000700:	f000 fa0c 	bl	8000b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000704:	4b32      	ldr	r3, [pc, #200]	@ (80007d0 <MX_ADC1_Init+0x154>)
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000708:	2306      	movs	r3, #6
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000710:	237f      	movs	r3, #127	@ 0x7f
 8000712:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000714:	2304      	movs	r3, #4
 8000716:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4829      	ldr	r0, [pc, #164]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 8000722:	f000 ff59 	bl	80015d8 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800072c:	f000 f9f6 	bl	8000b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <MX_ADC1_Init+0x158>)
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000734:	230c      	movs	r3, #12
 8000736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4822      	ldr	r0, [pc, #136]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 800073e:	f000 ff4b 	bl	80015d8 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000748:	f000 f9e8 	bl	8000b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 800074e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000750:	2312      	movs	r3, #18
 8000752:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	481b      	ldr	r0, [pc, #108]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 800075a:	f000 ff3d 	bl	80015d8 <HAL_ADC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000764:	f000 f9da 	bl	8000b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_ADC1_Init+0x160>)
 800076a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800076c:	2318      	movs	r3, #24
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4814      	ldr	r0, [pc, #80]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 8000776:	f000 ff2f 	bl	80015d8 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000780:	f000 f9cc 	bl	8000b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_ADC1_Init+0x164>)
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800078c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 8000794:	f000 ff20 	bl	80015d8 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800079e:	f000 f9bd 	bl	8000b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_ADC1_Init+0x168>)
 80007a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007a6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80007aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_ADC1_Init+0x14c>)
 80007b2:	f000 ff11 	bl	80015d8 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80007bc:	f000 f9ae 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200007bc 	.word	0x200007bc
 80007cc:	50040000 	.word	0x50040000
 80007d0:	19200040 	.word	0x19200040
 80007d4:	21800100 	.word	0x21800100
 80007d8:	25b00200 	.word	0x25b00200
 80007dc:	2a000400 	.word	0x2a000400
 80007e0:	2e300800 	.word	0x2e300800
 80007e4:	32601000 	.word	0x32601000

080007e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09a      	sub	sp, #104	@ 0x68
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000808:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	222c      	movs	r2, #44	@ 0x2c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fa88 	bl	8007d38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000828:	4b4f      	ldr	r3, [pc, #316]	@ (8000968 <MX_TIM1_Init+0x180>)
 800082a:	4a50      	ldr	r2, [pc, #320]	@ (800096c <MX_TIM1_Init+0x184>)
 800082c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800082e:	4b4e      	ldr	r3, [pc, #312]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000830:	224f      	movs	r2, #79	@ 0x4f
 8000832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b4c      	ldr	r3, [pc, #304]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800083a:	4b4b      	ldr	r3, [pc, #300]	@ (8000968 <MX_TIM1_Init+0x180>)
 800083c:	2263      	movs	r2, #99	@ 0x63
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b49      	ldr	r3, [pc, #292]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000846:	4b48      	ldr	r3, [pc, #288]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <MX_TIM1_Init+0x180>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000852:	4845      	ldr	r0, [pc, #276]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000854:	f003 f844 	bl	80038e0 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800085e:	f000 f95d 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000866:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800086c:	4619      	mov	r1, r3
 800086e:	483e      	ldr	r0, [pc, #248]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000870:	f003 fb5e 	bl	8003f30 <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800087a:	f000 f94f 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087e:	483a      	ldr	r0, [pc, #232]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000880:	f003 f8da 	bl	8003a38 <HAL_TIM_PWM_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800088a:	f000 f947 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800089e:	4619      	mov	r1, r3
 80008a0:	4831      	ldr	r0, [pc, #196]	@ (8000968 <MX_TIM1_Init+0x180>)
 80008a2:	f003 ffbf 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008ac:	f000 f936 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b0:	2360      	movs	r3, #96	@ 0x60
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4824      	ldr	r0, [pc, #144]	@ (8000968 <MX_TIM1_Init+0x180>)
 80008d6:	f003 fa17 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80008e0:	f000 f91c 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008e8:	2204      	movs	r2, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_TIM1_Init+0x180>)
 80008ee:	f003 fa0b 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80008f8:	f000 f910 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000900:	2208      	movs	r2, #8
 8000902:	4619      	mov	r1, r3
 8000904:	4818      	ldr	r0, [pc, #96]	@ (8000968 <MX_TIM1_Init+0x180>)
 8000906:	f003 f9ff 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000910:	f000 f904 	bl	8000b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <MX_TIM1_Init+0x180>)
 800094a:	f003 ffd1 	bl	80048f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000954:	f000 f8e2 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <MX_TIM1_Init+0x180>)
 800095a:	f000 f9c1 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 800095e:	bf00      	nop
 8000960:	3768      	adds	r7, #104	@ 0x68
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000868 	.word	0x20000868
 800096c:	40012c00 	.word	0x40012c00

08000970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <MX_USART1_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART1_UART_Init+0x58>)
 80009b4:	f004 f832 	bl	8004a1c <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009be:	f000 f8ad 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200008b4 	.word	0x200008b4
 80009cc:	40013800 	.word	0x40013800

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_DMA_Init+0x38>)
 80009d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009da:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <MX_DMA_Init+0x38>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_DMA_Init+0x38>)
 80009e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2105      	movs	r1, #5
 80009f2:	200b      	movs	r0, #11
 80009f4:	f001 fa8a 	bl	8001f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f8:	200b      	movs	r0, #11
 80009fa:	f001 faa3 	bl	8001f44 <HAL_NVIC_EnableIRQ>

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a2e      	ldr	r2, [pc, #184]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a22      	ldr	r2, [pc, #136]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	481d      	ldr	r0, [pc, #116]	@ (8000ae4 <MX_GPIO_Init+0xd8>)
 8000a70:	f001 fd48 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a74:	2304      	movs	r3, #4
 8000a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a84:	2307      	movs	r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f001 fbcd 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f001 fbbb 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000aba:	2308      	movs	r3, #8
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_GPIO_Init+0xd8>)
 8000ad2:	f001 fbad 	bl	8002230 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000400 	.word	0x48000400

08000ae8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f004 fc93 	bl	800541c <osDelay>
 8000af6:	e7fb      	b.n	8000af0 <StartDefaultTask+0x8>

08000af8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b0a:	f000 fa77 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40001400 	.word	0x40001400

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	f06f 0001 	mvn.w	r0, #1
 8000b66:	f001 f9d1 	bl	8001f0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09e      	sub	sp, #120	@ 0x78
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2254      	movs	r2, #84	@ 0x54
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f007 f8cd 	bl	8007d38 <memset>
  if(hadc->Instance==ADC1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8000c90 <HAL_ADC_MspInit+0x118>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d16f      	bne.n	8000c88 <HAL_ADC_MspInit+0x110>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ba8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fb8a 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000be2:	f7ff ff9b 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000be6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <HAL_ADC_MspInit+0x11c>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a2a      	ldr	r2, [pc, #168]	@ (8000c94 <HAL_ADC_MspInit+0x11c>)
 8000bec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <HAL_ADC_MspInit+0x11c>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <HAL_ADC_MspInit+0x11c>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a24      	ldr	r2, [pc, #144]	@ (8000c94 <HAL_ADC_MspInit+0x11c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <HAL_ADC_MspInit+0x11c>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = LED1_ADC_Current_Pin|LED2_ADC_Current_Pin|LED3_ADC_Current_Pin|LED1_ADC_Temperature_Pin
 8000c16:	23fa      	movs	r3, #250	@ 0xfa
 8000c18:	667b      	str	r3, [r7, #100]	@ 0x64
                          |LED2_ADC_Temperature_Pin|LED3_ADC_Temperature_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c1a:	230b      	movs	r3, #11
 8000c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2c:	f001 fb00 	bl	8002230 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c30:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c32:	4a1a      	ldr	r2, [pc, #104]	@ (8000c9c <HAL_ADC_MspInit+0x124>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c60:	2220      	movs	r2, #32
 8000c62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c6c:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c6e:	f001 f977 	bl	8001f60 <HAL_DMA_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000c78:	f7ff ff50 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a06      	ldr	r2, [pc, #24]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c80:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <HAL_ADC_MspInit+0x120>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c88:	bf00      	nop
 8000c8a:	3778      	adds	r7, #120	@ 0x78
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	50040000 	.word	0x50040000
 8000c94:	40021000 	.word	0x40021000
 8000c98:	20000820 	.word	0x20000820
 8000c9c:	40020008 	.word	0x40020008

08000ca0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x38>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d10b      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb6:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <HAL_TIM_MspPostInit+0x68>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d11d      	bne.n	8000d3e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4a11      	ldr	r2, [pc, #68]	@ (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED1_PWM_White_Pin|LED2_PWM_Green_Pin|LED3_PWM_Red_Pin;
 8000d1a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f001 fa79 	bl	8002230 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012c00 	.word	0x40012c00
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09e      	sub	sp, #120	@ 0x78
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2254      	movs	r2, #84	@ 0x54
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f006 ffe1 	bl	8007d38 <memset>
  if(huart->Instance==USART1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000df4 <HAL_UART_MspInit+0xa4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d135      	bne.n	8000dec <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 faaf 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d98:	f7ff fec0 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <HAL_UART_MspInit+0xa8>)
 8000d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da0:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <HAL_UART_MspInit+0xa8>)
 8000da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <HAL_UART_MspInit+0xa8>)
 8000daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <HAL_UART_MspInit+0xa8>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db8:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <HAL_UART_MspInit+0xa8>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <HAL_UART_MspInit+0xa8>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dcc:	23c0      	movs	r3, #192	@ 0xc0
 8000dce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000de4:	4619      	mov	r1, r3
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_UART_MspInit+0xac>)
 8000de8:	f001 fa22 	bl	8002230 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dec:	bf00      	nop
 8000dee:	3778      	adds	r7, #120	@ 0x78
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40013800 	.word	0x40013800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400

08000e00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <HAL_InitTick+0xe0>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	4a33      	ldr	r2, [pc, #204]	@ (8000ee0 <HAL_InitTick+0xe0>)
 8000e14:	f043 0320 	orr.w	r3, r3, #32
 8000e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <HAL_InitTick+0xe0>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e26:	f107 0210 	add.w	r2, r7, #16
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 f9cb 	bl	80031cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d103      	bne.n	8000e48 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e40:	f002 f998 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8000e44:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e46:	e004      	b.n	8000e52 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e48:	f002 f994 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e54:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <HAL_InitTick+0xe4>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e62:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <HAL_InitTick+0xec>)
 8000e64:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e6c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e72:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e86:	4818      	ldr	r0, [pc, #96]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e88:	f002 fd2a 	bl	80038e0 <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d11b      	bne.n	8000ed2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e9a:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <HAL_InitTick+0xe8>)
 8000e9c:	f002 fd78 	bl	8003990 <HAL_TIM_Base_Start_IT>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ea6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d111      	bne.n	8000ed2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000eae:	2037      	movs	r0, #55	@ 0x37
 8000eb0:	f001 f848 	bl	8001f44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	d808      	bhi.n	8000ecc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	2037      	movs	r0, #55	@ 0x37
 8000ec0:	f001 f824 	bl	8001f0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_InitTick+0xf0>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e002      	b.n	8000ed2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ed2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3738      	adds	r7, #56	@ 0x38
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	20000940 	.word	0x20000940
 8000eec:	40001400 	.word	0x40001400
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <DMA1_Channel1_IRQHandler+0x10>)
 8000f32:	f001 f8cd 	bl	80020d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000820 	.word	0x20000820

08000f40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <TIM7_IRQHandler+0x10>)
 8000f46:	f002 fdd8 	bl	8003afa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000940 	.word	0x20000940

08000f54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f7c:	f7ff ffea 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f006 ff2d 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000faa:	f7ff fadb 	bl	8000564 <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fbc:	08007fc8 	.word	0x08007fc8
  ldr r2, =_sbss
 8000fc0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fc4:	20002d60 	.word	0x20002d60

08000fc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_IRQHandler>

08000fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 ff8e 	bl	8001ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f7ff ff10 	bl	8000e00 <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e001      	b.n	8000ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fec:	f7ff fd9c 	bl	8000b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	2000098c 	.word	0x2000098c

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000098c 	.word	0x2000098c

0800103c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	609a      	str	r2, [r3, #8]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3360      	adds	r3, #96	@ 0x60
 80010b6:	461a      	mov	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <LL_ADC_SetOffset+0x44>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	4313      	orrs	r3, r2
 80010d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	03fff000 	.word	0x03fff000

080010ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3360      	adds	r3, #96	@ 0x60
 80010fa:	461a      	mov	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3360      	adds	r3, #96	@ 0x60
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800114e:	b480      	push	{r7}
 8001150:	b087      	sub	sp, #28
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3330      	adds	r3, #48	@ 0x30
 800115e:	461a      	mov	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	4413      	add	r3, r2
 800116c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	211f      	movs	r1, #31
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0e9b      	lsrs	r3, r3, #26
 8001186:	f003 011f 	and.w	r1, r3, #31
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b087      	sub	sp, #28
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3314      	adds	r3, #20
 80011b6:	461a      	mov	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	0e5b      	lsrs	r3, r3, #25
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0d1b      	lsrs	r3, r3, #20
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2107      	movs	r1, #7
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	0d1b      	lsrs	r3, r3, #20
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0318 	and.w	r3, r3, #24
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001220:	40d9      	lsrs	r1, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	400b      	ands	r3, r1
 8001226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800122a:	431a      	orrs	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	0007ffff 	.word	0x0007ffff

08001244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6093      	str	r3, [r2, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800127c:	d101      	bne.n	8001282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80012a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <LL_ADC_IsEnabled+0x18>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_ADC_IsEnabled+0x1a>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b04      	cmp	r3, #4
 8001318:	d101      	bne.n	800131e <LL_ADC_REG_IsConversionOngoing+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b08      	cmp	r3, #8
 800133e:	d101      	bne.n	8001344 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e126      	b.n	80015bc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001378:	2b00      	cmp	r3, #0
 800137a:	d109      	bne.n	8001390 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fbfb 	bl	8000b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff67 	bl	8001268 <LL_ADC_IsDeepPowerDownEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff4d 	bl	8001244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff82 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d115      	bne.n	80013e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff66 	bl	8001290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c4:	4b7f      	ldr	r3, [pc, #508]	@ (80015c4 <HAL_ADC_Init+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	4a7f      	ldr	r2, [pc, #508]	@ (80015c8 <HAL_ADC_Init+0x274>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	3301      	adds	r3, #1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff64 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10d      	bne.n	8001412 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fa:	f043 0210 	orr.w	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff75 	bl	8001306 <LL_ADC_REG_IsConversionOngoing>
 800141c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80bf 	bne.w	80015aa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 80bb 	bne.w	80015aa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001438:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff49 	bl	80012e0 <LL_ADC_IsEnabled>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10b      	bne.n	800146c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001454:	485d      	ldr	r0, [pc, #372]	@ (80015cc <HAL_ADC_Init+0x278>)
 8001456:	f7ff ff43 	bl	80012e0 <LL_ADC_IsEnabled>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d105      	bne.n	800146c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4619      	mov	r1, r3
 8001466:	485a      	ldr	r0, [pc, #360]	@ (80015d0 <HAL_ADC_Init+0x27c>)
 8001468:	f7ff fde8 	bl	800103c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e5b      	ldrb	r3, [r3, #25]
 8001470:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001476:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800147c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001482:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d106      	bne.n	80014a8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149e:	3b01      	subs	r3, #1
 80014a0:	045b      	lsls	r3, r3, #17
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	4b42      	ldr	r3, [pc, #264]	@ (80015d4 <HAL_ADC_Init+0x280>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	430b      	orrs	r3, r1
 80014d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff25 	bl	800132c <LL_ADC_INJ_IsConversionOngoing>
 80014e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d13d      	bne.n	8001566 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d13a      	bne.n	8001566 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800150c:	f023 0302 	bic.w	r3, r3, #2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	69b9      	ldr	r1, [r7, #24]
 8001516:	430b      	orrs	r3, r1
 8001518:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001520:	2b01      	cmp	r3, #1
 8001522:	d118      	bne.n	8001556 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800152e:	f023 0304 	bic.w	r3, r3, #4
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800153a:	4311      	orrs	r1, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001540:	4311      	orrs	r1, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001546:	430a      	orrs	r2, r1
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	e007      	b.n	8001566 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0201 	bic.w	r2, r2, #1
 8001564:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d10c      	bne.n	8001588 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	f023 010f 	bic.w	r1, r3, #15
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	631a      	str	r2, [r3, #48]	@ 0x30
 8001586:	e007      	b.n	8001598 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 020f 	bic.w	r2, r2, #15
 8001596:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	f023 0303 	bic.w	r3, r3, #3
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015a8:	e007      	b.n	80015ba <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ae:	f043 0210 	orr.w	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	053e2d63 	.word	0x053e2d63
 80015cc:	50040000 	.word	0x50040000
 80015d0:	50040300 	.word	0x50040300
 80015d4:	fff0c007 	.word	0xfff0c007

080015d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0b6      	sub	sp, #216	@ 0xd8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x22>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e3bb      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x79a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe7d 	bl	8001306 <LL_ADC_REG_IsConversionOngoing>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 83a0 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d824      	bhi.n	800166e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	3b02      	subs	r3, #2
 800162a:	2b03      	cmp	r3, #3
 800162c:	d81b      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x8e>
 800162e:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <HAL_ADC_ConfigChannel+0x5c>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001645 	.word	0x08001645
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001655 	.word	0x08001655
 8001640:	0800165d 	.word	0x0800165d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001644:	230c      	movs	r3, #12
 8001646:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800164a:	e010      	b.n	800166e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800164c:	2312      	movs	r3, #18
 800164e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001652:	e00c      	b.n	800166e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001654:	2318      	movs	r3, #24
 8001656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800165a:	e008      	b.n	800166e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800165c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001664:	e003      	b.n	800166e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001666:	2306      	movs	r3, #6
 8001668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800166c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800167c:	f7ff fd67 	bl	800114e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fe3e 	bl	8001306 <LL_ADC_REG_IsConversionOngoing>
 800168a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fe4a 	bl	800132c <LL_ADC_INJ_IsConversionOngoing>
 8001698:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800169c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f040 81a4 	bne.w	80019ee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 819f 	bne.w	80019ee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	461a      	mov	r2, r3
 80016be:	f7ff fd72 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d00a      	beq.n	80016fa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6919      	ldr	r1, [r3, #16]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80016f4:	f7ff fcd6 	bl	80010a4 <LL_ADC_SetOffset>
 80016f8:	e179      	b.n	80019ee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fcf3 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10a      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x14e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fce8 	bl	80010ec <LL_ADC_GetOffsetChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	0e9b      	lsrs	r3, r3, #26
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	e01e      	b.n	8001764 <HAL_ADC_ConfigChannel+0x18c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fcdd 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800174c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001754:	2320      	movs	r3, #32
 8001756:	e004      	b.n	8001762 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1a4>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	e018      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1d6>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80017a0:	2320      	movs	r3, #32
 80017a2:	e004      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80017a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d106      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fcac 	bl	8001118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fc90 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10a      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x214>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2101      	movs	r1, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc85 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	0e9b      	lsrs	r3, r3, #26
 80017e6:	f003 021f 	and.w	r2, r3, #31
 80017ea:	e01e      	b.n	800182a <HAL_ADC_ConfigChannel+0x252>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fc7a 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800180a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800180e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800181a:	2320      	movs	r3, #32
 800181c:	e004      	b.n	8001828 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800181e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x26a>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0e9b      	lsrs	r3, r3, #26
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	e018      	b.n	8001874 <HAL_ADC_ConfigChannel+0x29c>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001856:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800185a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800185e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001866:	2320      	movs	r3, #32
 8001868:	e004      	b.n	8001874 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800186a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001874:	429a      	cmp	r2, r3
 8001876:	d106      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc49 	bl	8001118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2102      	movs	r1, #2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fc2d 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10a      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x2da>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2102      	movs	r1, #2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fc22 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	0e9b      	lsrs	r3, r3, #26
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	e01e      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x318>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2102      	movs	r1, #2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc17 	bl	80010ec <LL_ADC_GetOffsetChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80018d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80018d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80018e0:	2320      	movs	r3, #32
 80018e2:	e004      	b.n	80018ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80018e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x330>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	e014      	b.n	8001932 <HAL_ADC_ConfigChannel+0x35a>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800191c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001924:	2320      	movs	r3, #32
 8001926:	e004      	b.n	8001932 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001932:	429a      	cmp	r2, r3
 8001934:	d106      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	2102      	movs	r1, #2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fbea 	bl	8001118 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2103      	movs	r1, #3
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fbce 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x398>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2103      	movs	r1, #3
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fbc3 	bl	80010ec <LL_ADC_GetOffsetChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	f003 021f 	and.w	r2, r3, #31
 800196e:	e017      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x3c8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2103      	movs	r1, #3
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fbb8 	bl	80010ec <LL_ADC_GetOffsetChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800198a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800198c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e003      	b.n	800199e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x3e0>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	e011      	b.n	80019dc <HAL_ADC_ConfigChannel+0x404>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80019c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80019ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80019d0:	2320      	movs	r3, #32
 80019d2:	e003      	b.n	80019dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80019d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019dc:	429a      	cmp	r2, r3
 80019de:	d106      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	2103      	movs	r1, #3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fb95 	bl	8001118 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fc74 	bl	80012e0 <LL_ADC_IsEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 8140 	bne.w	8001c80 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f7ff fbf5 	bl	80011fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	4a8f      	ldr	r2, [pc, #572]	@ (8001c54 <HAL_ADC_ConfigChannel+0x67c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	f040 8131 	bne.w	8001c80 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10b      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x46e>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0e9b      	lsrs	r3, r3, #26
 8001a34:	3301      	adds	r3, #1
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	bf94      	ite	ls
 8001a3e:	2301      	movls	r3, #1
 8001a40:	2300      	movhi	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	e019      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x4a2>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e003      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2b09      	cmp	r3, #9
 8001a72:	bf94      	ite	ls
 8001a74:	2301      	movls	r3, #1
 8001a76:	2300      	movhi	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d079      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d107      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x4c2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	3301      	adds	r3, #1
 8001a92:	069b      	lsls	r3, r3, #26
 8001a94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a98:	e015      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x4ee>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aaa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	e003      	b.n	8001abe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	069b      	lsls	r3, r3, #26
 8001ac2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x50e>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	e017      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x53e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001af6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e003      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	ea42 0103 	orr.w	r1, r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x564>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0e9b      	lsrs	r3, r3, #26
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f003 021f 	and.w	r2, r3, #31
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	051b      	lsls	r3, r3, #20
 8001b3a:	e018      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x596>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 021f 	and.w	r2, r3, #31
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	e081      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x5b6>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	3301      	adds	r3, #1
 8001b86:	069b      	lsls	r3, r3, #26
 8001b88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b8c:	e015      	b.n	8001bba <HAL_ADC_ConfigChannel+0x5e2>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e003      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	069b      	lsls	r3, r3, #26
 8001bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x602>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	e017      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x632>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	61bb      	str	r3, [r7, #24]
  return result;
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e003      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	ea42 0103 	orr.w	r1, r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x65e>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0e9b      	lsrs	r3, r3, #26
 8001c20:	3301      	adds	r3, #1
 8001c22:	f003 021f 	and.w	r2, r3, #31
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b1e      	subs	r3, #30
 8001c2e:	051b      	lsls	r3, r3, #20
 8001c30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c34:	e01e      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x69c>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	60fb      	str	r3, [r7, #12]
  return result;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	e006      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x688>
 8001c52:	bf00      	nop
 8001c54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b1e      	subs	r3, #30
 8001c6e:	051b      	lsls	r3, r3, #20
 8001c70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7ff fa93 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <HAL_ADC_ConfigChannel+0x7a4>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d06c      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c8c:	483c      	ldr	r0, [pc, #240]	@ (8001d80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c8e:	f7ff f9fb 	bl	8001088 <LL_ADC_GetCommonPathInternalCh>
 8001c92:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d84 <HAL_ADC_ConfigChannel+0x7ac>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d127      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ca4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d121      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a35      	ldr	r2, [pc, #212]	@ (8001d88 <HAL_ADC_ConfigChannel+0x7b0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d157      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482f      	ldr	r0, [pc, #188]	@ (8001d80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001cc2:	f7ff f9ce 	bl	8001062 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc6:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <HAL_ADC_ConfigChannel+0x7b4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	4a30      	ldr	r2, [pc, #192]	@ (8001d90 <HAL_ADC_ConfigChannel+0x7b8>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cee:	e03a      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a27      	ldr	r2, [pc, #156]	@ (8001d94 <HAL_ADC_ConfigChannel+0x7bc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d113      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d88 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d12a      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4819      	ldr	r0, [pc, #100]	@ (8001d80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d1c:	f7ff f9a1 	bl	8001062 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d20:	e021      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1c      	ldr	r2, [pc, #112]	@ (8001d98 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d11c      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d116      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d111      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d4e:	f7ff f988 	bl	8001062 <LL_ADC_SetCommonPathInternalCh>
 8001d52:	e008      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	37d8      	adds	r7, #216	@ 0xd8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	80080000 	.word	0x80080000
 8001d80:	50040300 	.word	0x50040300
 8001d84:	c7520000 	.word	0xc7520000
 8001d88:	50040000 	.word	0x50040000
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	053e2d63 	.word	0x053e2d63
 8001d94:	cb840000 	.word	0xcb840000
 8001d98:	80000001 	.word	0x80000001

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	@ (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff4c 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1e:	f7ff ff61 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f7ff ffb1 	bl	8001e90 <NVIC_EncodePriority>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff80 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff54 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e098      	b.n	80020a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b4d      	ldr	r3, [pc, #308]	@ (80020b0 <HAL_DMA_Init+0x150>)
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d80f      	bhi.n	8001f9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b4b      	ldr	r3, [pc, #300]	@ (80020b4 <HAL_DMA_Init+0x154>)
 8001f86:	4413      	add	r3, r2
 8001f88:	4a4b      	ldr	r2, [pc, #300]	@ (80020b8 <HAL_DMA_Init+0x158>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	009a      	lsls	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a48      	ldr	r2, [pc, #288]	@ (80020bc <HAL_DMA_Init+0x15c>)
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f9c:	e00e      	b.n	8001fbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <HAL_DMA_Init+0x160>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a43      	ldr	r2, [pc, #268]	@ (80020b8 <HAL_DMA_Init+0x158>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_DMA_Init+0x164>)
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002016:	d039      	beq.n	800208c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	4a27      	ldr	r2, [pc, #156]	@ (80020bc <HAL_DMA_Init+0x15c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d11a      	bne.n	8002058 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002022:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <HAL_DMA_Init+0x168>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f003 031c 	and.w	r3, r3, #28
 800202e:	210f      	movs	r1, #15
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4924      	ldr	r1, [pc, #144]	@ (80020c8 <HAL_DMA_Init+0x168>)
 8002038:	4013      	ands	r3, r2
 800203a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800203c:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <HAL_DMA_Init+0x168>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	f003 031c 	and.w	r3, r3, #28
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	491d      	ldr	r1, [pc, #116]	@ (80020c8 <HAL_DMA_Init+0x168>)
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
 8002056:	e019      	b.n	800208c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002058:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <HAL_DMA_Init+0x16c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002060:	f003 031c 	and.w	r3, r3, #28
 8002064:	210f      	movs	r1, #15
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	4917      	ldr	r1, [pc, #92]	@ (80020cc <HAL_DMA_Init+0x16c>)
 800206e:	4013      	ands	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_DMA_Init+0x16c>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f003 031c 	and.w	r3, r3, #28
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	4911      	ldr	r1, [pc, #68]	@ (80020cc <HAL_DMA_Init+0x16c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40020407 	.word	0x40020407
 80020b4:	bffdfff8 	.word	0xbffdfff8
 80020b8:	cccccccd 	.word	0xcccccccd
 80020bc:	40020000 	.word	0x40020000
 80020c0:	bffdfbf8 	.word	0xbffdfbf8
 80020c4:	40020400 	.word	0x40020400
 80020c8:	400200a8 	.word	0x400200a8
 80020cc:	400204a8 	.word	0x400204a8

080020d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	f003 031c 	and.w	r3, r3, #28
 80020f0:	2204      	movs	r2, #4
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d026      	beq.n	800214a <HAL_DMA_IRQHandler+0x7a>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d021      	beq.n	800214a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0204 	bic.w	r2, r2, #4
 8002122:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	f003 021c 	and.w	r2, r3, #28
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	2104      	movs	r1, #4
 8002132:	fa01 f202 	lsl.w	r2, r1, r2
 8002136:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	2b00      	cmp	r3, #0
 800213e:	d071      	beq.n	8002224 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002148:	e06c      	b.n	8002224 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f003 031c 	and.w	r3, r3, #28
 8002152:	2202      	movs	r2, #2
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02e      	beq.n	80021bc <HAL_DMA_IRQHandler+0xec>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d029      	beq.n	80021bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10b      	bne.n	800218e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 020a 	bic.w	r2, r2, #10
 8002184:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f003 021c 	and.w	r2, r3, #28
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	2102      	movs	r1, #2
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d038      	beq.n	8002224 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021ba:	e033      	b.n	8002224 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	f003 031c 	and.w	r3, r3, #28
 80021c4:	2208      	movs	r2, #8
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02a      	beq.n	8002226 <HAL_DMA_IRQHandler+0x156>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d025      	beq.n	8002226 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 020e 	bic.w	r2, r2, #14
 80021e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f003 021c 	and.w	r2, r3, #28
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002224:	bf00      	nop
 8002226:	bf00      	nop
}
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223e:	e148      	b.n	80024d2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 813a 	beq.w	80024cc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d005      	beq.n	8002270 <HAL_GPIO_Init+0x40>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d130      	bne.n	80022d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022a6:	2201      	movs	r2, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 0201 	and.w	r2, r3, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d017      	beq.n	800230e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d123      	bne.n	8002362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	6939      	ldr	r1, [r7, #16]
 800235e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0203 	and.w	r2, r3, #3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8094 	beq.w	80024cc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a4:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <HAL_GPIO_Init+0x2c0>)
 80023a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a8:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_GPIO_Init+0x2c0>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80023b0:	4b4f      	ldr	r3, [pc, #316]	@ (80024f0 <HAL_GPIO_Init+0x2c0>)
 80023b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023bc:	4a4d      	ldr	r2, [pc, #308]	@ (80024f4 <HAL_GPIO_Init+0x2c4>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023e6:	d00d      	beq.n	8002404 <HAL_GPIO_Init+0x1d4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a43      	ldr	r2, [pc, #268]	@ (80024f8 <HAL_GPIO_Init+0x2c8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <HAL_GPIO_Init+0x1d0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a42      	ldr	r2, [pc, #264]	@ (80024fc <HAL_GPIO_Init+0x2cc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_GPIO_Init+0x1cc>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e004      	b.n	8002406 <HAL_GPIO_Init+0x1d6>
 80023fc:	2307      	movs	r3, #7
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0x1d6>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_GPIO_Init+0x1d6>
 8002404:	2300      	movs	r3, #0
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002416:	4937      	ldr	r1, [pc, #220]	@ (80024f4 <HAL_GPIO_Init+0x2c4>)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002424:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002448:	4a2d      	ldr	r2, [pc, #180]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800244e:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002472:	4a23      	ldr	r2, [pc, #140]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002478:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800249c:	4a18      	ldr	r2, [pc, #96]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024a2:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f aeaf 	bne.w	8002240 <HAL_GPIO_Init+0x10>
  }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000
 80024f8:	48000400 	.word	0x48000400
 80024fc:	48000800 	.word	0x48000800
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002520:	e002      	b.n	8002528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002538:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40007000 	.word	0x40007000

08002554 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <HAL_PWREx_GetVoltageRange+0x18>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40007000 	.word	0x40007000

08002570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800257e:	d130      	bne.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002580:	4b23      	ldr	r3, [pc, #140]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800258c:	d038      	beq.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002596:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002598:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800259e:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2232      	movs	r2, #50	@ 0x32
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	3301      	adds	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b4:	e002      	b.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c8:	d102      	bne.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f2      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	d110      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e00f      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ee:	d007      	beq.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f0:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025f8:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000
 8002614:	20000000 	.word	0x20000000
 8002618:	431bde83 	.word	0x431bde83

0800261c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f000 bc02 	b.w	8002e34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002630:	4b96      	ldr	r3, [pc, #600]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263a:	4b94      	ldr	r3, [pc, #592]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80e4 	beq.w	800281a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_RCC_OscConfig+0x4c>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	f040 808b 	bne.w	8002776 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b01      	cmp	r3, #1
 8002664:	f040 8087 	bne.w	8002776 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002668:	4b88      	ldr	r3, [pc, #544]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x64>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e3d9      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	4b81      	ldr	r3, [pc, #516]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_RCC_OscConfig+0x7e>
 8002690:	4b7e      	ldr	r3, [pc, #504]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002698:	e005      	b.n	80026a6 <HAL_RCC_OscConfig+0x8a>
 800269a:	4b7c      	ldr	r3, [pc, #496]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d223      	bcs.n	80026f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fdbe 	bl	8003230 <RCC_SetFlashLatencyFromMSIRange>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e3ba      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026be:	4b73      	ldr	r3, [pc, #460]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a72      	ldr	r2, [pc, #456]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b70      	ldr	r3, [pc, #448]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	496d      	ldr	r1, [pc, #436]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026dc:	4b6b      	ldr	r3, [pc, #428]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	4968      	ldr	r1, [pc, #416]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	e025      	b.n	800273e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f2:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a65      	ldr	r2, [pc, #404]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80026f8:	f043 0308 	orr.w	r3, r3, #8
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b63      	ldr	r3, [pc, #396]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4960      	ldr	r1, [pc, #384]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002710:	4b5e      	ldr	r3, [pc, #376]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	495b      	ldr	r1, [pc, #364]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fd7e 	bl	8003230 <RCC_SetFlashLatencyFromMSIRange>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e37a      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273e:	f000 fc81 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b51      	ldr	r3, [pc, #324]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4950      	ldr	r1, [pc, #320]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a4e      	ldr	r2, [pc, #312]	@ (8002894 <HAL_RCC_OscConfig+0x278>)
 800275c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800275e:	4b4e      	ldr	r3, [pc, #312]	@ (8002898 <HAL_RCC_OscConfig+0x27c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fb4c 	bl	8000e00 <HAL_InitTick>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d052      	beq.n	8002818 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	e35e      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d032      	beq.n	80027e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800277e:	4b43      	ldr	r3, [pc, #268]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a42      	ldr	r2, [pc, #264]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800278a:	f7fe fc4b 	bl	8001024 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002792:	f7fe fc47 	bl	8001024 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e347      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a4:	4b39      	ldr	r3, [pc, #228]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b0:	4b36      	ldr	r3, [pc, #216]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a35      	ldr	r2, [pc, #212]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027b6:	f043 0308 	orr.w	r3, r3, #8
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b33      	ldr	r3, [pc, #204]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4930      	ldr	r1, [pc, #192]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ce:	4b2f      	ldr	r3, [pc, #188]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	492b      	ldr	r1, [pc, #172]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
 80027e2:	e01a      	b.n	800281a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a28      	ldr	r2, [pc, #160]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fc18 	bl	8001024 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f8:	f7fe fc14 	bl	8001024 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e314      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x1dc>
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002818:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d073      	beq.n	800290e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x21c>
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d10e      	bne.n	8002850 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b14      	ldr	r3, [pc, #80]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d063      	beq.n	800290c <HAL_RCC_OscConfig+0x2f0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d15f      	bne.n	800290c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e2f1      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x24c>
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a0b      	ldr	r2, [pc, #44]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e025      	b.n	80028b4 <HAL_RCC_OscConfig+0x298>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002870:	d114      	bne.n	800289c <HAL_RCC_OscConfig+0x280>
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a05      	ldr	r2, [pc, #20]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a02      	ldr	r2, [pc, #8]	@ (800288c <HAL_RCC_OscConfig+0x270>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e013      	b.n	80028b4 <HAL_RCC_OscConfig+0x298>
 800288c:	40021000 	.word	0x40021000
 8002890:	08007f70 	.word	0x08007f70
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004
 800289c:	4ba0      	ldr	r3, [pc, #640]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a9c      	ldr	r2, [pc, #624]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fbb2 	bl	8001024 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe fbae 	bl	8001024 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e2ae      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d6:	4b92      	ldr	r3, [pc, #584]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2a8>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fb9e 	bl	8001024 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe fb9a 	bl	8001024 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	@ 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e29a      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fe:	4b88      	ldr	r3, [pc, #544]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d0>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d060      	beq.n	80029dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x310>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d119      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d116      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x328>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e277      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b76      	ldr	r3, [pc, #472]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	4973      	ldr	r1, [pc, #460]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	e040      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d023      	beq.n	80029aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002962:	4b6f      	ldr	r3, [pc, #444]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6e      	ldr	r2, [pc, #440]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fb59 	bl	8001024 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe fb55 	bl	8001024 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e255      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b62      	ldr	r3, [pc, #392]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	495f      	ldr	r1, [pc, #380]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fb35 	bl	8001024 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe fb31 	bl	8001024 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e231      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fb10 	bl	8001024 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fb0c 	bl	8001024 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e20c      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1a:	4b41      	ldr	r3, [pc, #260]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3ec>
 8002a28:	e01b      	b.n	8002a62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a30:	4a3b      	ldr	r2, [pc, #236]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe faf3 	bl	8001024 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe faef 	bl	8001024 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1ef      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a54:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a6 	beq.w	8002bbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a74:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10d      	bne.n	8002a9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b27      	ldr	r3, [pc, #156]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	4a26      	ldr	r2, [pc, #152]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8c:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d118      	bne.n	8002ada <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fab6 	bl	8001024 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe fab2 	bl	8001024 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1b2      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4d8>
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002af2:	e029      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d115      	bne.n	8002b28 <HAL_RCC_OscConfig+0x50c>
 8002afc:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a07      	ldr	r2, [pc, #28]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b0c:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a03      	ldr	r2, [pc, #12]	@ (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	4b9a      	ldr	r3, [pc, #616]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2e:	4a99      	ldr	r2, [pc, #612]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b38:	4b96      	ldr	r3, [pc, #600]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	4a95      	ldr	r2, [pc, #596]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d016      	beq.n	8002b7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fa68 	bl	8001024 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fa64 	bl	8001024 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e162      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	4b89      	ldr	r3, [pc, #548]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ed      	beq.n	8002b58 <HAL_RCC_OscConfig+0x53c>
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fa51 	bl	8001024 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fa4d 	bl	8001024 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e14b      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9c:	4b7d      	ldr	r3, [pc, #500]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ed      	bne.n	8002b86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b78      	ldr	r3, [pc, #480]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	4a77      	ldr	r2, [pc, #476]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d03c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01c      	beq.n	8002c0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bd0:	4b70      	ldr	r3, [pc, #448]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7fe fa20 	bl	8001024 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be8:	f7fe fa1c 	bl	8001024 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e11c      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bfa:	4b66      	ldr	r3, [pc, #408]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ef      	beq.n	8002be8 <HAL_RCC_OscConfig+0x5cc>
 8002c08:	e01b      	b.n	8002c42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c0a:	4b62      	ldr	r3, [pc, #392]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c10:	4a60      	ldr	r2, [pc, #384]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fa03 	bl	8001024 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c22:	f7fe f9ff 	bl	8001024 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0ff      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c34:	4b57      	ldr	r3, [pc, #348]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ef      	bne.n	8002c22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80f3 	beq.w	8002e32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	f040 80c9 	bne.w	8002de8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c56:	4b4f      	ldr	r3, [pc, #316]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d12c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	3b01      	subs	r3, #1
 8002c76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d123      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d113      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d109      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d06b      	beq.n	8002d9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d062      	beq.n	8002d90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cca:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0ac      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cda:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2d      	ldr	r2, [pc, #180]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002ce0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ce6:	f7fe f99d 	bl	8001024 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe f999 	bl	8001024 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e099      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0c:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <HAL_RCC_OscConfig+0x77c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d1c:	3a01      	subs	r2, #1
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d26:	0212      	lsls	r2, r2, #8
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d2e:	0852      	lsrs	r2, r2, #1
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0552      	lsls	r2, r2, #21
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d3a:	0852      	lsrs	r2, r2, #1
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0652      	lsls	r2, r2, #25
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d46:	06d2      	lsls	r2, r2, #27
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	4912      	ldr	r1, [pc, #72]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0f      	ldr	r2, [pc, #60]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a0c      	ldr	r2, [pc, #48]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d68:	f7fe f95c 	bl	8001024 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe f958 	bl	8001024 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e058      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <HAL_RCC_OscConfig+0x778>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d8e:	e050      	b.n	8002e32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e04f      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
 8002d94:	40021000 	.word	0x40021000
 8002d98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9c:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d144      	bne.n	8002e32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002da8:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a23      	ldr	r2, [pc, #140]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db4:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a20      	ldr	r2, [pc, #128]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dc0:	f7fe f930 	bl	8001024 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe f92c 	bl	8001024 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e02c      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x7ac>
 8002de6:	e024      	b.n	8002e32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d01f      	beq.n	8002e2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe f913 	bl	8001024 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe f90f 	bl	8001024 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e00f      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4905      	ldr	r1, [pc, #20]	@ (8002e3c <HAL_RCC_OscConfig+0x820>)
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_RCC_OscConfig+0x824>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
 8002e2c:	e001      	b.n	8002e32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	feeefffc 	.word	0xfeeefffc

08002e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0e7      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d910      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b72      	ldr	r3, [pc, #456]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4970      	ldr	r1, [pc, #448]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b6e      	ldr	r3, [pc, #440]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0cf      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4b66      	ldr	r3, [pc, #408]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d908      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b63      	ldr	r3, [pc, #396]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4960      	ldr	r1, [pc, #384]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d04c      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eca:	4b5a      	ldr	r3, [pc, #360]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d121      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0a6      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee2:	4b54      	ldr	r3, [pc, #336]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e09a      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002efa:	4b4e      	ldr	r3, [pc, #312]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e08e      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e086      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b46      	ldr	r3, [pc, #280]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4943      	ldr	r1, [pc, #268]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe f87a 	bl	8001024 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe f876 	bl	8001024 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e06e      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d208      	bcs.n	8002f8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b2e      	ldr	r3, [pc, #184]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	492b      	ldr	r1, [pc, #172]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8a:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d210      	bcs.n	8002fba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f98:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 0207 	bic.w	r2, r3, #7
 8002fa0:	4923      	ldr	r1, [pc, #140]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa8:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <HAL_RCC_ClockConfig+0x1ec>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e036      	b.n	8003028 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4918      	ldr	r1, [pc, #96]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe4:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4910      	ldr	r1, [pc, #64]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff8:	f000 f824 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	490b      	ldr	r1, [pc, #44]	@ (8003038 <HAL_RCC_ClockConfig+0x1f4>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
 8003014:	4a09      	ldr	r2, [pc, #36]	@ (800303c <HAL_RCC_ClockConfig+0x1f8>)
 8003016:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_ClockConfig+0x1fc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd feef 	bl	8000e00 <HAL_InitTick>
 8003022:	4603      	mov	r3, r0
 8003024:	72fb      	strb	r3, [r7, #11]

  return status;
 8003026:	7afb      	ldrb	r3, [r7, #11]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40022000 	.word	0x40022000
 8003034:	40021000 	.word	0x40021000
 8003038:	08007f70 	.word	0x08007f70
 800303c:	20000000 	.word	0x20000000
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003052:	4b3e      	ldr	r3, [pc, #248]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305c:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x34>
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d121      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d11e      	bne.n	80030b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003078:	4b34      	ldr	r3, [pc, #208]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d107      	bne.n	8003094 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003084:	4b31      	ldr	r3, [pc, #196]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e005      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003094:	4b2d      	ldr	r3, [pc, #180]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030bc:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x110>)
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	e004      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c8:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d134      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030d2:	4b1e      	ldr	r3, [pc, #120]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0xa6>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d003      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0xac>
 80030e8:	e005      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ec:	617b      	str	r3, [r7, #20]
      break;
 80030ee:	e005      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030f0:	4b19      	ldr	r3, [pc, #100]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x114>)
 80030f2:	617b      	str	r3, [r7, #20]
      break;
 80030f4:	e002      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	617b      	str	r3, [r7, #20]
      break;
 80030fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030fc:	4b13      	ldr	r3, [pc, #76]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800310a:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	fb03 f202 	mul.w	r2, r3, r2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003122:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <HAL_RCC_GetSysClockFreq+0x108>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	0e5b      	lsrs	r3, r3, #25
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	3301      	adds	r3, #1
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800313c:	69bb      	ldr	r3, [r7, #24]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	08007f88 	.word	0x08007f88
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003178:	f7ff fff0 	bl	800315c <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4904      	ldr	r1, [pc, #16]	@ (800319c <HAL_RCC_GetPCLK1Freq+0x28>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	08007f80 	.word	0x08007f80

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031a4:	f7ff ffda 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0adb      	lsrs	r3, r3, #11
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4904      	ldr	r1, [pc, #16]	@ (80031c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08007f80 	.word	0x08007f80

080031cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	220f      	movs	r2, #15
 80031da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80031dc:	4b12      	ldr	r3, [pc, #72]	@ (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80031e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800320e:	4b07      	ldr	r3, [pc, #28]	@ (800322c <HAL_RCC_GetClockConfig+0x60>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0207 	and.w	r2, r3, #7
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	40022000 	.word	0x40022000

08003230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800323c:	4b2a      	ldr	r3, [pc, #168]	@ (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003248:	f7ff f984 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 800324c:	6178      	str	r0, [r7, #20]
 800324e:	e014      	b.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	4a24      	ldr	r2, [pc, #144]	@ (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	@ 0x58
 800325c:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003268:	f7ff f974 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 800326c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	4a1d      	ldr	r2, [pc, #116]	@ (80032e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003280:	d10b      	bne.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d919      	bls.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2ba0      	cmp	r3, #160	@ 0xa0
 800328c:	d902      	bls.n	8003294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800328e:	2302      	movs	r3, #2
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e013      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e010      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b80      	cmp	r3, #128	@ 0x80
 800329e:	d902      	bls.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032a0:	2303      	movs	r3, #3
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e00a      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b80      	cmp	r3, #128	@ 0x80
 80032aa:	d102      	bne.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ac:	2302      	movs	r3, #2
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e004      	b.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b70      	cmp	r3, #112	@ 0x70
 80032b6:	d101      	bne.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 0207 	bic.w	r2, r3, #7
 80032c4:	4909      	ldr	r1, [pc, #36]	@ (80032ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032cc:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fc:	2300      	movs	r3, #0
 80032fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003308:	2b00      	cmp	r3, #0
 800330a:	d031      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003310:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003314:	d01a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003316:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800331a:	d814      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003324:	d10f      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003326:	4b5d      	ldr	r3, [pc, #372]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a5c      	ldr	r2, [pc, #368]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003332:	e00c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f9de 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	74fb      	strb	r3, [r7, #19]
      break;
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800334c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003354:	4b51      	ldr	r3, [pc, #324]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003362:	494e      	ldr	r1, [pc, #312]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800336a:	e001      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 809e 	beq.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003382:	4b46      	ldr	r3, [pc, #280]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003398:	4b40      	ldr	r3, [pc, #256]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	4a3f      	ldr	r2, [pc, #252]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800339e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a4:	4b3d      	ldr	r3, [pc, #244]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b4:	4b3a      	ldr	r3, [pc, #232]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a39      	ldr	r2, [pc, #228]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c0:	f7fd fe30 	bl	8001024 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033c6:	e009      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c8:	f7fd fe2c 	bl	8001024 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d902      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	74fb      	strb	r3, [r7, #19]
        break;
 80033da:	e005      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033dc:	4b30      	ldr	r3, [pc, #192]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ef      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d15a      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ee:	4b2b      	ldr	r3, [pc, #172]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01e      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	429a      	cmp	r2, r3
 8003408:	d019      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800340a:	4b24      	ldr	r3, [pc, #144]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003414:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003416:	4b21      	ldr	r3, [pc, #132]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	4a1f      	ldr	r2, [pc, #124]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800341e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003426:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342c:	4a1b      	ldr	r2, [pc, #108]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003436:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd fdec 	bl	8001024 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344e:	e00b      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fd fde8 	bl	8001024 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d902      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	74fb      	strb	r3, [r7, #19]
            break;
 8003466:	e006      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ec      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348a:	4904      	ldr	r1, [pc, #16]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003492:	e009      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a8:	7c7b      	ldrb	r3, [r7, #17]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b8a      	ldr	r3, [pc, #552]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	4a89      	ldr	r2, [pc, #548]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c6:	4b84      	ldr	r3, [pc, #528]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f023 0203 	bic.w	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4980      	ldr	r1, [pc, #512]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034e8:	4b7b      	ldr	r3, [pc, #492]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f023 020c 	bic.w	r2, r3, #12
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	4978      	ldr	r1, [pc, #480]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800350a:	4b73      	ldr	r3, [pc, #460]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003518:	496f      	ldr	r1, [pc, #444]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352c:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353a:	4967      	ldr	r1, [pc, #412]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800354e:	4b62      	ldr	r3, [pc, #392]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	495e      	ldr	r1, [pc, #376]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	4956      	ldr	r1, [pc, #344]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003592:	4b51      	ldr	r3, [pc, #324]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	494d      	ldr	r1, [pc, #308]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d028      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b4:	4b48      	ldr	r3, [pc, #288]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	4945      	ldr	r1, [pc, #276]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035d2:	d106      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d4:	4b40      	ldr	r3, [pc, #256]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a3f      	ldr	r2, [pc, #252]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035de:	60d3      	str	r3, [r2, #12]
 80035e0:	e011      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ea:	d10c      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f882 	bl	80036fc <RCCEx_PLLSAI1_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003612:	4b31      	ldr	r3, [pc, #196]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003620:	492d      	ldr	r1, [pc, #180]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003630:	d106      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003632:	4b29      	ldr	r3, [pc, #164]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a28      	ldr	r2, [pc, #160]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003638:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800363c:	60d3      	str	r3, [r2, #12]
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f853 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01c      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003676:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367e:	4916      	ldr	r1, [pc, #88]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800368e:	d10c      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f830 	bl	80036fc <RCCEx_PLLSAI1_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	4904      	ldr	r1, [pc, #16]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036e0:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000

080036fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800370a:	4b74      	ldr	r3, [pc, #464]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003716:	4b71      	ldr	r3, [pc, #452]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0203 	and.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d10d      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
       ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800372e:	4b6b      	ldr	r3, [pc, #428]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
       ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d047      	beq.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e044      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d018      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x86>
 8003750:	2b03      	cmp	r3, #3
 8003752:	d825      	bhi.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x62>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d009      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x74>
 800375c:	e020      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800375e:	4b5f      	ldr	r3, [pc, #380]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11d      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e01a      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003770:	4b5a      	ldr	r3, [pc, #360]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e013      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003782:	4b56      	ldr	r3, [pc, #344]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800378e:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800379e:	e006      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e004      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037b6:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	430b      	orrs	r3, r1
 80037cc:	4943      	ldr	r1, [pc, #268]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d17c      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d8:	4b40      	ldr	r3, [pc, #256]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3f      	ldr	r2, [pc, #252]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80037de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fd fc1e 	bl	8001024 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fd fc1a 	bl	8001024 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
        break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ef      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d15f      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d110      	bne.n	800383a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003818:	4b30      	ldr	r3, [pc, #192]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003820:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6892      	ldr	r2, [r2, #8]
 8003828:	0211      	lsls	r1, r2, #8
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	06d2      	lsls	r2, r2, #27
 8003830:	430a      	orrs	r2, r1
 8003832:	492a      	ldr	r1, [pc, #168]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	610b      	str	r3, [r1, #16]
 8003838:	e027      	b.n	800388a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d112      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003848:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6892      	ldr	r2, [r2, #8]
 8003850:	0211      	lsls	r1, r2, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6912      	ldr	r2, [r2, #16]
 8003856:	0852      	lsrs	r2, r2, #1
 8003858:	3a01      	subs	r2, #1
 800385a:	0552      	lsls	r2, r2, #21
 800385c:	430a      	orrs	r2, r1
 800385e:	491f      	ldr	r1, [pc, #124]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
 8003864:	e011      	b.n	800388a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003866:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800386e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	0211      	lsls	r1, r2, #8
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6952      	ldr	r2, [r2, #20]
 800387c:	0852      	lsrs	r2, r2, #1
 800387e:	3a01      	subs	r2, #1
 8003880:	0652      	lsls	r2, r2, #25
 8003882:	430a      	orrs	r2, r1
 8003884:	4915      	ldr	r1, [pc, #84]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800388a:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003890:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003894:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd fbc5 	bl	8001024 <HAL_GetTick>
 800389a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389c:	e009      	b.n	80038b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800389e:	f7fd fbc1 	bl	8001024 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d902      	bls.n	80038b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	73fb      	strb	r3, [r7, #15]
          break;
 80038b0:	e005      	b.n	80038be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b2:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ef      	beq.n	800389e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4903      	ldr	r1, [pc, #12]	@ (80038dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e049      	b.n	8003986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd f9ca 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 fbf8 	bl	8004114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d001      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e03b      	b.n	8003a20 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a19      	ldr	r2, [pc, #100]	@ (8003a2c <HAL_TIM_Base_Start_IT+0x9c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_TIM_Base_Start_IT+0x4e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d004      	beq.n	80039de <HAL_TIM_Base_Start_IT+0x4e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a15      	ldr	r2, [pc, #84]	@ (8003a30 <HAL_TIM_Base_Start_IT+0xa0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d115      	bne.n	8003a0a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <HAL_TIM_Base_Start_IT+0xa4>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d015      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x8c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f6:	d011      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a08:	e008      	b.n	8003a1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e000      	b.n	8003a1e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40014000 	.word	0x40014000
 8003a34:	00010007 	.word	0x00010007

08003a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e049      	b.n	8003ade <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f841 	bl	8003ae6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 fb4c 	bl	8004114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01b      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0202 	mvn.w	r2, #2
 8003b2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fac6 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003b4a:	e005      	b.n	8003b58 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fab8 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fac9 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01b      	beq.n	8003baa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0204 	mvn.w	r2, #4
 8003b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 faa0 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003b96:	e005      	b.n	8003ba4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fa92 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 faa3 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01b      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f06f 0208 	mvn.w	r2, #8
 8003bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fa7a 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003be2:	e005      	b.n	8003bf0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fa6c 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa7d 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01b      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0210 	mvn.w	r2, #16
 8003c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2208      	movs	r2, #8
 8003c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa54 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003c2e:	e005      	b.n	8003c3c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fa46 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa57 	bl	80040ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00c      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0201 	mvn.w	r2, #1
 8003c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7fc ff49 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00c      	beq.n	8003c94 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 feb0 	bl	80049f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fea8 	bl	8004a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa11 	bl	80040fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0220 	mvn.w	r2, #32
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fe70 	bl	80049e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e0ff      	b.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b14      	cmp	r3, #20
 8003d32:	f200 80f0 	bhi.w	8003f16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d36:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003f17 	.word	0x08003f17
 8003d44:	08003f17 	.word	0x08003f17
 8003d48:	08003f17 	.word	0x08003f17
 8003d4c:	08003dd1 	.word	0x08003dd1
 8003d50:	08003f17 	.word	0x08003f17
 8003d54:	08003f17 	.word	0x08003f17
 8003d58:	08003f17 	.word	0x08003f17
 8003d5c:	08003e13 	.word	0x08003e13
 8003d60:	08003f17 	.word	0x08003f17
 8003d64:	08003f17 	.word	0x08003f17
 8003d68:	08003f17 	.word	0x08003f17
 8003d6c:	08003e53 	.word	0x08003e53
 8003d70:	08003f17 	.word	0x08003f17
 8003d74:	08003f17 	.word	0x08003f17
 8003d78:	08003f17 	.word	0x08003f17
 8003d7c:	08003e95 	.word	0x08003e95
 8003d80:	08003f17 	.word	0x08003f17
 8003d84:	08003f17 	.word	0x08003f17
 8003d88:	08003f17 	.word	0x08003f17
 8003d8c:	08003ed5 	.word	0x08003ed5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fa2c 	bl	80041f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]
      break;
 8003dce:	e0a5      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fa88 	bl	80042ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6999      	ldr	r1, [r3, #24]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	619a      	str	r2, [r3, #24]
      break;
 8003e10:	e084      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fae1 	bl	80043e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0208 	orr.w	r2, r2, #8
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0204 	bic.w	r2, r2, #4
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	61da      	str	r2, [r3, #28]
      break;
 8003e50:	e064      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fb39 	bl	80044d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	021a      	lsls	r2, r3, #8
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	61da      	str	r2, [r3, #28]
      break;
 8003e92:	e043      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fb76 	bl	800458c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ed2:	e023      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fbae 	bl	800463c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f14:	e002      	b.n	8003f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop

08003f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIM_ConfigClockSource+0x1c>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e0b6      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x18a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f88:	d03e      	beq.n	8004008 <HAL_TIM_ConfigClockSource+0xd8>
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8e:	f200 8087 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	f000 8086 	beq.w	80040a6 <HAL_TIM_ConfigClockSource+0x176>
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9e:	d87f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003fa0:	2b70      	cmp	r3, #112	@ 0x70
 8003fa2:	d01a      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0xaa>
 8003fa4:	2b70      	cmp	r3, #112	@ 0x70
 8003fa6:	d87b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003fa8:	2b60      	cmp	r3, #96	@ 0x60
 8003faa:	d050      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x11e>
 8003fac:	2b60      	cmp	r3, #96	@ 0x60
 8003fae:	d877      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003fb0:	2b50      	cmp	r3, #80	@ 0x50
 8003fb2:	d03c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0xfe>
 8003fb4:	2b50      	cmp	r3, #80	@ 0x50
 8003fb6:	d873      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d058      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x13e>
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	d86f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003fc0:	2b30      	cmp	r3, #48	@ 0x30
 8003fc2:	d064      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x15e>
 8003fc4:	2b30      	cmp	r3, #48	@ 0x30
 8003fc6:	d86b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d060      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x15e>
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d867      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05c      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x15e>
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d05a      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x15e>
 8003fd8:	e062      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fea:	f000 fbfb 	bl	80047e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	609a      	str	r2, [r3, #8]
      break;
 8004006:	e04f      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004018:	f000 fbe4 	bl	80047e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800402a:	609a      	str	r2, [r3, #8]
      break;
 800402c:	e03c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	461a      	mov	r2, r3
 800403c:	f000 fb58 	bl	80046f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2150      	movs	r1, #80	@ 0x50
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fbb1 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 800404c:	e02c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 fb77 	bl	800474e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2160      	movs	r1, #96	@ 0x60
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fba1 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 800406c:	e01c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	461a      	mov	r2, r3
 800407c:	f000 fb38 	bl	80046f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2140      	movs	r1, #64	@ 0x40
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fb91 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 800408c:	e00c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f000 fb88 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 800409e:	e003      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      break;
 80040a4:	e000      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a30      	ldr	r2, [pc, #192]	@ (80041e8 <TIM_Base_SetConfig+0xd4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_Base_SetConfig+0x20>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004132:	d108      	bne.n	8004146 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a27      	ldr	r2, [pc, #156]	@ (80041e8 <TIM_Base_SetConfig+0xd4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_Base_SetConfig+0x52>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004154:	d007      	beq.n	8004166 <TIM_Base_SetConfig+0x52>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <TIM_Base_SetConfig+0xd8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_Base_SetConfig+0x52>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a23      	ldr	r2, [pc, #140]	@ (80041f0 <TIM_Base_SetConfig+0xdc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <TIM_Base_SetConfig+0xd4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_Base_SetConfig+0xa0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a11      	ldr	r2, [pc, #68]	@ (80041ec <TIM_Base_SetConfig+0xd8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0xa0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a10      	ldr	r2, [pc, #64]	@ (80041f0 <TIM_Base_SetConfig+0xdc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d103      	bne.n	80041bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f023 0201 	bic.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	611a      	str	r2, [r3, #16]
  }
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400

080041f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f023 0201 	bic.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f023 0302 	bic.w	r3, r3, #2
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <TIM_OC1_SetConfig+0xec>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <TIM_OC1_SetConfig+0x70>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a23      	ldr	r2, [pc, #140]	@ (80042e4 <TIM_OC1_SetConfig+0xf0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC1_SetConfig+0x70>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a22      	ldr	r2, [pc, #136]	@ (80042e8 <TIM_OC1_SetConfig+0xf4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10c      	bne.n	800427e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0308 	bic.w	r3, r3, #8
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a17      	ldr	r2, [pc, #92]	@ (80042e0 <TIM_OC1_SetConfig+0xec>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_OC1_SetConfig+0xa2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a16      	ldr	r2, [pc, #88]	@ (80042e4 <TIM_OC1_SetConfig+0xf0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_OC1_SetConfig+0xa2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <TIM_OC1_SetConfig+0xf4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d111      	bne.n	80042ba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800429c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	621a      	str	r2, [r3, #32]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400

080042ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 0210 	bic.w	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0320 	bic.w	r3, r3, #32
 800433a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a22      	ldr	r2, [pc, #136]	@ (80043d4 <TIM_OC2_SetConfig+0xe8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10d      	bne.n	800436c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a19      	ldr	r2, [pc, #100]	@ (80043d4 <TIM_OC2_SetConfig+0xe8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_OC2_SetConfig+0x98>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <TIM_OC2_SetConfig+0xec>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_OC2_SetConfig+0x98>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a17      	ldr	r2, [pc, #92]	@ (80043dc <TIM_OC2_SetConfig+0xf0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d113      	bne.n	80043ac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800438a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400

080043e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800442c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a21      	ldr	r2, [pc, #132]	@ (80044c4 <TIM_OC3_SetConfig+0xe4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10d      	bne.n	800445e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800445c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a18      	ldr	r2, [pc, #96]	@ (80044c4 <TIM_OC3_SetConfig+0xe4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_OC3_SetConfig+0x96>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <TIM_OC3_SetConfig+0xe8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_OC3_SetConfig+0x96>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <TIM_OC3_SetConfig+0xec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d113      	bne.n	800449e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800447c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400

080044d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800451e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	031b      	lsls	r3, r3, #12
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <TIM_OC4_SetConfig+0xb0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_OC4_SetConfig+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <TIM_OC4_SetConfig+0xb4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_OC4_SetConfig+0x74>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a12      	ldr	r2, [pc, #72]	@ (8004588 <TIM_OC4_SetConfig+0xb8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d109      	bne.n	8004558 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800454a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40014000 	.word	0x40014000
 8004588:	40014400 	.word	0x40014400

0800458c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80045d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <TIM_OC5_SetConfig+0xa4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <TIM_OC5_SetConfig+0x6a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <TIM_OC5_SetConfig+0xa8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_OC5_SetConfig+0x6a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a11      	ldr	r2, [pc, #68]	@ (8004638 <TIM_OC5_SetConfig+0xac>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d109      	bne.n	800460a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400

0800463c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	051b      	lsls	r3, r3, #20
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <TIM_OC6_SetConfig+0xa8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_OC6_SetConfig+0x6c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a13      	ldr	r2, [pc, #76]	@ (80046e8 <TIM_OC6_SetConfig+0xac>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_OC6_SetConfig+0x6c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a12      	ldr	r2, [pc, #72]	@ (80046ec <TIM_OC6_SetConfig+0xb0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d109      	bne.n	80046bc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400

080046f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f023 0201 	bic.w	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800471a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 030a 	bic.w	r3, r3, #10
 800472c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474e:	b480      	push	{r7}
 8004750:	b087      	sub	sp, #28
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 0210 	bic.w	r2, r3, #16
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800478a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f043 0307 	orr.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	021a      	lsls	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	431a      	orrs	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e04f      	b.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a21      	ldr	r2, [pc, #132]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800486c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a14      	ldr	r2, [pc, #80]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a4:	d004      	beq.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a10      	ldr	r2, [pc, #64]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10c      	bne.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40014000 	.word	0x40014000

080048f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e060      	b.n	80049ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a14      	ldr	r2, [pc, #80]	@ (80049dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d115      	bne.n	80049bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	051b      	lsls	r3, r3, #20
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00

080049e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e040      	b.n	8004ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc f986 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	@ 0x24
 8004a48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa54 	bl	8004f10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f825 	bl	8004ab8 <UART_SetConfig>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e01b      	b.n	8004ab0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fad3 	bl	8005054 <UART_CheckIdleState>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004abc:	b08a      	sub	sp, #40	@ 0x28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4bb4      	ldr	r3, [pc, #720]	@ (8004db8 <UART_SetConfig+0x300>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4aa9      	ldr	r2, [pc, #676]	@ (8004dbc <UART_SetConfig+0x304>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	4313      	orrs	r3, r2
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4aa0      	ldr	r2, [pc, #640]	@ (8004dc0 <UART_SetConfig+0x308>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d126      	bne.n	8004b90 <UART_SetConfig+0xd8>
 8004b42:	4ba0      	ldr	r3, [pc, #640]	@ (8004dc4 <UART_SetConfig+0x30c>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d81b      	bhi.n	8004b88 <UART_SetConfig+0xd0>
 8004b50:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0xa0>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6e:	e080      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004b70:	2302      	movs	r3, #2
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b76:	e07c      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e078      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b86:	e074      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e070      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a8c      	ldr	r2, [pc, #560]	@ (8004dc8 <UART_SetConfig+0x310>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d138      	bne.n	8004c0c <UART_SetConfig+0x154>
 8004b9a:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc4 <UART_SetConfig+0x30c>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	d82d      	bhi.n	8004c04 <UART_SetConfig+0x14c>
 8004ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <UART_SetConfig+0xf8>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004c05 	.word	0x08004c05
 8004bb8:	08004c05 	.word	0x08004c05
 8004bbc:	08004c05 	.word	0x08004c05
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c05 	.word	0x08004c05
 8004bc8:	08004c05 	.word	0x08004c05
 8004bcc:	08004c05 	.word	0x08004c05
 8004bd0:	08004bed 	.word	0x08004bed
 8004bd4:	08004c05 	.word	0x08004c05
 8004bd8:	08004c05 	.word	0x08004c05
 8004bdc:	08004c05 	.word	0x08004c05
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bea:	e042      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004bec:	2302      	movs	r3, #2
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf2:	e03e      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfa:	e03a      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c02:	e036      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004c04:	2310      	movs	r3, #16
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e032      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a6a      	ldr	r2, [pc, #424]	@ (8004dbc <UART_SetConfig+0x304>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d12a      	bne.n	8004c6c <UART_SetConfig+0x1b4>
 8004c16:	4b6b      	ldr	r3, [pc, #428]	@ (8004dc4 <UART_SetConfig+0x30c>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c24:	d01a      	beq.n	8004c5c <UART_SetConfig+0x1a4>
 8004c26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c2a:	d81b      	bhi.n	8004c64 <UART_SetConfig+0x1ac>
 8004c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c30:	d00c      	beq.n	8004c4c <UART_SetConfig+0x194>
 8004c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c36:	d815      	bhi.n	8004c64 <UART_SetConfig+0x1ac>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <UART_SetConfig+0x18c>
 8004c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c40:	d008      	beq.n	8004c54 <UART_SetConfig+0x19c>
 8004c42:	e00f      	b.n	8004c64 <UART_SetConfig+0x1ac>
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4a:	e012      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c52:	e00e      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004c54:	2304      	movs	r3, #4
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	e00a      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e006      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e002      	b.n	8004c72 <UART_SetConfig+0x1ba>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a51      	ldr	r2, [pc, #324]	@ (8004dbc <UART_SetConfig+0x304>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d17a      	bne.n	8004d72 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d824      	bhi.n	8004cce <UART_SetConfig+0x216>
 8004c84:	a201      	add	r2, pc, #4	@ (adr r2, 8004c8c <UART_SetConfig+0x1d4>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004cbf 	.word	0x08004cbf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004ccf 	.word	0x08004ccf
 8004ca8:	08004ccf 	.word	0x08004ccf
 8004cac:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb0:	f7fe fa60 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004cb4:	61f8      	str	r0, [r7, #28]
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b44      	ldr	r3, [pc, #272]	@ (8004dcc <UART_SetConfig+0x314>)
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fe f9c1 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8004cc2:	61f8      	str	r0, [r7, #28]
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8107 	beq.w	8004ef0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d305      	bcc.n	8004cfe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d903      	bls.n	8004d06 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d04:	e0f4      	b.n	8004ef0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	4615      	mov	r5, r2
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	022b      	lsls	r3, r5, #8
 8004d18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d1c:	0222      	lsls	r2, r4, #8
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	6849      	ldr	r1, [r1, #4]
 8004d22:	0849      	lsrs	r1, r1, #1
 8004d24:	2000      	movs	r0, #0
 8004d26:	4688      	mov	r8, r1
 8004d28:	4681      	mov	r9, r0
 8004d2a:	eb12 0a08 	adds.w	sl, r2, r8
 8004d2e:	eb43 0b09 	adc.w	fp, r3, r9
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d40:	4650      	mov	r0, sl
 8004d42:	4659      	mov	r1, fp
 8004d44:	f7fb fa44 	bl	80001d0 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d56:	d308      	bcc.n	8004d6a <UART_SetConfig+0x2b2>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5e:	d204      	bcs.n	8004d6a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	60da      	str	r2, [r3, #12]
 8004d68:	e0c2      	b.n	8004ef0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d70:	e0be      	b.n	8004ef0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d7a:	d16a      	bne.n	8004e52 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d834      	bhi.n	8004dee <UART_SetConfig+0x336>
 8004d84:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <UART_SetConfig+0x2d4>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004dd1 	.word	0x08004dd1
 8004d94:	08004dd9 	.word	0x08004dd9
 8004d98:	08004def 	.word	0x08004def
 8004d9c:	08004ddf 	.word	0x08004ddf
 8004da0:	08004def 	.word	0x08004def
 8004da4:	08004def 	.word	0x08004def
 8004da8:	08004def 	.word	0x08004def
 8004dac:	08004de7 	.word	0x08004de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db0:	f7fe f9e0 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004db4:	61f8      	str	r0, [r7, #28]
        break;
 8004db6:	e020      	b.n	8004dfa <UART_SetConfig+0x342>
 8004db8:	efff69f3 	.word	0xefff69f3
 8004dbc:	40008000 	.word	0x40008000
 8004dc0:	40013800 	.word	0x40013800
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd0:	f7fe f9e6 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8004dd4:	61f8      	str	r0, [r7, #28]
        break;
 8004dd6:	e010      	b.n	8004dfa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8004f0c <UART_SetConfig+0x454>)
 8004dda:	61fb      	str	r3, [r7, #28]
        break;
 8004ddc:	e00d      	b.n	8004dfa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fe f931 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8004de2:	61f8      	str	r0, [r7, #28]
        break;
 8004de4:	e009      	b.n	8004dfa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	61fb      	str	r3, [r7, #28]
        break;
 8004dec:	e005      	b.n	8004dfa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004df8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d077      	beq.n	8004ef0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	005a      	lsls	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	441a      	add	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b0f      	cmp	r3, #15
 8004e1a:	d916      	bls.n	8004e4a <UART_SetConfig+0x392>
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e22:	d212      	bcs.n	8004e4a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f023 030f 	bic.w	r3, r3, #15
 8004e2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	8afb      	ldrh	r3, [r7, #22]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	8afa      	ldrh	r2, [r7, #22]
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	e052      	b.n	8004ef0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e50:	e04e      	b.n	8004ef0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d827      	bhi.n	8004eaa <UART_SetConfig+0x3f2>
 8004e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <UART_SetConfig+0x3a8>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004eab 	.word	0x08004eab
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004eab 	.word	0x08004eab
 8004e78:	08004eab 	.word	0x08004eab
 8004e7c:	08004eab 	.word	0x08004eab
 8004e80:	08004ea3 	.word	0x08004ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe f976 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004e88:	61f8      	str	r0, [r7, #28]
        break;
 8004e8a:	e014      	b.n	8004eb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e8c:	f7fe f988 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8004e90:	61f8      	str	r0, [r7, #28]
        break;
 8004e92:	e010      	b.n	8004eb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e94:	4b1d      	ldr	r3, [pc, #116]	@ (8004f0c <UART_SetConfig+0x454>)
 8004e96:	61fb      	str	r3, [r7, #28]
        break;
 8004e98:	e00d      	b.n	8004eb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9a:	f7fe f8d3 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8004e9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ea0:	e009      	b.n	8004eb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ea6:	61fb      	str	r3, [r7, #28]
        break;
 8004ea8:	e005      	b.n	8004eb6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004eb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d019      	beq.n	8004ef0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	085a      	lsrs	r2, r3, #1
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	441a      	add	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b0f      	cmp	r3, #15
 8004ed4:	d909      	bls.n	8004eea <UART_SetConfig+0x432>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004edc:	d205      	bcs.n	8004eea <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60da      	str	r2, [r3, #12]
 8004ee8:	e002      	b.n	8004ef0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004efc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3728      	adds	r7, #40	@ 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0a:	bf00      	nop
 8004f0c:	00f42400 	.word	0x00f42400

08004f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01a      	beq.n	8005026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800500e:	d10a      	bne.n	8005026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b098      	sub	sp, #96	@ 0x60
 8005058:	af02      	add	r7, sp, #8
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005064:	f7fb ffde 	bl	8001024 <HAL_GetTick>
 8005068:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b08      	cmp	r3, #8
 8005076:	d12e      	bne.n	80050d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f88c 	bl	80051a4 <UART_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d021      	beq.n	80050d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e6      	bne.n	8005092 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e062      	b.n	800519c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d149      	bne.n	8005178 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f856 	bl	80051a4 <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d03c      	beq.n	8005178 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	623b      	str	r3, [r7, #32]
   return(result);
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511c:	633b      	str	r3, [r7, #48]	@ 0x30
 800511e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e6      	bne.n	80050fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3308      	adds	r3, #8
 8005136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3308      	adds	r3, #8
 800514e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	617b      	str	r3, [r7, #20]
   return(result);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e011      	b.n	800519c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3758      	adds	r7, #88	@ 0x58
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	e04f      	b.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d04b      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fb ff31 	bl	8001024 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e04e      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d037      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b80      	cmp	r3, #128	@ 0x80
 80051ea:	d034      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b40      	cmp	r3, #64	@ 0x40
 80051f0:	d031      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d110      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2208      	movs	r2, #8
 8005206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f838 	bl	800527e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2208      	movs	r2, #8
 8005212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e029      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800522c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005230:	d111      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800523a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f81e 	bl	800527e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e00f      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4013      	ands	r3, r2
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	429a      	cmp	r2, r3
 8005272:	d0a0      	beq.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800527e:	b480      	push	{r7}
 8005280:	b095      	sub	sp, #84	@ 0x54
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800529a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e6      	bne.n	8005286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e5      	bne.n	80052b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d118      	bne.n	8005326 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	60bb      	str	r3, [r7, #8]
   return(result);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f023 0310 	bic.w	r3, r3, #16
 8005308:	647b      	str	r3, [r7, #68]	@ 0x44
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6979      	ldr	r1, [r7, #20]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	613b      	str	r3, [r7, #16]
   return(result);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e6      	bne.n	80052f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800533a:	bf00      	nop
 800533c:	3754      	adds	r7, #84	@ 0x54
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	4603      	mov	r3, r0
 800534e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005358:	2b84      	cmp	r3, #132	@ 0x84
 800535a:	d005      	beq.n	8005368 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800535c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	3303      	adds	r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005368:	68fb      	ldr	r3, [r7, #12]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800537a:	f000 fff3 	bl	8006364 <vTaskStartScheduler>
  
  return osOK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}

08005384 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af04      	add	r7, sp, #16
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d020      	beq.n	80053d8 <osThreadCreate+0x54>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01c      	beq.n	80053d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685c      	ldr	r4, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691e      	ldr	r6, [r3, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ffc8 	bl	8005346 <makeFreeRtosPriority>
 80053b6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053c0:	9202      	str	r2, [sp, #8]
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	9100      	str	r1, [sp, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	4632      	mov	r2, r6
 80053ca:	4629      	mov	r1, r5
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 fde3 	bl	8005f98 <xTaskCreateStatic>
 80053d2:	4603      	mov	r3, r0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e01c      	b.n	8005412 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685c      	ldr	r4, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053e4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff ffaa 	bl	8005346 <makeFreeRtosPriority>
 80053f2:	4602      	mov	r2, r0
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	9200      	str	r2, [sp, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4632      	mov	r2, r6
 8005400:	4629      	mov	r1, r5
 8005402:	4620      	mov	r0, r4
 8005404:	f000 fe28 	bl	8006058 <xTaskCreate>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800540e:	2300      	movs	r3, #0
 8005410:	e000      	b.n	8005414 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005412:	68fb      	ldr	r3, [r7, #12]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800541c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <osDelay+0x16>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	e000      	b.n	8005434 <osDelay+0x18>
 8005432:	2301      	movs	r3, #1
 8005434:	4618      	mov	r0, r3
 8005436:	f000 ff5f 	bl	80062f8 <vTaskDelay>
  
  return osOK;
 800543a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f103 0208 	add.w	r2, r3, #8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f103 0208 	add.w	r2, r3, #8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f103 0208 	add.w	r2, r3, #8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d103      	bne.n	8005506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e00c      	b.n	8005520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3308      	adds	r3, #8
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e002      	b.n	8005514 <vListInsert+0x2e>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	429a      	cmp	r2, r3
 800551e:	d2f6      	bcs.n	800550e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6892      	ldr	r2, [r2, #8]
 800556e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6852      	ldr	r2, [r2, #4]
 8005578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	d103      	bne.n	800558c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055d8:	f002 f89e 	bl	8007718 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	68f9      	ldr	r1, [r7, #12]
 80055e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	441a      	add	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005608:	3b01      	subs	r3, #1
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	22ff      	movs	r2, #255	@ 0xff
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	22ff      	movs	r2, #255	@ 0xff
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d114      	bne.n	8005658 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01a      	beq.n	800566c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3310      	adds	r3, #16
 800563a:	4618      	mov	r0, r3
 800563c:	f001 f92e 	bl	800689c <xTaskRemoveFromEventList>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d012      	beq.n	800566c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <xQueueGenericReset+0xd0>)
 8005648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	e009      	b.n	800566c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3310      	adds	r3, #16
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fef1 	bl	8005444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3324      	adds	r3, #36	@ 0x24
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff feec 	bl	8005444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800566c:	f002 f886 	bl	800777c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005670:	2301      	movs	r3, #1
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08e      	sub	sp, #56	@ 0x38
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	e7fd      	b.n	80056a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <xQueueGenericCreateStatic+0x56>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <xQueueGenericCreateStatic+0x5a>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <xQueueGenericCreateStatic+0x5c>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	623b      	str	r3, [r7, #32]
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <xQueueGenericCreateStatic+0x84>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <xQueueGenericCreateStatic+0x88>
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <xQueueGenericCreateStatic+0x8a>
 8005708:	2300      	movs	r3, #0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	61fb      	str	r3, [r7, #28]
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	e7fd      	b.n	8005722 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005726:	2348      	movs	r3, #72	@ 0x48
 8005728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b48      	cmp	r3, #72	@ 0x48
 800572e:	d00b      	beq.n	8005748 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	61bb      	str	r3, [r7, #24]
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800574e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800575c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f805 	bl	800577a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005772:	4618      	mov	r0, r3
 8005774:	3730      	adds	r7, #48	@ 0x30
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e002      	b.n	800579c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057a8:	2101      	movs	r1, #1
 80057aa:	69b8      	ldr	r0, [r7, #24]
 80057ac:	f7ff fefe 	bl	80055ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	@ 0x38
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057c6:	2300      	movs	r3, #0
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <xQueueGenericSend+0x34>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <xQueueGenericSend+0x42>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <xQueueGenericSend+0x46>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueGenericSend+0x48>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10b      	bne.n	800581c <xQueueGenericSend+0x64>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005816:	bf00      	nop
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d103      	bne.n	800582a <xQueueGenericSend+0x72>
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <xQueueGenericSend+0x76>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueGenericSend+0x78>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericSend+0x94>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	623b      	str	r3, [r7, #32]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800584c:	f001 f9ec 	bl	8006c28 <xTaskGetSchedulerState>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <xQueueGenericSend+0xa4>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <xQueueGenericSend+0xa8>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <xQueueGenericSend+0xaa>
 8005860:	2300      	movs	r3, #0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <xQueueGenericSend+0xc6>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	61fb      	str	r3, [r7, #28]
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800587e:	f001 ff4b 	bl	8007718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <xQueueGenericSend+0xdc>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d129      	bne.n	80058e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800589a:	f000 fa0f 	bl	8005cbc <prvCopyDataToQueue>
 800589e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	3324      	adds	r3, #36	@ 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fff5 	bl	800689c <xTaskRemoveFromEventList>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058b8:	4b3f      	ldr	r3, [pc, #252]	@ (80059b8 <xQueueGenericSend+0x200>)
 80058ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	e00a      	b.n	80058e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058d0:	4b39      	ldr	r3, [pc, #228]	@ (80059b8 <xQueueGenericSend+0x200>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058e0:	f001 ff4c 	bl	800777c <vPortExitCritical>
				return pdPASS;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e063      	b.n	80059b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ee:	f001 ff45 	bl	800777c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e05c      	b.n	80059b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058fc:	f107 0314 	add.w	r3, r7, #20
 8005900:	4618      	mov	r0, r3
 8005902:	f001 f82f 	bl	8006964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005906:	2301      	movs	r3, #1
 8005908:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800590a:	f001 ff37 	bl	800777c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800590e:	f000 fd99 	bl	8006444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005912:	f001 ff01 	bl	8007718 <vPortEnterCritical>
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800591c:	b25b      	sxtb	r3, r3
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d103      	bne.n	800592c <xQueueGenericSend+0x174>
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005932:	b25b      	sxtb	r3, r3
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d103      	bne.n	8005942 <xQueueGenericSend+0x18a>
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005942:	f001 ff1b 	bl	800777c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005946:	1d3a      	adds	r2, r7, #4
 8005948:	f107 0314 	add.w	r3, r7, #20
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f001 f81e 	bl	8006990 <xTaskCheckForTimeOut>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d124      	bne.n	80059a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800595a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800595c:	f000 faa6 	bl	8005eac <prvIsQueueFull>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d018      	beq.n	8005998 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	3310      	adds	r3, #16
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 ff42 	bl	80067f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005976:	f000 fa31 	bl	8005ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800597a:	f000 fd71 	bl	8006460 <xTaskResumeAll>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f af7c 	bne.w	800587e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005986:	4b0c      	ldr	r3, [pc, #48]	@ (80059b8 <xQueueGenericSend+0x200>)
 8005988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	e772      	b.n	800587e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800599a:	f000 fa1f 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800599e:	f000 fd5f 	bl	8006460 <xTaskResumeAll>
 80059a2:	e76c      	b.n	800587e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059a6:	f000 fa19 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059aa:	f000 fd59 	bl	8006460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3738      	adds	r7, #56	@ 0x38
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b090      	sub	sp, #64	@ 0x40
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80059ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <xQueueGenericSendFromISR+0x3e>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xQueueGenericSendFromISR+0x42>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueGenericSendFromISR+0x44>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d103      	bne.n	8005a2a <xQueueGenericSendFromISR+0x6e>
 8005a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <xQueueGenericSendFromISR+0x72>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <xQueueGenericSendFromISR+0x74>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	623b      	str	r3, [r7, #32]
}
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	e7fd      	b.n	8005a48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a4c:	f001 ff44 	bl	80078d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a50:	f3ef 8211 	mrs	r2, BASEPRI
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61fa      	str	r2, [r7, #28]
 8005a66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d302      	bcc.n	8005a7e <xQueueGenericSendFromISR+0xc2>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d12f      	bne.n	8005ade <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a94:	f000 f912 	bl	8005cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d112      	bne.n	8005ac8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	3324      	adds	r3, #36	@ 0x24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fef4 	bl	800689c <xTaskRemoveFromEventList>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e007      	b.n	8005ad8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005acc:	3301      	adds	r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	b25a      	sxtb	r2, r3
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005adc:	e001      	b.n	8005ae2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005aec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3740      	adds	r7, #64	@ 0x40
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08c      	sub	sp, #48	@ 0x30
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <xQueueReceive+0x32>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	623b      	str	r3, [r7, #32]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <xQueueReceive+0x40>
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <xQueueReceive+0x44>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <xQueueReceive+0x46>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <xQueueReceive+0x62>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	61fb      	str	r3, [r7, #28]
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	e7fd      	b.n	8005b56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b5a:	f001 f865 	bl	8006c28 <xTaskGetSchedulerState>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <xQueueReceive+0x72>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <xQueueReceive+0x76>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <xQueueReceive+0x78>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <xQueueReceive+0x94>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61bb      	str	r3, [r7, #24]
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	e7fd      	b.n	8005b88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b8c:	f001 fdc4 	bl	8007718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01f      	beq.n	8005bdc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ba0:	f000 f8f6 	bl	8005d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00f      	beq.n	8005bd4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	3310      	adds	r3, #16
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fe6f 	bl	800689c <xTaskRemoveFromEventList>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8005cb8 <xQueueReceive+0x1c0>)
 8005bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bd4:	f001 fdd2 	bl	800777c <vPortExitCritical>
				return pdPASS;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e069      	b.n	8005cb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005be2:	f001 fdcb 	bl	800777c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e062      	b.n	8005cb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf0:	f107 0310 	add.w	r3, r7, #16
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 feb5 	bl	8006964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bfe:	f001 fdbd 	bl	800777c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c02:	f000 fc1f 	bl	8006444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c06:	f001 fd87 	bl	8007718 <vPortEnterCritical>
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c10:	b25b      	sxtb	r3, r3
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d103      	bne.n	8005c20 <xQueueReceive+0x128>
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d103      	bne.n	8005c36 <xQueueReceive+0x13e>
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c36:	f001 fda1 	bl	800777c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c3a:	1d3a      	adds	r2, r7, #4
 8005c3c:	f107 0310 	add.w	r3, r7, #16
 8005c40:	4611      	mov	r1, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fea4 	bl	8006990 <xTaskCheckForTimeOut>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d123      	bne.n	8005c96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c50:	f000 f916 	bl	8005e80 <prvIsQueueEmpty>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d017      	beq.n	8005c8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	3324      	adds	r3, #36	@ 0x24
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4611      	mov	r1, r2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fdc8 	bl	80067f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c6a:	f000 f8b7 	bl	8005ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c6e:	f000 fbf7 	bl	8006460 <xTaskResumeAll>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d189      	bne.n	8005b8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005c78:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb8 <xQueueReceive+0x1c0>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	e780      	b.n	8005b8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c8c:	f000 f8a6 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c90:	f000 fbe6 	bl	8006460 <xTaskResumeAll>
 8005c94:	e77a      	b.n	8005b8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c98:	f000 f8a0 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c9c:	f000 fbe0 	bl	8006460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ca2:	f000 f8ed 	bl	8005e80 <prvIsQueueEmpty>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f43f af6f 	beq.w	8005b8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3730      	adds	r7, #48	@ 0x30
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d14d      	bne.n	8005d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 ffbc 	bl	8006c64 <xTaskPriorityDisinherit>
 8005cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	e043      	b.n	8005d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d119      	bne.n	8005d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6858      	ldr	r0, [r3, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	461a      	mov	r2, r3
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	f002 f8a2 	bl	8007e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	441a      	add	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d32b      	bcc.n	8005d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	e026      	b.n	8005d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68d8      	ldr	r0, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	f002 f888 	bl	8007e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d48:	425b      	negs	r3, r3
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d207      	bcs.n	8005d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	425b      	negs	r3, r3
 8005d66:	441a      	add	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d105      	bne.n	8005d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d86:	697b      	ldr	r3, [r7, #20]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d018      	beq.n	8005dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	441a      	add	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d303      	bcc.n	8005dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68d9      	ldr	r1, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6838      	ldr	r0, [r7, #0]
 8005dd0:	f002 f83e 	bl	8007e50 <memcpy>
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005de4:	f001 fc98 	bl	8007718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005df0:	e011      	b.n	8005e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3324      	adds	r3, #36	@ 0x24
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fd4c 	bl	800689c <xTaskRemoveFromEventList>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e0a:	f000 fe25 	bl	8006a58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dce9      	bgt.n	8005df2 <prvUnlockQueue+0x16>
 8005e1e:	e000      	b.n	8005e22 <prvUnlockQueue+0x46>
					break;
 8005e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	22ff      	movs	r2, #255	@ 0xff
 8005e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e2a:	f001 fca7 	bl	800777c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e2e:	f001 fc73 	bl	8007718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e3a:	e011      	b.n	8005e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3310      	adds	r3, #16
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fd27 	bl	800689c <xTaskRemoveFromEventList>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e54:	f000 fe00 	bl	8006a58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dce9      	bgt.n	8005e3c <prvUnlockQueue+0x60>
 8005e68:	e000      	b.n	8005e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	22ff      	movs	r2, #255	@ 0xff
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e74:	f001 fc82 	bl	800777c <vPortExitCritical>
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e88:	f001 fc46 	bl	8007718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e001      	b.n	8005e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e9e:	f001 fc6d 	bl	800777c <vPortExitCritical>

	return xReturn;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005eb4:	f001 fc30 	bl	8007718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d102      	bne.n	8005eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e001      	b.n	8005ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ece:	f001 fc55 	bl	800777c <vPortExitCritical>

	return xReturn;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e014      	b.n	8005f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eec:	4a0f      	ldr	r2, [pc, #60]	@ (8005f2c <vQueueAddToRegistry+0x50>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ef8:	490c      	ldr	r1, [pc, #48]	@ (8005f2c <vQueueAddToRegistry+0x50>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f02:	4a0a      	ldr	r2, [pc, #40]	@ (8005f2c <vQueueAddToRegistry+0x50>)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f0e:	e006      	b.n	8005f1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b07      	cmp	r3, #7
 8005f1a:	d9e7      	bls.n	8005eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000990 	.word	0x20000990

08005f30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f40:	f001 fbea 	bl	8007718 <vPortEnterCritical>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d103      	bne.n	8005f5a <vQueueWaitForMessageRestricted+0x2a>
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	d103      	bne.n	8005f70 <vQueueWaitForMessageRestricted+0x40>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f70:	f001 fc04 	bl	800777c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3324      	adds	r3, #36	@ 0x24
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fc5d 	bl	8006844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f8a:	6978      	ldr	r0, [r7, #20]
 8005f8c:	f7ff ff26 	bl	8005ddc <prvUnlockQueue>
	}
 8005f90:	bf00      	nop
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	@ 0x38
 8005f9c:	af04      	add	r7, sp, #16
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	623b      	str	r3, [r7, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	61fb      	str	r3, [r7, #28]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fe2:	23a0      	movs	r3, #160	@ 0xa0
 8005fe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fea:	d00b      	beq.n	8006004 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	61bb      	str	r3, [r7, #24]
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006004:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01e      	beq.n	800604a <xTaskCreateStatic+0xb2>
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01b      	beq.n	800604a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	2202      	movs	r2, #2
 8006020:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006024:	2300      	movs	r3, #0
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	9302      	str	r3, [sp, #8]
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f851 	bl	80060e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006044:	f000 f8ee 	bl	8006224 <prvAddNewTaskToReadyList>
 8006048:	e001      	b.n	800604e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800604e:	697b      	ldr	r3, [r7, #20]
	}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	@ 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	@ 0x30
 800605c:	af04      	add	r7, sp, #16
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fc75 	bl	800795c <pvPortMalloc>
 8006072:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800607a:	20a0      	movs	r0, #160	@ 0xa0
 800607c:	f001 fc6e 	bl	800795c <pvPortMalloc>
 8006080:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	631a      	str	r2, [r3, #48]	@ 0x30
 800608e:	e005      	b.n	800609c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006090:	6978      	ldr	r0, [r7, #20]
 8006092:	f001 fd31 	bl	8007af8 <vPortFree>
 8006096:	e001      	b.n	800609c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d017      	beq.n	80060d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9303      	str	r3, [sp, #12]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f80f 	bl	80060e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c6:	69f8      	ldr	r0, [r7, #28]
 80060c8:	f000 f8ac 	bl	8006224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060cc:	2301      	movs	r3, #1
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	e002      	b.n	80060d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060d8:	69bb      	ldr	r3, [r7, #24]
	}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060fc:	3b01      	subs	r3, #1
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f023 0307 	bic.w	r3, r3, #7
 800610a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	617b      	str	r3, [r7, #20]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01f      	beq.n	8006174 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	e012      	b.n	8006160 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	7819      	ldrb	r1, [r3, #0]
 8006142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	3334      	adds	r3, #52	@ 0x34
 800614a:	460a      	mov	r2, r1
 800614c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d006      	beq.n	8006168 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b0f      	cmp	r3, #15
 8006164:	d9e9      	bls.n	800613a <prvInitialiseNewTask+0x56>
 8006166:	e000      	b.n	800616a <prvInitialiseNewTask+0x86>
			{
				break;
 8006168:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006172:	e003      	b.n	800617c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	2b06      	cmp	r3, #6
 8006180:	d901      	bls.n	8006186 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006182:	2306      	movs	r3, #6
 8006184:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800618a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006190:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	2200      	movs	r2, #0
 8006196:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	3304      	adds	r3, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff f971 	bl	8005484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	3318      	adds	r3, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff f96c 	bl	8005484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b4:	f1c3 0207 	rsb	r2, r3, #7
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	334c      	adds	r3, #76	@ 0x4c
 80061d6:	224c      	movs	r2, #76	@ 0x4c
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fdac 	bl	8007d38 <memset>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006218 <prvInitialiseNewTask+0x134>)
 80061e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	4a0c      	ldr	r2, [pc, #48]	@ (800621c <prvInitialiseNewTask+0x138>)
 80061ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006220 <prvInitialiseNewTask+0x13c>)
 80061f0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	68f9      	ldr	r1, [r7, #12]
 80061f6:	69b8      	ldr	r0, [r7, #24]
 80061f8:	f001 f960 	bl	80074bc <pxPortInitialiseStack>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800620e:	bf00      	nop
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20002c20 	.word	0x20002c20
 800621c:	20002c88 	.word	0x20002c88
 8006220:	20002cf0 	.word	0x20002cf0

08006224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800622c:	f001 fa74 	bl	8007718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006230:	4b2a      	ldr	r3, [pc, #168]	@ (80062dc <prvAddNewTaskToReadyList+0xb8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	4a29      	ldr	r2, [pc, #164]	@ (80062dc <prvAddNewTaskToReadyList+0xb8>)
 8006238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800623a:	4b29      	ldr	r3, [pc, #164]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006242:	4a27      	ldr	r2, [pc, #156]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006248:	4b24      	ldr	r3, [pc, #144]	@ (80062dc <prvAddNewTaskToReadyList+0xb8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d110      	bne.n	8006272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006250:	f000 fc26 	bl	8006aa0 <prvInitialiseTaskLists>
 8006254:	e00d      	b.n	8006272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006256:	4b23      	ldr	r3, [pc, #140]	@ (80062e4 <prvAddNewTaskToReadyList+0xc0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800625e:	4b20      	ldr	r3, [pc, #128]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	429a      	cmp	r2, r3
 800626a:	d802      	bhi.n	8006272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800626c:	4a1c      	ldr	r2, [pc, #112]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006272:	4b1d      	ldr	r3, [pc, #116]	@ (80062e8 <prvAddNewTaskToReadyList+0xc4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <prvAddNewTaskToReadyList+0xc4>)
 800627a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	2201      	movs	r2, #1
 8006282:	409a      	lsls	r2, r3
 8006284:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <prvAddNewTaskToReadyList+0xc8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4313      	orrs	r3, r2
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <prvAddNewTaskToReadyList+0xc8>)
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4a15      	ldr	r2, [pc, #84]	@ (80062f0 <prvAddNewTaskToReadyList+0xcc>)
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7ff f8fa 	bl	800549e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062aa:	f001 fa67 	bl	800777c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <prvAddNewTaskToReadyList+0xc0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062b6:	4b0a      	ldr	r3, [pc, #40]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d207      	bcs.n	80062d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062c4:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <prvAddNewTaskToReadyList+0xd0>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000ad0 	.word	0x20000ad0
 80062e0:	200009d0 	.word	0x200009d0
 80062e4:	20000adc 	.word	0x20000adc
 80062e8:	20000aec 	.word	0x20000aec
 80062ec:	20000ad8 	.word	0x20000ad8
 80062f0:	200009d4 	.word	0x200009d4
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800630a:	4b14      	ldr	r3, [pc, #80]	@ (800635c <vTaskDelay+0x64>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <vTaskDelay+0x32>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	60bb      	str	r3, [r7, #8]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800632a:	f000 f88b 	bl	8006444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800632e:	2100      	movs	r1, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fd1f 	bl	8006d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006336:	f000 f893 	bl	8006460 <xTaskResumeAll>
 800633a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d107      	bne.n	8006352 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006342:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <vTaskDelay+0x68>)
 8006344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000af8 	.word	0x20000af8
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006372:	463a      	mov	r2, r7
 8006374:	1d39      	adds	r1, r7, #4
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	4618      	mov	r0, r3
 800637c:	f7fa f8be 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	9202      	str	r2, [sp, #8]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	460a      	mov	r2, r1
 8006392:	4924      	ldr	r1, [pc, #144]	@ (8006424 <vTaskStartScheduler+0xc0>)
 8006394:	4824      	ldr	r0, [pc, #144]	@ (8006428 <vTaskStartScheduler+0xc4>)
 8006396:	f7ff fdff 	bl	8005f98 <xTaskCreateStatic>
 800639a:	4603      	mov	r3, r0
 800639c:	4a23      	ldr	r2, [pc, #140]	@ (800642c <vTaskStartScheduler+0xc8>)
 800639e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063a0:	4b22      	ldr	r3, [pc, #136]	@ (800642c <vTaskStartScheduler+0xc8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063a8:	2301      	movs	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e001      	b.n	80063b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d102      	bne.n	80063be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063b8:	f000 fd42 	bl	8006e40 <xTimerCreateTimerTask>
 80063bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d11b      	bne.n	80063fc <vTaskStartScheduler+0x98>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	613b      	str	r3, [r7, #16]
}
 80063d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063d8:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <vTaskStartScheduler+0xcc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	334c      	adds	r3, #76	@ 0x4c
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <vTaskStartScheduler+0xd0>)
 80063e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063e2:	4b15      	ldr	r3, [pc, #84]	@ (8006438 <vTaskStartScheduler+0xd4>)
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295
 80063e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ea:	4b14      	ldr	r3, [pc, #80]	@ (800643c <vTaskStartScheduler+0xd8>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063f0:	4b13      	ldr	r3, [pc, #76]	@ (8006440 <vTaskStartScheduler+0xdc>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063f6:	f001 f8eb 	bl	80075d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063fa:	e00f      	b.n	800641c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d10b      	bne.n	800641c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	60fb      	str	r3, [r7, #12]
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <vTaskStartScheduler+0xb4>
}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	08007f58 	.word	0x08007f58
 8006428:	08006a71 	.word	0x08006a71
 800642c:	20000af4 	.word	0x20000af4
 8006430:	200009d0 	.word	0x200009d0
 8006434:	20000010 	.word	0x20000010
 8006438:	20000af0 	.word	0x20000af0
 800643c:	20000adc 	.word	0x20000adc
 8006440:	20000ad4 	.word	0x20000ad4

08006444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006448:	4b04      	ldr	r3, [pc, #16]	@ (800645c <vTaskSuspendAll+0x18>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	4a03      	ldr	r2, [pc, #12]	@ (800645c <vTaskSuspendAll+0x18>)
 8006450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006452:	bf00      	nop
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000af8 	.word	0x20000af8

08006460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800646e:	4b42      	ldr	r3, [pc, #264]	@ (8006578 <xTaskResumeAll+0x118>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <xTaskResumeAll+0x2e>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	603b      	str	r3, [r7, #0]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800648e:	f001 f943 	bl	8007718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006492:	4b39      	ldr	r3, [pc, #228]	@ (8006578 <xTaskResumeAll+0x118>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	4a37      	ldr	r2, [pc, #220]	@ (8006578 <xTaskResumeAll+0x118>)
 800649a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800649c:	4b36      	ldr	r3, [pc, #216]	@ (8006578 <xTaskResumeAll+0x118>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d161      	bne.n	8006568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064a4:	4b35      	ldr	r3, [pc, #212]	@ (800657c <xTaskResumeAll+0x11c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d05d      	beq.n	8006568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ac:	e02e      	b.n	800650c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ae:	4b34      	ldr	r3, [pc, #208]	@ (8006580 <xTaskResumeAll+0x120>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3318      	adds	r3, #24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff f84c 	bl	8005558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff f847 	bl	8005558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ce:	2201      	movs	r2, #1
 80064d0:	409a      	lsls	r2, r3
 80064d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006584 <xTaskResumeAll+0x124>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006584 <xTaskResumeAll+0x124>)
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4a27      	ldr	r2, [pc, #156]	@ (8006588 <xTaskResumeAll+0x128>)
 80064ea:	441a      	add	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f7fe ffd3 	bl	800549e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fc:	4b23      	ldr	r3, [pc, #140]	@ (800658c <xTaskResumeAll+0x12c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	429a      	cmp	r2, r3
 8006504:	d302      	bcc.n	800650c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006506:	4b22      	ldr	r3, [pc, #136]	@ (8006590 <xTaskResumeAll+0x130>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800650c:	4b1c      	ldr	r3, [pc, #112]	@ (8006580 <xTaskResumeAll+0x120>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1cc      	bne.n	80064ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800651a:	f000 fb65 	bl	8006be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800651e:	4b1d      	ldr	r3, [pc, #116]	@ (8006594 <xTaskResumeAll+0x134>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d010      	beq.n	800654c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800652a:	f000 f847 	bl	80065bc <xTaskIncrementTick>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006534:	4b16      	ldr	r3, [pc, #88]	@ (8006590 <xTaskResumeAll+0x130>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3b01      	subs	r3, #1
 800653e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f1      	bne.n	800652a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006546:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <xTaskResumeAll+0x134>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800654c:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <xTaskResumeAll+0x130>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d009      	beq.n	8006568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006554:	2301      	movs	r3, #1
 8006556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006558:	4b0f      	ldr	r3, [pc, #60]	@ (8006598 <xTaskResumeAll+0x138>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006568:	f001 f908 	bl	800777c <vPortExitCritical>

	return xAlreadyYielded;
 800656c:	68bb      	ldr	r3, [r7, #8]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000af8 	.word	0x20000af8
 800657c:	20000ad0 	.word	0x20000ad0
 8006580:	20000a90 	.word	0x20000a90
 8006584:	20000ad8 	.word	0x20000ad8
 8006588:	200009d4 	.word	0x200009d4
 800658c:	200009d0 	.word	0x200009d0
 8006590:	20000ae4 	.word	0x20000ae4
 8006594:	20000ae0 	.word	0x20000ae0
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065a2:	4b05      	ldr	r3, [pc, #20]	@ (80065b8 <xTaskGetTickCount+0x1c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065a8:	687b      	ldr	r3, [r7, #4]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000ad4 	.word	0x20000ad4

080065bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006704 <xTaskIncrementTick+0x148>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 808f 	bne.w	80066ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006708 <xTaskIncrementTick+0x14c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006708 <xTaskIncrementTick+0x14c>)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d121      	bne.n	8006628 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065e4:	4b49      	ldr	r3, [pc, #292]	@ (800670c <xTaskIncrementTick+0x150>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <xTaskIncrementTick+0x4a>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	603b      	str	r3, [r7, #0]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <xTaskIncrementTick+0x46>
 8006606:	4b41      	ldr	r3, [pc, #260]	@ (800670c <xTaskIncrementTick+0x150>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	4b40      	ldr	r3, [pc, #256]	@ (8006710 <xTaskIncrementTick+0x154>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3e      	ldr	r2, [pc, #248]	@ (800670c <xTaskIncrementTick+0x150>)
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4a3e      	ldr	r2, [pc, #248]	@ (8006710 <xTaskIncrementTick+0x154>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4b3e      	ldr	r3, [pc, #248]	@ (8006714 <xTaskIncrementTick+0x158>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3301      	adds	r3, #1
 8006620:	4a3c      	ldr	r2, [pc, #240]	@ (8006714 <xTaskIncrementTick+0x158>)
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	f000 fae0 	bl	8006be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006628:	4b3b      	ldr	r3, [pc, #236]	@ (8006718 <xTaskIncrementTick+0x15c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	429a      	cmp	r2, r3
 8006630:	d348      	bcc.n	80066c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006632:	4b36      	ldr	r3, [pc, #216]	@ (800670c <xTaskIncrementTick+0x150>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663c:	4b36      	ldr	r3, [pc, #216]	@ (8006718 <xTaskIncrementTick+0x15c>)
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	601a      	str	r2, [r3, #0]
					break;
 8006644:	e03e      	b.n	80066c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006646:	4b31      	ldr	r3, [pc, #196]	@ (800670c <xTaskIncrementTick+0x150>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	429a      	cmp	r2, r3
 800665c:	d203      	bcs.n	8006666 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800665e:	4a2e      	ldr	r2, [pc, #184]	@ (8006718 <xTaskIncrementTick+0x15c>)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006664:	e02e      	b.n	80066c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe ff74 	bl	8005558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3318      	adds	r3, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe ff6b 	bl	8005558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	2201      	movs	r2, #1
 8006688:	409a      	lsls	r2, r3
 800668a:	4b24      	ldr	r3, [pc, #144]	@ (800671c <xTaskIncrementTick+0x160>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4313      	orrs	r3, r2
 8006690:	4a22      	ldr	r2, [pc, #136]	@ (800671c <xTaskIncrementTick+0x160>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006720 <xTaskIncrementTick+0x164>)
 80066a2:	441a      	add	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f7fe fef7 	bl	800549e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006724 <xTaskIncrementTick+0x168>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d3b9      	bcc.n	8006632 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066be:	2301      	movs	r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066c2:	e7b6      	b.n	8006632 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066c4:	4b17      	ldr	r3, [pc, #92]	@ (8006724 <xTaskIncrementTick+0x168>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ca:	4915      	ldr	r1, [pc, #84]	@ (8006720 <xTaskIncrementTick+0x164>)
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d901      	bls.n	80066e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066dc:	2301      	movs	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <xTaskIncrementTick+0x16c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e004      	b.n	80066f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066ee:	4b0f      	ldr	r3, [pc, #60]	@ (800672c <xTaskIncrementTick+0x170>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a0d      	ldr	r2, [pc, #52]	@ (800672c <xTaskIncrementTick+0x170>)
 80066f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066f8:	697b      	ldr	r3, [r7, #20]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000af8 	.word	0x20000af8
 8006708:	20000ad4 	.word	0x20000ad4
 800670c:	20000a88 	.word	0x20000a88
 8006710:	20000a8c 	.word	0x20000a8c
 8006714:	20000ae8 	.word	0x20000ae8
 8006718:	20000af0 	.word	0x20000af0
 800671c:	20000ad8 	.word	0x20000ad8
 8006720:	200009d4 	.word	0x200009d4
 8006724:	200009d0 	.word	0x200009d0
 8006728:	20000ae4 	.word	0x20000ae4
 800672c:	20000ae0 	.word	0x20000ae0

08006730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006736:	4b2a      	ldr	r3, [pc, #168]	@ (80067e0 <vTaskSwitchContext+0xb0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800673e:	4b29      	ldr	r3, [pc, #164]	@ (80067e4 <vTaskSwitchContext+0xb4>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006744:	e045      	b.n	80067d2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006746:	4b27      	ldr	r3, [pc, #156]	@ (80067e4 <vTaskSwitchContext+0xb4>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800674c:	4b26      	ldr	r3, [pc, #152]	@ (80067e8 <vTaskSwitchContext+0xb8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	fab3 f383 	clz	r3, r3
 8006758:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	f1c3 031f 	rsb	r3, r3, #31
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	4922      	ldr	r1, [pc, #136]	@ (80067ec <vTaskSwitchContext+0xbc>)
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	607b      	str	r3, [r7, #4]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <vTaskSwitchContext+0x5a>
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a14      	ldr	r2, [pc, #80]	@ (80067ec <vTaskSwitchContext+0xbc>)
 800679a:	4413      	add	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	3308      	adds	r3, #8
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d104      	bne.n	80067be <vTaskSwitchContext+0x8e>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4a0a      	ldr	r2, [pc, #40]	@ (80067f0 <vTaskSwitchContext+0xc0>)
 80067c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067c8:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <vTaskSwitchContext+0xc0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	334c      	adds	r3, #76	@ 0x4c
 80067ce:	4a09      	ldr	r2, [pc, #36]	@ (80067f4 <vTaskSwitchContext+0xc4>)
 80067d0:	6013      	str	r3, [r2, #0]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20000af8 	.word	0x20000af8
 80067e4:	20000ae4 	.word	0x20000ae4
 80067e8:	20000ad8 	.word	0x20000ad8
 80067ec:	200009d4 	.word	0x200009d4
 80067f0:	200009d0 	.word	0x200009d0
 80067f4:	20000010 	.word	0x20000010

080067f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10b      	bne.n	8006820 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	60fb      	str	r3, [r7, #12]
}
 800681a:	bf00      	nop
 800681c:	bf00      	nop
 800681e:	e7fd      	b.n	800681c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006820:	4b07      	ldr	r3, [pc, #28]	@ (8006840 <vTaskPlaceOnEventList+0x48>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3318      	adds	r3, #24
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fe fe5c 	bl	80054e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800682e:	2101      	movs	r1, #1
 8006830:	6838      	ldr	r0, [r7, #0]
 8006832:	f000 fa9f 	bl	8006d74 <prvAddCurrentTaskToDelayedList>
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200009d0 	.word	0x200009d0

08006844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	617b      	str	r3, [r7, #20]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800686e:	4b0a      	ldr	r3, [pc, #40]	@ (8006898 <vTaskPlaceOnEventListRestricted+0x54>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3318      	adds	r3, #24
 8006874:	4619      	mov	r1, r3
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7fe fe11 	bl	800549e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	68b8      	ldr	r0, [r7, #8]
 800688c:	f000 fa72 	bl	8006d74 <prvAddCurrentTaskToDelayedList>
	}
 8006890:	bf00      	nop
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	200009d0 	.word	0x200009d0

0800689c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3318      	adds	r3, #24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe fe42 	bl	8005558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d4:	4b1d      	ldr	r3, [pc, #116]	@ (800694c <xTaskRemoveFromEventList+0xb0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d11c      	bne.n	8006916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3304      	adds	r3, #4
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fe fe39 	bl	8005558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ea:	2201      	movs	r2, #1
 80068ec:	409a      	lsls	r2, r3
 80068ee:	4b18      	ldr	r3, [pc, #96]	@ (8006950 <xTaskRemoveFromEventList+0xb4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	4a16      	ldr	r2, [pc, #88]	@ (8006950 <xTaskRemoveFromEventList+0xb4>)
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a13      	ldr	r2, [pc, #76]	@ (8006954 <xTaskRemoveFromEventList+0xb8>)
 8006906:	441a      	add	r2, r3
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7fe fdc5 	bl	800549e <vListInsertEnd>
 8006914:	e005      	b.n	8006922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3318      	adds	r3, #24
 800691a:	4619      	mov	r1, r3
 800691c:	480e      	ldr	r0, [pc, #56]	@ (8006958 <xTaskRemoveFromEventList+0xbc>)
 800691e:	f7fe fdbe 	bl	800549e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <xTaskRemoveFromEventList+0xc0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	429a      	cmp	r2, r3
 800692e:	d905      	bls.n	800693c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006934:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <xTaskRemoveFromEventList+0xc4>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e001      	b.n	8006940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006940:	697b      	ldr	r3, [r7, #20]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000af8 	.word	0x20000af8
 8006950:	20000ad8 	.word	0x20000ad8
 8006954:	200009d4 	.word	0x200009d4
 8006958:	20000a90 	.word	0x20000a90
 800695c:	200009d0 	.word	0x200009d0
 8006960:	20000ae4 	.word	0x20000ae4

08006964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800696c:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <vTaskInternalSetTimeOutState+0x24>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006974:	4b05      	ldr	r3, [pc, #20]	@ (800698c <vTaskInternalSetTimeOutState+0x28>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000ae8 	.word	0x20000ae8
 800698c:	20000ad4 	.word	0x20000ad4

08006990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069d6:	f000 fe9f 	bl	8007718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069da:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <xTaskCheckForTimeOut+0xc0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d102      	bne.n	80069fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e023      	b.n	8006a42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b15      	ldr	r3, [pc, #84]	@ (8006a54 <xTaskCheckForTimeOut+0xc4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d007      	beq.n	8006a16 <xTaskCheckForTimeOut+0x86>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	e015      	b.n	8006a42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d20b      	bcs.n	8006a38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff99 	bl	8006964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	e004      	b.n	8006a42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a42:	f000 fe9b 	bl	800777c <vPortExitCritical>

	return xReturn;
 8006a46:	69fb      	ldr	r3, [r7, #28]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3720      	adds	r7, #32
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000ad4 	.word	0x20000ad4
 8006a54:	20000ae8 	.word	0x20000ae8

08006a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a5c:	4b03      	ldr	r3, [pc, #12]	@ (8006a6c <vTaskMissedYield+0x14>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
}
 8006a62:	bf00      	nop
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	20000ae4 	.word	0x20000ae4

08006a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a78:	f000 f852 	bl	8006b20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <prvIdleTask+0x28>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d9f9      	bls.n	8006a78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a84:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <prvIdleTask+0x2c>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a94:	e7f0      	b.n	8006a78 <prvIdleTask+0x8>
 8006a96:	bf00      	nop
 8006a98:	200009d4 	.word	0x200009d4
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	e00c      	b.n	8006ac6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4a12      	ldr	r2, [pc, #72]	@ (8006b00 <prvInitialiseTaskLists+0x60>)
 8006ab8:	4413      	add	r3, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fcc2 	bl	8005444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	607b      	str	r3, [r7, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d9ef      	bls.n	8006aac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006acc:	480d      	ldr	r0, [pc, #52]	@ (8006b04 <prvInitialiseTaskLists+0x64>)
 8006ace:	f7fe fcb9 	bl	8005444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ad2:	480d      	ldr	r0, [pc, #52]	@ (8006b08 <prvInitialiseTaskLists+0x68>)
 8006ad4:	f7fe fcb6 	bl	8005444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ad8:	480c      	ldr	r0, [pc, #48]	@ (8006b0c <prvInitialiseTaskLists+0x6c>)
 8006ada:	f7fe fcb3 	bl	8005444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ade:	480c      	ldr	r0, [pc, #48]	@ (8006b10 <prvInitialiseTaskLists+0x70>)
 8006ae0:	f7fe fcb0 	bl	8005444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ae4:	480b      	ldr	r0, [pc, #44]	@ (8006b14 <prvInitialiseTaskLists+0x74>)
 8006ae6:	f7fe fcad 	bl	8005444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006aea:	4b0b      	ldr	r3, [pc, #44]	@ (8006b18 <prvInitialiseTaskLists+0x78>)
 8006aec:	4a05      	ldr	r2, [pc, #20]	@ (8006b04 <prvInitialiseTaskLists+0x64>)
 8006aee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006af0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b1c <prvInitialiseTaskLists+0x7c>)
 8006af2:	4a05      	ldr	r2, [pc, #20]	@ (8006b08 <prvInitialiseTaskLists+0x68>)
 8006af4:	601a      	str	r2, [r3, #0]
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	200009d4 	.word	0x200009d4
 8006b04:	20000a60 	.word	0x20000a60
 8006b08:	20000a74 	.word	0x20000a74
 8006b0c:	20000a90 	.word	0x20000a90
 8006b10:	20000aa4 	.word	0x20000aa4
 8006b14:	20000abc 	.word	0x20000abc
 8006b18:	20000a88 	.word	0x20000a88
 8006b1c:	20000a8c 	.word	0x20000a8c

08006b20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b26:	e019      	b.n	8006b5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b28:	f000 fdf6 	bl	8007718 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b2c:	4b10      	ldr	r3, [pc, #64]	@ (8006b70 <prvCheckTasksWaitingTermination+0x50>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fd0d 	bl	8005558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <prvCheckTasksWaitingTermination+0x54>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	4a0b      	ldr	r2, [pc, #44]	@ (8006b74 <prvCheckTasksWaitingTermination+0x54>)
 8006b46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b48:	4b0b      	ldr	r3, [pc, #44]	@ (8006b78 <prvCheckTasksWaitingTermination+0x58>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b78 <prvCheckTasksWaitingTermination+0x58>)
 8006b50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b52:	f000 fe13 	bl	800777c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f810 	bl	8006b7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b5c:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <prvCheckTasksWaitingTermination+0x58>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e1      	bne.n	8006b28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000aa4 	.word	0x20000aa4
 8006b74:	20000ad0 	.word	0x20000ad0
 8006b78:	20000ab8 	.word	0x20000ab8

08006b7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	334c      	adds	r3, #76	@ 0x4c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f8dd 	bl	8007d48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d108      	bne.n	8006baa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 ffab 	bl	8007af8 <vPortFree>
				vPortFree( pxTCB );
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 ffa8 	bl	8007af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ba8:	e019      	b.n	8006bde <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d103      	bne.n	8006bbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 ff9f 	bl	8007af8 <vPortFree>
	}
 8006bba:	e010      	b.n	8006bde <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d00b      	beq.n	8006bde <prvDeleteTCB+0x62>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	60fb      	str	r3, [r7, #12]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <prvDeleteTCB+0x5e>
	}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bee:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <prvResetNextTaskUnblockTime+0x38>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d104      	bne.n	8006c02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <prvResetNextTaskUnblockTime+0x3c>)
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c00:	e008      	b.n	8006c14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c02:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <prvResetNextTaskUnblockTime+0x38>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4a04      	ldr	r2, [pc, #16]	@ (8006c24 <prvResetNextTaskUnblockTime+0x3c>)
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	20000a88 	.word	0x20000a88
 8006c24:	20000af0 	.word	0x20000af0

08006c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c5c <xTaskGetSchedulerState+0x34>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c36:	2301      	movs	r3, #1
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	e008      	b.n	8006c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c3c:	4b08      	ldr	r3, [pc, #32]	@ (8006c60 <xTaskGetSchedulerState+0x38>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c44:	2302      	movs	r3, #2
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	e001      	b.n	8006c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c4e:	687b      	ldr	r3, [r7, #4]
	}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000adc 	.word	0x20000adc
 8006c60:	20000af8 	.word	0x20000af8

08006c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d070      	beq.n	8006d5c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d68 <xTaskPriorityDisinherit+0x104>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d00b      	beq.n	8006c9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10b      	bne.n	8006cbc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60bb      	str	r3, [r7, #8]
}
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	e7fd      	b.n	8006cb8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc0:	1e5a      	subs	r2, r3, #1
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d044      	beq.n	8006d5c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d140      	bne.n	8006d5c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fe fc3a 	bl	8005558 <uxListRemove>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d115      	bne.n	8006d16 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cee:	491f      	ldr	r1, [pc, #124]	@ (8006d6c <xTaskPriorityDisinherit+0x108>)
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <xTaskPriorityDisinherit+0xb2>
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	2201      	movs	r2, #1
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	43da      	mvns	r2, r3
 8006d0c:	4b18      	ldr	r3, [pc, #96]	@ (8006d70 <xTaskPriorityDisinherit+0x10c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4013      	ands	r3, r2
 8006d12:	4a17      	ldr	r2, [pc, #92]	@ (8006d70 <xTaskPriorityDisinherit+0x10c>)
 8006d14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d22:	f1c3 0207 	rsb	r2, r3, #7
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	2201      	movs	r2, #1
 8006d30:	409a      	lsls	r2, r3
 8006d32:	4b0f      	ldr	r3, [pc, #60]	@ (8006d70 <xTaskPriorityDisinherit+0x10c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	4a0d      	ldr	r2, [pc, #52]	@ (8006d70 <xTaskPriorityDisinherit+0x10c>)
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4a08      	ldr	r2, [pc, #32]	@ (8006d6c <xTaskPriorityDisinherit+0x108>)
 8006d4a:	441a      	add	r2, r3
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7fe fba3 	bl	800549e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d5c:	697b      	ldr	r3, [r7, #20]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	200009d0 	.word	0x200009d0
 8006d6c:	200009d4 	.word	0x200009d4
 8006d70:	20000ad8 	.word	0x20000ad8

08006d74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d7e:	4b29      	ldr	r3, [pc, #164]	@ (8006e24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d84:	4b28      	ldr	r3, [pc, #160]	@ (8006e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fbe4 	bl	8005558 <uxListRemove>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d96:	4b24      	ldr	r3, [pc, #144]	@ (8006e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006da2:	43da      	mvns	r2, r3
 8006da4:	4b21      	ldr	r3, [pc, #132]	@ (8006e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4013      	ands	r3, r2
 8006daa:	4a20      	ldr	r2, [pc, #128]	@ (8006e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006dac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d10a      	bne.n	8006dcc <prvAddCurrentTaskToDelayedList+0x58>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	481a      	ldr	r0, [pc, #104]	@ (8006e30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006dc6:	f7fe fb6a 	bl	800549e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dca:	e026      	b.n	8006e1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dd4:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d209      	bcs.n	8006df8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006de4:	4b13      	ldr	r3, [pc, #76]	@ (8006e34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3304      	adds	r3, #4
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f7fe fb78 	bl	80054e6 <vListInsert>
}
 8006df6:	e010      	b.n	8006e1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006df8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe fb6e 	bl	80054e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d202      	bcs.n	8006e1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e14:	4a09      	ldr	r2, [pc, #36]	@ (8006e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6013      	str	r3, [r2, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000ad4 	.word	0x20000ad4
 8006e28:	200009d0 	.word	0x200009d0
 8006e2c:	20000ad8 	.word	0x20000ad8
 8006e30:	20000abc 	.word	0x20000abc
 8006e34:	20000a8c 	.word	0x20000a8c
 8006e38:	20000a88 	.word	0x20000a88
 8006e3c:	20000af0 	.word	0x20000af0

08006e40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	@ 0x28
 8006e44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e4a:	f000 faf7 	bl	800743c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec4 <xTimerCreateTimerTask+0x84>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d021      	beq.n	8006e9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e5e:	1d3a      	adds	r2, r7, #4
 8006e60:	f107 0108 	add.w	r1, r7, #8
 8006e64:	f107 030c 	add.w	r3, r7, #12
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7f9 fb61 	bl	8000530 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	9202      	str	r2, [sp, #8]
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	2302      	movs	r3, #2
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	460a      	mov	r2, r1
 8006e80:	4911      	ldr	r1, [pc, #68]	@ (8006ec8 <xTimerCreateTimerTask+0x88>)
 8006e82:	4812      	ldr	r0, [pc, #72]	@ (8006ecc <xTimerCreateTimerTask+0x8c>)
 8006e84:	f7ff f888 	bl	8005f98 <xTaskCreateStatic>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	4a11      	ldr	r2, [pc, #68]	@ (8006ed0 <xTimerCreateTimerTask+0x90>)
 8006e8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e8e:	4b10      	ldr	r3, [pc, #64]	@ (8006ed0 <xTimerCreateTimerTask+0x90>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e96:	2301      	movs	r3, #1
 8006e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	613b      	str	r3, [r7, #16]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006eb8:	697b      	ldr	r3, [r7, #20]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000b2c 	.word	0x20000b2c
 8006ec8:	08007f60 	.word	0x08007f60
 8006ecc:	0800700d 	.word	0x0800700d
 8006ed0:	20000b30 	.word	0x20000b30

08006ed4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	@ 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <xTimerGenericCommand+0x30>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	623b      	str	r3, [r7, #32]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f04:	4b19      	ldr	r3, [pc, #100]	@ (8006f6c <xTimerGenericCommand+0x98>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d02a      	beq.n	8006f62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	dc18      	bgt.n	8006f50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f1e:	f7ff fe83 	bl	8006c28 <xTaskGetSchedulerState>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d109      	bne.n	8006f3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f28:	4b10      	ldr	r3, [pc, #64]	@ (8006f6c <xTimerGenericCommand+0x98>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	f107 0114 	add.w	r1, r7, #20
 8006f30:	2300      	movs	r3, #0
 8006f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f34:	f7fe fc40 	bl	80057b8 <xQueueGenericSend>
 8006f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f3a:	e012      	b.n	8006f62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f6c <xTimerGenericCommand+0x98>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	f107 0114 	add.w	r1, r7, #20
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	f7fe fc36 	bl	80057b8 <xQueueGenericSend>
 8006f4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f4e:	e008      	b.n	8006f62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f50:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <xTimerGenericCommand+0x98>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	f107 0114 	add.w	r1, r7, #20
 8006f58:	2300      	movs	r3, #0
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	f7fe fd2e 	bl	80059bc <xQueueGenericSendFromISR>
 8006f60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3728      	adds	r7, #40	@ 0x28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20000b2c 	.word	0x20000b2c

08006f70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7a:	4b23      	ldr	r3, [pc, #140]	@ (8007008 <prvProcessExpiredTimer+0x98>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fae5 	bl	8005558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d023      	beq.n	8006fe4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	18d1      	adds	r1, r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	6978      	ldr	r0, [r7, #20]
 8006faa:	f000 f8d5 	bl	8007158 <prvInsertTimerInActiveList>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d020      	beq.n	8006ff6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	6978      	ldr	r0, [r7, #20]
 8006fc0:	f7ff ff88 	bl	8006ed4 <xTimerGenericCommand>
 8006fc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d114      	bne.n	8006ff6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	6978      	ldr	r0, [r7, #20]
 8006ffc:	4798      	blx	r3
}
 8006ffe:	bf00      	nop
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000b24 	.word	0x20000b24

0800700c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007014:	f107 0308 	add.w	r3, r7, #8
 8007018:	4618      	mov	r0, r3
 800701a:	f000 f859 	bl	80070d0 <prvGetNextExpireTime>
 800701e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4619      	mov	r1, r3
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f805 	bl	8007034 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800702a:	f000 f8d7 	bl	80071dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800702e:	bf00      	nop
 8007030:	e7f0      	b.n	8007014 <prvTimerTask+0x8>
	...

08007034 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800703e:	f7ff fa01 	bl	8006444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007042:	f107 0308 	add.w	r3, r7, #8
 8007046:	4618      	mov	r0, r3
 8007048:	f000 f866 	bl	8007118 <prvSampleTimeNow>
 800704c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d130      	bne.n	80070b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <prvProcessTimerOrBlockTask+0x3c>
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	429a      	cmp	r2, r3
 8007060:	d806      	bhi.n	8007070 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007062:	f7ff f9fd 	bl	8006460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff ff81 	bl	8006f70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800706e:	e024      	b.n	80070ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007076:	4b13      	ldr	r3, [pc, #76]	@ (80070c4 <prvProcessTimerOrBlockTask+0x90>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <prvProcessTimerOrBlockTask+0x50>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <prvProcessTimerOrBlockTask+0x52>
 8007084:	2300      	movs	r3, #0
 8007086:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007088:	4b0f      	ldr	r3, [pc, #60]	@ (80070c8 <prvProcessTimerOrBlockTask+0x94>)
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4619      	mov	r1, r3
 8007096:	f7fe ff4b 	bl	8005f30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800709a:	f7ff f9e1 	bl	8006460 <xTaskResumeAll>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070a4:	4b09      	ldr	r3, [pc, #36]	@ (80070cc <prvProcessTimerOrBlockTask+0x98>)
 80070a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	f3bf 8f6f 	isb	sy
}
 80070b4:	e001      	b.n	80070ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070b6:	f7ff f9d3 	bl	8006460 <xTaskResumeAll>
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000b28 	.word	0x20000b28
 80070c8:	20000b2c 	.word	0x20000b2c
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <prvGetNextExpireTime+0x44>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <prvGetNextExpireTime+0x16>
 80070e2:	2201      	movs	r2, #1
 80070e4:	e000      	b.n	80070e8 <prvGetNextExpireTime+0x18>
 80070e6:	2200      	movs	r2, #0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070f4:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <prvGetNextExpireTime+0x44>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e001      	b.n	8007104 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007104:	68fb      	ldr	r3, [r7, #12]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000b24 	.word	0x20000b24

08007118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007120:	f7ff fa3c 	bl	800659c <xTaskGetTickCount>
 8007124:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007126:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <prvSampleTimeNow+0x3c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	429a      	cmp	r2, r3
 800712e:	d205      	bcs.n	800713c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007130:	f000 f91e 	bl	8007370 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	e002      	b.n	8007142 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007142:	4a04      	ldr	r2, [pc, #16]	@ (8007154 <prvSampleTimeNow+0x3c>)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000b34 	.word	0x20000b34

08007158 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	429a      	cmp	r2, r3
 800717c:	d812      	bhi.n	80071a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	1ad2      	subs	r2, r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	429a      	cmp	r2, r3
 800718a:	d302      	bcc.n	8007192 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e01b      	b.n	80071ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <prvInsertTimerInActiveList+0x7c>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3304      	adds	r3, #4
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f7fe f9a2 	bl	80054e6 <vListInsert>
 80071a2:	e012      	b.n	80071ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d206      	bcs.n	80071ba <prvInsertTimerInActiveList+0x62>
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d302      	bcc.n	80071ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e007      	b.n	80071ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ba:	4b07      	ldr	r3, [pc, #28]	@ (80071d8 <prvInsertTimerInActiveList+0x80>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f7fe f98e 	bl	80054e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071ca:	697b      	ldr	r3, [r7, #20]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000b28 	.word	0x20000b28
 80071d8:	20000b24 	.word	0x20000b24

080071dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	@ 0x30
 80071e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071e2:	e0b2      	b.n	800734a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f2c0 80af 	blt.w	800734a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	3304      	adds	r3, #4
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe f9ab 	bl	8005558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff ff87 	bl	8007118 <prvSampleTimeNow>
 800720a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b09      	cmp	r3, #9
 8007210:	f200 8098 	bhi.w	8007344 <prvProcessReceivedCommands+0x168>
 8007214:	a201      	add	r2, pc, #4	@ (adr r2, 800721c <prvProcessReceivedCommands+0x40>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007245 	.word	0x08007245
 8007220:	08007245 	.word	0x08007245
 8007224:	08007245 	.word	0x08007245
 8007228:	080072bb 	.word	0x080072bb
 800722c:	080072cf 	.word	0x080072cf
 8007230:	0800731b 	.word	0x0800731b
 8007234:	08007245 	.word	0x08007245
 8007238:	08007245 	.word	0x08007245
 800723c:	080072bb 	.word	0x080072bb
 8007240:	080072cf 	.word	0x080072cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	18d1      	adds	r1, r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a3a      	ldr	r2, [r7, #32]
 8007262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007264:	f7ff ff78 	bl	8007158 <prvInsertTimerInActiveList>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d06c      	beq.n	8007348 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d061      	beq.n	8007348 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	441a      	add	r2, r3
 800728c:	2300      	movs	r3, #0
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	2300      	movs	r3, #0
 8007292:	2100      	movs	r1, #0
 8007294:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007296:	f7ff fe1d 	bl	8006ed4 <xTimerGenericCommand>
 800729a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d152      	bne.n	8007348 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	61bb      	str	r3, [r7, #24]
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	e7fd      	b.n	80072b6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80072cc:	e03d      	b.n	800734a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072d4:	f043 0301 	orr.w	r3, r3, #1
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10b      	bne.n	8007306 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	617b      	str	r3, [r7, #20]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	18d1      	adds	r1, r2, r3
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	6a3a      	ldr	r2, [r7, #32]
 8007312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007314:	f7ff ff20 	bl	8007158 <prvInsertTimerInActiveList>
					break;
 8007318:	e017      	b.n	800734a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8007328:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800732a:	f000 fbe5 	bl	8007af8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800732e:	e00c      	b.n	800734a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007336:	f023 0301 	bic.w	r3, r3, #1
 800733a:	b2da      	uxtb	r2, r3
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007342:	e002      	b.n	800734a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <prvProcessReceivedCommands+0x16e>
					break;
 8007348:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800734a:	4b08      	ldr	r3, [pc, #32]	@ (800736c <prvProcessReceivedCommands+0x190>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f107 0108 	add.w	r1, r7, #8
 8007352:	2200      	movs	r2, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fbcf 	bl	8005af8 <xQueueReceive>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	f47f af41 	bne.w	80071e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	3728      	adds	r7, #40	@ 0x28
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000b2c 	.word	0x20000b2c

08007370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007376:	e049      	b.n	800740c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007378:	4b2e      	ldr	r3, [pc, #184]	@ (8007434 <prvSwitchTimerLists+0xc4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007382:	4b2c      	ldr	r3, [pc, #176]	@ (8007434 <prvSwitchTimerLists+0xc4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3304      	adds	r3, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe f8e1 	bl	8005558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d02f      	beq.n	800740c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4413      	add	r3, r2
 80073b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d90e      	bls.n	80073dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007434 <prvSwitchTimerLists+0xc4>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f7fe f886 	bl	80054e6 <vListInsert>
 80073da:	e017      	b.n	800740c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073dc:	2300      	movs	r3, #0
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	2300      	movs	r3, #0
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	2100      	movs	r1, #0
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fd74 	bl	8006ed4 <xTimerGenericCommand>
 80073ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	603b      	str	r3, [r7, #0]
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800740c:	4b09      	ldr	r3, [pc, #36]	@ (8007434 <prvSwitchTimerLists+0xc4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1b0      	bne.n	8007378 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007416:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <prvSwitchTimerLists+0xc4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800741c:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <prvSwitchTimerLists+0xc8>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a04      	ldr	r2, [pc, #16]	@ (8007434 <prvSwitchTimerLists+0xc4>)
 8007422:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007424:	4a04      	ldr	r2, [pc, #16]	@ (8007438 <prvSwitchTimerLists+0xc8>)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	6013      	str	r3, [r2, #0]
}
 800742a:	bf00      	nop
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000b24 	.word	0x20000b24
 8007438:	20000b28 	.word	0x20000b28

0800743c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007442:	f000 f969 	bl	8007718 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007446:	4b15      	ldr	r3, [pc, #84]	@ (800749c <prvCheckForValidListAndQueue+0x60>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d120      	bne.n	8007490 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800744e:	4814      	ldr	r0, [pc, #80]	@ (80074a0 <prvCheckForValidListAndQueue+0x64>)
 8007450:	f7fd fff8 	bl	8005444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007454:	4813      	ldr	r0, [pc, #76]	@ (80074a4 <prvCheckForValidListAndQueue+0x68>)
 8007456:	f7fd fff5 	bl	8005444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800745a:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <prvCheckForValidListAndQueue+0x6c>)
 800745c:	4a10      	ldr	r2, [pc, #64]	@ (80074a0 <prvCheckForValidListAndQueue+0x64>)
 800745e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007460:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <prvCheckForValidListAndQueue+0x70>)
 8007462:	4a10      	ldr	r2, [pc, #64]	@ (80074a4 <prvCheckForValidListAndQueue+0x68>)
 8007464:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007466:	2300      	movs	r3, #0
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <prvCheckForValidListAndQueue+0x74>)
 800746c:	4a11      	ldr	r2, [pc, #68]	@ (80074b4 <prvCheckForValidListAndQueue+0x78>)
 800746e:	210c      	movs	r1, #12
 8007470:	200a      	movs	r0, #10
 8007472:	f7fe f905 	bl	8005680 <xQueueGenericCreateStatic>
 8007476:	4603      	mov	r3, r0
 8007478:	4a08      	ldr	r2, [pc, #32]	@ (800749c <prvCheckForValidListAndQueue+0x60>)
 800747a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800747c:	4b07      	ldr	r3, [pc, #28]	@ (800749c <prvCheckForValidListAndQueue+0x60>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007484:	4b05      	ldr	r3, [pc, #20]	@ (800749c <prvCheckForValidListAndQueue+0x60>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	490b      	ldr	r1, [pc, #44]	@ (80074b8 <prvCheckForValidListAndQueue+0x7c>)
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fd26 	bl	8005edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007490:	f000 f974 	bl	800777c <vPortExitCritical>
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000b2c 	.word	0x20000b2c
 80074a0:	20000afc 	.word	0x20000afc
 80074a4:	20000b10 	.word	0x20000b10
 80074a8:	20000b24 	.word	0x20000b24
 80074ac:	20000b28 	.word	0x20000b28
 80074b0:	20000bb0 	.word	0x20000bb0
 80074b4:	20000b38 	.word	0x20000b38
 80074b8:	08007f68 	.word	0x08007f68

080074bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3b04      	subs	r3, #4
 80074cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3b04      	subs	r3, #4
 80074da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f023 0201 	bic.w	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007520 <pxPortInitialiseStack+0x64>)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3b14      	subs	r3, #20
 80074f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3b04      	subs	r3, #4
 8007502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f06f 0202 	mvn.w	r2, #2
 800750a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3b20      	subs	r3, #32
 8007510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	08007525 	.word	0x08007525

08007524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800752e:	4b13      	ldr	r3, [pc, #76]	@ (800757c <prvTaskExitError+0x58>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d00b      	beq.n	8007550 <prvTaskExitError+0x2c>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	60fb      	str	r3, [r7, #12]
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	e7fd      	b.n	800754c <prvTaskExitError+0x28>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60bb      	str	r3, [r7, #8]
}
 8007562:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007564:	bf00      	nop
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0fc      	beq.n	8007566 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	2000000c 	.word	0x2000000c

08007580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007580:	4b07      	ldr	r3, [pc, #28]	@ (80075a0 <pxCurrentTCBConst2>)
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	6808      	ldr	r0, [r1, #0]
 8007586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	f380 8809 	msr	PSP, r0
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8811 	msr	BASEPRI, r0
 800759a:	4770      	bx	lr
 800759c:	f3af 8000 	nop.w

080075a0 <pxCurrentTCBConst2>:
 80075a0:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075a8:	4808      	ldr	r0, [pc, #32]	@ (80075cc <prvPortStartFirstTask+0x24>)
 80075aa:	6800      	ldr	r0, [r0, #0]
 80075ac:	6800      	ldr	r0, [r0, #0]
 80075ae:	f380 8808 	msr	MSP, r0
 80075b2:	f04f 0000 	mov.w	r0, #0
 80075b6:	f380 8814 	msr	CONTROL, r0
 80075ba:	b662      	cpsie	i
 80075bc:	b661      	cpsie	f
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	df00      	svc	0
 80075c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075ca:	bf00      	nop
 80075cc:	e000ed08 	.word	0xe000ed08

080075d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075d6:	4b47      	ldr	r3, [pc, #284]	@ (80076f4 <xPortStartScheduler+0x124>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a47      	ldr	r2, [pc, #284]	@ (80076f8 <xPortStartScheduler+0x128>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10b      	bne.n	80075f8 <xPortStartScheduler+0x28>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	e7fd      	b.n	80075f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075f8:	4b3e      	ldr	r3, [pc, #248]	@ (80076f4 <xPortStartScheduler+0x124>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a3f      	ldr	r2, [pc, #252]	@ (80076fc <xPortStartScheduler+0x12c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10b      	bne.n	800761a <xPortStartScheduler+0x4a>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	613b      	str	r3, [r7, #16]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800761a:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <xPortStartScheduler+0x130>)
 800761c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	22ff      	movs	r2, #255	@ 0xff
 800762a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800763c:	b2da      	uxtb	r2, r3
 800763e:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <xPortStartScheduler+0x134>)
 8007640:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007642:	4b31      	ldr	r3, [pc, #196]	@ (8007708 <xPortStartScheduler+0x138>)
 8007644:	2207      	movs	r2, #7
 8007646:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007648:	e009      	b.n	800765e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800764a:	4b2f      	ldr	r3, [pc, #188]	@ (8007708 <xPortStartScheduler+0x138>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3b01      	subs	r3, #1
 8007650:	4a2d      	ldr	r2, [pc, #180]	@ (8007708 <xPortStartScheduler+0x138>)
 8007652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	b2db      	uxtb	r3, r3
 800765c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	2b80      	cmp	r3, #128	@ 0x80
 8007668:	d0ef      	beq.n	800764a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800766a:	4b27      	ldr	r3, [pc, #156]	@ (8007708 <xPortStartScheduler+0x138>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f1c3 0307 	rsb	r3, r3, #7
 8007672:	2b04      	cmp	r3, #4
 8007674:	d00b      	beq.n	800768e <xPortStartScheduler+0xbe>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60bb      	str	r3, [r7, #8]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800768e:	4b1e      	ldr	r3, [pc, #120]	@ (8007708 <xPortStartScheduler+0x138>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	4a1c      	ldr	r2, [pc, #112]	@ (8007708 <xPortStartScheduler+0x138>)
 8007696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007698:	4b1b      	ldr	r3, [pc, #108]	@ (8007708 <xPortStartScheduler+0x138>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076a0:	4a19      	ldr	r2, [pc, #100]	@ (8007708 <xPortStartScheduler+0x138>)
 80076a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076ac:	4b17      	ldr	r3, [pc, #92]	@ (800770c <xPortStartScheduler+0x13c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a16      	ldr	r2, [pc, #88]	@ (800770c <xPortStartScheduler+0x13c>)
 80076b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076b8:	4b14      	ldr	r3, [pc, #80]	@ (800770c <xPortStartScheduler+0x13c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a13      	ldr	r2, [pc, #76]	@ (800770c <xPortStartScheduler+0x13c>)
 80076be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80076c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076c4:	f000 f8da 	bl	800787c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076c8:	4b11      	ldr	r3, [pc, #68]	@ (8007710 <xPortStartScheduler+0x140>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076ce:	f000 f8f9 	bl	80078c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076d2:	4b10      	ldr	r3, [pc, #64]	@ (8007714 <xPortStartScheduler+0x144>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007714 <xPortStartScheduler+0x144>)
 80076d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80076dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076de:	f7ff ff63 	bl	80075a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076e2:	f7ff f825 	bl	8006730 <vTaskSwitchContext>
	prvTaskExitError();
 80076e6:	f7ff ff1d 	bl	8007524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	e000ed00 	.word	0xe000ed00
 80076f8:	410fc271 	.word	0x410fc271
 80076fc:	410fc270 	.word	0x410fc270
 8007700:	e000e400 	.word	0xe000e400
 8007704:	20000bf8 	.word	0x20000bf8
 8007708:	20000bfc 	.word	0x20000bfc
 800770c:	e000ed20 	.word	0xe000ed20
 8007710:	2000000c 	.word	0x2000000c
 8007714:	e000ef34 	.word	0xe000ef34

08007718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	607b      	str	r3, [r7, #4]
}
 8007730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007732:	4b10      	ldr	r3, [pc, #64]	@ (8007774 <vPortEnterCritical+0x5c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3301      	adds	r3, #1
 8007738:	4a0e      	ldr	r2, [pc, #56]	@ (8007774 <vPortEnterCritical+0x5c>)
 800773a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800773c:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <vPortEnterCritical+0x5c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d110      	bne.n	8007766 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007744:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <vPortEnterCritical+0x60>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <vPortEnterCritical+0x4e>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	603b      	str	r3, [r7, #0]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <vPortEnterCritical+0x4a>
	}
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	2000000c 	.word	0x2000000c
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007782:	4b12      	ldr	r3, [pc, #72]	@ (80077cc <vPortExitCritical+0x50>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <vPortExitCritical+0x26>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	607b      	str	r3, [r7, #4]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077a2:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <vPortExitCritical+0x50>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	4a08      	ldr	r2, [pc, #32]	@ (80077cc <vPortExitCritical+0x50>)
 80077aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077ac:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <vPortExitCritical+0x50>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d105      	bne.n	80077c0 <vPortExitCritical+0x44>
 80077b4:	2300      	movs	r3, #0
 80077b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f383 8811 	msr	BASEPRI, r3
}
 80077be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	2000000c 	.word	0x2000000c

080077d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077d0:	f3ef 8009 	mrs	r0, PSP
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4b15      	ldr	r3, [pc, #84]	@ (8007830 <pxCurrentTCBConst>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	f01e 0f10 	tst.w	lr, #16
 80077e0:	bf08      	it	eq
 80077e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	6010      	str	r0, [r2, #0]
 80077ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80077f4:	f380 8811 	msr	BASEPRI, r0
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f7fe ff96 	bl	8006730 <vTaskSwitchContext>
 8007804:	f04f 0000 	mov.w	r0, #0
 8007808:	f380 8811 	msr	BASEPRI, r0
 800780c:	bc09      	pop	{r0, r3}
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	6808      	ldr	r0, [r1, #0]
 8007812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007816:	f01e 0f10 	tst.w	lr, #16
 800781a:	bf08      	it	eq
 800781c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007820:	f380 8809 	msr	PSP, r0
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	f3af 8000 	nop.w

08007830 <pxCurrentTCBConst>:
 8007830:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop

08007838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	607b      	str	r3, [r7, #4]
}
 8007850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007852:	f7fe feb3 	bl	80065bc <xTaskIncrementTick>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800785c:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <SysTick_Handler+0x40>)
 800785e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	2300      	movs	r3, #0
 8007866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f383 8811 	msr	BASEPRI, r3
}
 800786e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007880:	4b0b      	ldr	r3, [pc, #44]	@ (80078b0 <vPortSetupTimerInterrupt+0x34>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007886:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <vPortSetupTimerInterrupt+0x38>)
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800788c:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <vPortSetupTimerInterrupt+0x3c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0a      	ldr	r2, [pc, #40]	@ (80078bc <vPortSetupTimerInterrupt+0x40>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	099b      	lsrs	r3, r3, #6
 8007898:	4a09      	ldr	r2, [pc, #36]	@ (80078c0 <vPortSetupTimerInterrupt+0x44>)
 800789a:	3b01      	subs	r3, #1
 800789c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800789e:	4b04      	ldr	r3, [pc, #16]	@ (80078b0 <vPortSetupTimerInterrupt+0x34>)
 80078a0:	2207      	movs	r2, #7
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	e000e010 	.word	0xe000e010
 80078b4:	e000e018 	.word	0xe000e018
 80078b8:	20000000 	.word	0x20000000
 80078bc:	10624dd3 	.word	0x10624dd3
 80078c0:	e000e014 	.word	0xe000e014

080078c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80078d4 <vPortEnableVFP+0x10>
 80078c8:	6801      	ldr	r1, [r0, #0]
 80078ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80078ce:	6001      	str	r1, [r0, #0]
 80078d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078d2:	bf00      	nop
 80078d4:	e000ed88 	.word	0xe000ed88

080078d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078de:	f3ef 8305 	mrs	r3, IPSR
 80078e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	d915      	bls.n	8007916 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ea:	4a18      	ldr	r2, [pc, #96]	@ (800794c <vPortValidateInterruptPriority+0x74>)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078f4:	4b16      	ldr	r3, [pc, #88]	@ (8007950 <vPortValidateInterruptPriority+0x78>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	7afa      	ldrb	r2, [r7, #11]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d20b      	bcs.n	8007916 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	607b      	str	r3, [r7, #4]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007916:	4b0f      	ldr	r3, [pc, #60]	@ (8007954 <vPortValidateInterruptPriority+0x7c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800791e:	4b0e      	ldr	r3, [pc, #56]	@ (8007958 <vPortValidateInterruptPriority+0x80>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d90b      	bls.n	800793e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	e7fd      	b.n	800793a <vPortValidateInterruptPriority+0x62>
	}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	e000e3f0 	.word	0xe000e3f0
 8007950:	20000bf8 	.word	0x20000bf8
 8007954:	e000ed0c 	.word	0xe000ed0c
 8007958:	20000bfc 	.word	0x20000bfc

0800795c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	@ 0x28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007968:	f7fe fd6c 	bl	8006444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800796c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ae0 <pvPortMalloc+0x184>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007974:	f000 f924 	bl	8007bc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007978:	4b5a      	ldr	r3, [pc, #360]	@ (8007ae4 <pvPortMalloc+0x188>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8095 	bne.w	8007ab0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01e      	beq.n	80079ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800798c:	2208      	movs	r2, #8
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4413      	add	r3, r2
 8007992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b00      	cmp	r3, #0
 800799c:	d015      	beq.n	80079ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	3308      	adds	r3, #8
 80079a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <pvPortMalloc+0x6e>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	617b      	str	r3, [r7, #20]
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	e7fd      	b.n	80079c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d06f      	beq.n	8007ab0 <pvPortMalloc+0x154>
 80079d0:	4b45      	ldr	r3, [pc, #276]	@ (8007ae8 <pvPortMalloc+0x18c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d86a      	bhi.n	8007ab0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079da:	4b44      	ldr	r3, [pc, #272]	@ (8007aec <pvPortMalloc+0x190>)
 80079dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079de:	4b43      	ldr	r3, [pc, #268]	@ (8007aec <pvPortMalloc+0x190>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079e4:	e004      	b.n	80079f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d903      	bls.n	8007a02 <pvPortMalloc+0xa6>
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f1      	bne.n	80079e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a02:	4b37      	ldr	r3, [pc, #220]	@ (8007ae0 <pvPortMalloc+0x184>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d051      	beq.n	8007ab0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2208      	movs	r2, #8
 8007a12:	4413      	add	r3, r2
 8007a14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	1ad2      	subs	r2, r2, r3
 8007a26:	2308      	movs	r3, #8
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d920      	bls.n	8007a70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4413      	add	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <pvPortMalloc+0xfc>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a6a:	69b8      	ldr	r0, [r7, #24]
 8007a6c:	f000 f90a 	bl	8007c84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae8 <pvPortMalloc+0x18c>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae8 <pvPortMalloc+0x18c>)
 8007a7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae8 <pvPortMalloc+0x18c>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	4b1b      	ldr	r3, [pc, #108]	@ (8007af0 <pvPortMalloc+0x194>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d203      	bcs.n	8007a92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a8a:	4b17      	ldr	r3, [pc, #92]	@ (8007ae8 <pvPortMalloc+0x18c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a18      	ldr	r2, [pc, #96]	@ (8007af0 <pvPortMalloc+0x194>)
 8007a90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	4b13      	ldr	r3, [pc, #76]	@ (8007ae4 <pvPortMalloc+0x188>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007aa6:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <pvPortMalloc+0x198>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	4a11      	ldr	r2, [pc, #68]	@ (8007af4 <pvPortMalloc+0x198>)
 8007aae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ab0:	f7fe fcd6 	bl	8006460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <pvPortMalloc+0x17a>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60fb      	str	r3, [r7, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3728      	adds	r7, #40	@ 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20002c08 	.word	0x20002c08
 8007ae4:	20002c1c 	.word	0x20002c1c
 8007ae8:	20002c0c 	.word	0x20002c0c
 8007aec:	20002c00 	.word	0x20002c00
 8007af0:	20002c10 	.word	0x20002c10
 8007af4:	20002c14 	.word	0x20002c14

08007af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d04f      	beq.n	8007baa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	425b      	negs	r3, r3
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4413      	add	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	4b25      	ldr	r3, [pc, #148]	@ (8007bb4 <vPortFree+0xbc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4013      	ands	r3, r2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <vPortFree+0x46>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	60fb      	str	r3, [r7, #12]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00b      	beq.n	8007b5e <vPortFree+0x66>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	60bb      	str	r3, [r7, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	4b14      	ldr	r3, [pc, #80]	@ (8007bb4 <vPortFree+0xbc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01e      	beq.n	8007baa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d11a      	bne.n	8007baa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb4 <vPortFree+0xbc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	401a      	ands	r2, r3
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b84:	f7fe fc5e 	bl	8006444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb8 <vPortFree+0xc0>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4413      	add	r3, r2
 8007b92:	4a09      	ldr	r2, [pc, #36]	@ (8007bb8 <vPortFree+0xc0>)
 8007b94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b96:	6938      	ldr	r0, [r7, #16]
 8007b98:	f000 f874 	bl	8007c84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b9c:	4b07      	ldr	r3, [pc, #28]	@ (8007bbc <vPortFree+0xc4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	4a06      	ldr	r2, [pc, #24]	@ (8007bbc <vPortFree+0xc4>)
 8007ba4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ba6:	f7fe fc5b 	bl	8006460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007baa:	bf00      	nop
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20002c1c 	.word	0x20002c1c
 8007bb8:	20002c0c 	.word	0x20002c0c
 8007bbc:	20002c18 	.word	0x20002c18

08007bc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007bca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007bcc:	4b27      	ldr	r3, [pc, #156]	@ (8007c6c <prvHeapInit+0xac>)
 8007bce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00c      	beq.n	8007bf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3307      	adds	r3, #7
 8007bde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0307 	bic.w	r3, r3, #7
 8007be6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	4a1f      	ldr	r2, [pc, #124]	@ (8007c6c <prvHeapInit+0xac>)
 8007bf0:	4413      	add	r3, r2
 8007bf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c70 <prvHeapInit+0xb0>)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8007c70 <prvHeapInit+0xb0>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4413      	add	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c0c:	2208      	movs	r2, #8
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a15      	ldr	r2, [pc, #84]	@ (8007c74 <prvHeapInit+0xb4>)
 8007c20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c22:	4b14      	ldr	r3, [pc, #80]	@ (8007c74 <prvHeapInit+0xb4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2200      	movs	r2, #0
 8007c28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c2a:	4b12      	ldr	r3, [pc, #72]	@ (8007c74 <prvHeapInit+0xb4>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	1ad2      	subs	r2, r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c40:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <prvHeapInit+0xb4>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007c78 <prvHeapInit+0xb8>)
 8007c4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4a09      	ldr	r2, [pc, #36]	@ (8007c7c <prvHeapInit+0xbc>)
 8007c56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c58:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <prvHeapInit+0xc0>)
 8007c5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007c5e:	601a      	str	r2, [r3, #0]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	20000c00 	.word	0x20000c00
 8007c70:	20002c00 	.word	0x20002c00
 8007c74:	20002c08 	.word	0x20002c08
 8007c78:	20002c10 	.word	0x20002c10
 8007c7c:	20002c0c 	.word	0x20002c0c
 8007c80:	20002c1c 	.word	0x20002c1c

08007c84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c8c:	4b28      	ldr	r3, [pc, #160]	@ (8007d30 <prvInsertBlockIntoFreeList+0xac>)
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e002      	b.n	8007c98 <prvInsertBlockIntoFreeList+0x14>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d8f7      	bhi.n	8007c92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	4413      	add	r3, r2
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d108      	bne.n	8007cc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	441a      	add	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d118      	bne.n	8007d0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	4b15      	ldr	r3, [pc, #84]	@ (8007d34 <prvInsertBlockIntoFreeList+0xb0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d00d      	beq.n	8007d02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e008      	b.n	8007d14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d02:	4b0c      	ldr	r3, [pc, #48]	@ (8007d34 <prvInsertBlockIntoFreeList+0xb0>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e003      	b.n	8007d14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d002      	beq.n	8007d22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	20002c00 	.word	0x20002c00
 8007d34:	20002c08 	.word	0x20002c08

08007d38 <memset>:
 8007d38:	4402      	add	r2, r0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d100      	bne.n	8007d42 <memset+0xa>
 8007d40:	4770      	bx	lr
 8007d42:	f803 1b01 	strb.w	r1, [r3], #1
 8007d46:	e7f9      	b.n	8007d3c <memset+0x4>

08007d48 <_reclaim_reent>:
 8007d48:	4b2d      	ldr	r3, [pc, #180]	@ (8007e00 <_reclaim_reent+0xb8>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4283      	cmp	r3, r0
 8007d4e:	b570      	push	{r4, r5, r6, lr}
 8007d50:	4604      	mov	r4, r0
 8007d52:	d053      	beq.n	8007dfc <_reclaim_reent+0xb4>
 8007d54:	69c3      	ldr	r3, [r0, #28]
 8007d56:	b31b      	cbz	r3, 8007da0 <_reclaim_reent+0x58>
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	b163      	cbz	r3, 8007d76 <_reclaim_reent+0x2e>
 8007d5c:	2500      	movs	r5, #0
 8007d5e:	69e3      	ldr	r3, [r4, #28]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	5959      	ldr	r1, [r3, r5]
 8007d64:	b9b1      	cbnz	r1, 8007d94 <_reclaim_reent+0x4c>
 8007d66:	3504      	adds	r5, #4
 8007d68:	2d80      	cmp	r5, #128	@ 0x80
 8007d6a:	d1f8      	bne.n	8007d5e <_reclaim_reent+0x16>
 8007d6c:	69e3      	ldr	r3, [r4, #28]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	68d9      	ldr	r1, [r3, #12]
 8007d72:	f000 f87b 	bl	8007e6c <_free_r>
 8007d76:	69e3      	ldr	r3, [r4, #28]
 8007d78:	6819      	ldr	r1, [r3, #0]
 8007d7a:	b111      	cbz	r1, 8007d82 <_reclaim_reent+0x3a>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 f875 	bl	8007e6c <_free_r>
 8007d82:	69e3      	ldr	r3, [r4, #28]
 8007d84:	689d      	ldr	r5, [r3, #8]
 8007d86:	b15d      	cbz	r5, 8007da0 <_reclaim_reent+0x58>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	682d      	ldr	r5, [r5, #0]
 8007d8e:	f000 f86d 	bl	8007e6c <_free_r>
 8007d92:	e7f8      	b.n	8007d86 <_reclaim_reent+0x3e>
 8007d94:	680e      	ldr	r6, [r1, #0]
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 f868 	bl	8007e6c <_free_r>
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	e7e1      	b.n	8007d64 <_reclaim_reent+0x1c>
 8007da0:	6961      	ldr	r1, [r4, #20]
 8007da2:	b111      	cbz	r1, 8007daa <_reclaim_reent+0x62>
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 f861 	bl	8007e6c <_free_r>
 8007daa:	69e1      	ldr	r1, [r4, #28]
 8007dac:	b111      	cbz	r1, 8007db4 <_reclaim_reent+0x6c>
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 f85c 	bl	8007e6c <_free_r>
 8007db4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007db6:	b111      	cbz	r1, 8007dbe <_reclaim_reent+0x76>
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 f857 	bl	8007e6c <_free_r>
 8007dbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dc0:	b111      	cbz	r1, 8007dc8 <_reclaim_reent+0x80>
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 f852 	bl	8007e6c <_free_r>
 8007dc8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007dca:	b111      	cbz	r1, 8007dd2 <_reclaim_reent+0x8a>
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 f84d 	bl	8007e6c <_free_r>
 8007dd2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007dd4:	b111      	cbz	r1, 8007ddc <_reclaim_reent+0x94>
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 f848 	bl	8007e6c <_free_r>
 8007ddc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007dde:	b111      	cbz	r1, 8007de6 <_reclaim_reent+0x9e>
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 f843 	bl	8007e6c <_free_r>
 8007de6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007de8:	b111      	cbz	r1, 8007df0 <_reclaim_reent+0xa8>
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 f83e 	bl	8007e6c <_free_r>
 8007df0:	6a23      	ldr	r3, [r4, #32]
 8007df2:	b11b      	cbz	r3, 8007dfc <_reclaim_reent+0xb4>
 8007df4:	4620      	mov	r0, r4
 8007df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dfa:	4718      	bx	r3
 8007dfc:	bd70      	pop	{r4, r5, r6, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000010 	.word	0x20000010

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	@ (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	@ (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	@ (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	@ (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 f87e 	bl	8007f18 <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08007fc0 	.word	0x08007fc0
 8007e40:	08007fc0 	.word	0x08007fc0
 8007e44:	08007fc0 	.word	0x08007fc0
 8007e48:	08007fc4 	.word	0x08007fc4

08007e4c <__retarget_lock_acquire_recursive>:
 8007e4c:	4770      	bx	lr

08007e4e <__retarget_lock_release_recursive>:
 8007e4e:	4770      	bx	lr

08007e50 <memcpy>:
 8007e50:	440a      	add	r2, r1
 8007e52:	4291      	cmp	r1, r2
 8007e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e58:	d100      	bne.n	8007e5c <memcpy+0xc>
 8007e5a:	4770      	bx	lr
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e66:	4291      	cmp	r1, r2
 8007e68:	d1f9      	bne.n	8007e5e <memcpy+0xe>
 8007e6a:	bd10      	pop	{r4, pc}

08007e6c <_free_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4605      	mov	r5, r0
 8007e70:	2900      	cmp	r1, #0
 8007e72:	d041      	beq.n	8007ef8 <_free_r+0x8c>
 8007e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e78:	1f0c      	subs	r4, r1, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bfb8      	it	lt
 8007e7e:	18e4      	addlt	r4, r4, r3
 8007e80:	f000 f83e 	bl	8007f00 <__malloc_lock>
 8007e84:	4a1d      	ldr	r2, [pc, #116]	@ (8007efc <_free_r+0x90>)
 8007e86:	6813      	ldr	r3, [r2, #0]
 8007e88:	b933      	cbnz	r3, 8007e98 <_free_r+0x2c>
 8007e8a:	6063      	str	r3, [r4, #4]
 8007e8c:	6014      	str	r4, [r2, #0]
 8007e8e:	4628      	mov	r0, r5
 8007e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e94:	f000 b83a 	b.w	8007f0c <__malloc_unlock>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d908      	bls.n	8007eae <_free_r+0x42>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	1821      	adds	r1, r4, r0
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	bf01      	itttt	eq
 8007ea4:	6819      	ldreq	r1, [r3, #0]
 8007ea6:	685b      	ldreq	r3, [r3, #4]
 8007ea8:	1809      	addeq	r1, r1, r0
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	e7ed      	b.n	8007e8a <_free_r+0x1e>
 8007eae:	461a      	mov	r2, r3
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	b10b      	cbz	r3, 8007eb8 <_free_r+0x4c>
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d9fa      	bls.n	8007eae <_free_r+0x42>
 8007eb8:	6811      	ldr	r1, [r2, #0]
 8007eba:	1850      	adds	r0, r2, r1
 8007ebc:	42a0      	cmp	r0, r4
 8007ebe:	d10b      	bne.n	8007ed8 <_free_r+0x6c>
 8007ec0:	6820      	ldr	r0, [r4, #0]
 8007ec2:	4401      	add	r1, r0
 8007ec4:	1850      	adds	r0, r2, r1
 8007ec6:	4283      	cmp	r3, r0
 8007ec8:	6011      	str	r1, [r2, #0]
 8007eca:	d1e0      	bne.n	8007e8e <_free_r+0x22>
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	6053      	str	r3, [r2, #4]
 8007ed2:	4408      	add	r0, r1
 8007ed4:	6010      	str	r0, [r2, #0]
 8007ed6:	e7da      	b.n	8007e8e <_free_r+0x22>
 8007ed8:	d902      	bls.n	8007ee0 <_free_r+0x74>
 8007eda:	230c      	movs	r3, #12
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	e7d6      	b.n	8007e8e <_free_r+0x22>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	1821      	adds	r1, r4, r0
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf04      	itt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	6063      	str	r3, [r4, #4]
 8007eee:	bf04      	itt	eq
 8007ef0:	1809      	addeq	r1, r1, r0
 8007ef2:	6021      	streq	r1, [r4, #0]
 8007ef4:	6054      	str	r4, [r2, #4]
 8007ef6:	e7ca      	b.n	8007e8e <_free_r+0x22>
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	20002d5c 	.word	0x20002d5c

08007f00 <__malloc_lock>:
 8007f00:	4801      	ldr	r0, [pc, #4]	@ (8007f08 <__malloc_lock+0x8>)
 8007f02:	f7ff bfa3 	b.w	8007e4c <__retarget_lock_acquire_recursive>
 8007f06:	bf00      	nop
 8007f08:	20002d58 	.word	0x20002d58

08007f0c <__malloc_unlock>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	@ (8007f14 <__malloc_unlock+0x8>)
 8007f0e:	f7ff bf9e 	b.w	8007e4e <__retarget_lock_release_recursive>
 8007f12:	bf00      	nop
 8007f14:	20002d58 	.word	0x20002d58

08007f18 <_init>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr

08007f24 <_fini>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr
