
Wiseled_LBR_Illuminator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008120  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080082b0  080082b0  000092b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800834c  0800834c  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800834c  0800834c  0000934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008354  08008354  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008354  08008354  00009354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008358  08008358  00009358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800835c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  20000060  080083bc  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d60  080083bc  0000ad60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf1d  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2c  00000000  00000000  00026fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0002ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c7  00000000  00000000  0002c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247cc  00000000  00000000  0002d7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b061  00000000  00000000  00051fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3455  00000000  00000000  0006d004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150459  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e8  00000000  00000000  0015049c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00156d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008298 	.word	0x08008298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008298 	.word	0x08008298

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	@ (800056c <vApplicationGetTimerTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <vApplicationGetTimerTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800055e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	2000031c 	.word	0x2000031c
 8000570:	200003bc 	.word	0x200003bc

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fd52 	bl	8001022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f847 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fa6f 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000586:	f000 fa4f 	bl	8000a28 <MX_DMA_Init>
  MX_ADC1_Init();
 800058a:	f000 f8a3 	bl	80006d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800058e:	f000 f957 	bl	8000840 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000592:	f000 fa19 	bl	80009c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Start the PWM outputs */
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000596:	2100      	movs	r1, #0
 8000598:	4818      	ldr	r0, [pc, #96]	@ (80005fc <main+0x88>)
 800059a:	f003 fadb 	bl	8003b54 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800059e:	2104      	movs	r1, #4
 80005a0:	4816      	ldr	r0, [pc, #88]	@ (80005fc <main+0x88>)
 80005a2:	f003 fad7 	bl	8003b54 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005a6:	2108      	movs	r1, #8
 80005a8:	4814      	ldr	r0, [pc, #80]	@ (80005fc <main+0x88>)
 80005aa:	f003 fad3 	bl	8003b54 <HAL_TIM_PWM_Start>

    /* Set LED1 PWM to 50% */
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80005ae:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <main+0x88>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2232      	movs	r2, #50	@ 0x32
 80005b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Hello World message via UART1 */
    char *hello_msg = "Hello Lisandro\r\n";
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <main+0x8c>)
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_UART_Transmit(&huart1, (uint8_t*)hello_msg, strlen(hello_msg), 1000);
 80005ba:	69f8      	ldr	r0, [r7, #28]
 80005bc:	f7ff fe08 	bl	80001d0 <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c8:	69f9      	ldr	r1, [r7, #28]
 80005ca:	480e      	ldr	r0, [pc, #56]	@ (8000604 <main+0x90>)
 80005cc:	f004 fba6 	bl	8004d1c <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <main+0x94>)
 80005d2:	463c      	mov	r4, r7
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e2:	463b      	mov	r3, r7
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f005 f888 	bl	80056fc <osThreadCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <main+0x98>)
 80005f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f2:	f005 f87c 	bl	80056ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x82>
 80005fa:	bf00      	nop
 80005fc:	20000868 	.word	0x20000868
 8000600:	080082b0 	.word	0x080082b0
 8000604:	200008b4 	.word	0x200008b4
 8000608:	080082d0 	.word	0x080082d0
 800060c:	2000093c 	.word	0x2000093c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	@ 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	@ 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fd4a 	bl	80080b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000636:	f001 ffc7 	bl	80025c8 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 fa98 	bl	8000b74 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f001 ffa2 	bl	800258c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000648:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <SystemClock_Config+0xc0>)
 800064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800064e:	4a20      	ldr	r2, [pc, #128]	@ (80006d0 <SystemClock_Config+0xc0>)
 8000650:	f023 0318 	bic.w	r3, r3, #24
 8000654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000658:	2314      	movs	r3, #20
 800065a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000668:	2360      	movs	r3, #96	@ 0x60
 800066a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000670:	2301      	movs	r3, #1
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000678:	2310      	movs	r3, #16
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fff1 	bl	8002674 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000698:	f000 fa6c 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fbf1 	bl	8002e9c <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006c0:	f000 fa58 	bl	8000b74 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c4:	f003 f836 	bl	8003734 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	@ 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000820 <MX_ADC1_Init+0x14c>)
 80006ec:	4a4d      	ldr	r2, [pc, #308]	@ (8000824 <MX_ADC1_Init+0x150>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006f0:	4b4b      	ldr	r3, [pc, #300]	@ (8000820 <MX_ADC1_Init+0x14c>)
 80006f2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f8:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <MX_ADC1_Init+0x14c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fe:	4b48      	ldr	r3, [pc, #288]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000704:	4b46      	ldr	r3, [pc, #280]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000706:	2201      	movs	r2, #1
 8000708:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800070a:	4b45      	ldr	r3, [pc, #276]	@ (8000820 <MX_ADC1_Init+0x14c>)
 800070c:	2208      	movs	r2, #8
 800070e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000710:	4b43      	ldr	r3, [pc, #268]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000712:	2200      	movs	r2, #0
 8000714:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000716:	4b42      	ldr	r3, [pc, #264]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000718:	2200      	movs	r2, #0
 800071a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 800071c:	4b40      	ldr	r3, [pc, #256]	@ (8000820 <MX_ADC1_Init+0x14c>)
 800071e:	2206      	movs	r2, #6
 8000720:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000722:	4b3f      	ldr	r3, [pc, #252]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072a:	4b3d      	ldr	r3, [pc, #244]	@ (8000820 <MX_ADC1_Init+0x14c>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000730:	4b3b      	ldr	r3, [pc, #236]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000732:	2200      	movs	r2, #0
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000736:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073e:	4b38      	ldr	r3, [pc, #224]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000744:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074c:	4834      	ldr	r0, [pc, #208]	@ (8000820 <MX_ADC1_Init+0x14c>)
 800074e:	f000 fe2d 	bl	80013ac <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000758:	f000 fa0c 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075c:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <MX_ADC1_Init+0x154>)
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000760:	2306      	movs	r3, #6
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000768:	237f      	movs	r3, #127	@ 0x7f
 800076a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076c:	2304      	movs	r3, #4
 800076e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	4829      	ldr	r0, [pc, #164]	@ (8000820 <MX_ADC1_Init+0x14c>)
 800077a:	f000 ff59 	bl	8001630 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000784:	f000 f9f6 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <MX_ADC1_Init+0x158>)
 800078a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800078c:	230c      	movs	r3, #12
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4822      	ldr	r0, [pc, #136]	@ (8000820 <MX_ADC1_Init+0x14c>)
 8000796:	f000 ff4b 	bl	8001630 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80007a0:	f000 f9e8 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <MX_ADC1_Init+0x15c>)
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007a8:	2312      	movs	r3, #18
 80007aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	481b      	ldr	r0, [pc, #108]	@ (8000820 <MX_ADC1_Init+0x14c>)
 80007b2:	f000 ff3d 	bl	8001630 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80007bc:	f000 f9da 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_ADC1_Init+0x160>)
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007c4:	2318      	movs	r3, #24
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	@ (8000820 <MX_ADC1_Init+0x14c>)
 80007ce:	f000 ff2f 	bl	8001630 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80007d8:	f000 f9cc 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_ADC1_Init+0x164>)
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_ADC1_Init+0x14c>)
 80007ec:	f000 ff20 	bl	8001630 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80007f6:	f000 f9bd 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_ADC1_Init+0x168>)
 80007fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007fe:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_ADC1_Init+0x14c>)
 800080a:	f000 ff11 	bl	8001630 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000814:	f000 f9ae 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200007bc 	.word	0x200007bc
 8000824:	50040000 	.word	0x50040000
 8000828:	19200040 	.word	0x19200040
 800082c:	21800100 	.word	0x21800100
 8000830:	25b00200 	.word	0x25b00200
 8000834:	2a000400 	.word	0x2a000400
 8000838:	2e300800 	.word	0x2e300800
 800083c:	32601000 	.word	0x32601000

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09a      	sub	sp, #104	@ 0x68
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000860:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	222c      	movs	r2, #44	@ 0x2c
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f007 fc1c 	bl	80080b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000880:	4b4f      	ldr	r3, [pc, #316]	@ (80009c0 <MX_TIM1_Init+0x180>)
 8000882:	4a50      	ldr	r2, [pc, #320]	@ (80009c4 <MX_TIM1_Init+0x184>)
 8000884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000886:	4b4e      	ldr	r3, [pc, #312]	@ (80009c0 <MX_TIM1_Init+0x180>)
 8000888:	224f      	movs	r2, #79	@ 0x4f
 800088a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b4c      	ldr	r3, [pc, #304]	@ (80009c0 <MX_TIM1_Init+0x180>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000892:	4b4b      	ldr	r3, [pc, #300]	@ (80009c0 <MX_TIM1_Init+0x180>)
 8000894:	2263      	movs	r2, #99	@ 0x63
 8000896:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b49      	ldr	r3, [pc, #292]	@ (80009c0 <MX_TIM1_Init+0x180>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800089e:	4b48      	ldr	r3, [pc, #288]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b46      	ldr	r3, [pc, #280]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008aa:	4845      	ldr	r0, [pc, #276]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80008ac:	f003 f844 	bl	8003938 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008b6:	f000 f95d 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008c4:	4619      	mov	r1, r3
 80008c6:	483e      	ldr	r0, [pc, #248]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80008c8:	f003 fc3e 	bl	8004148 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008d2:	f000 f94f 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008d6:	483a      	ldr	r0, [pc, #232]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80008d8:	f003 f8da 	bl	8003a90 <HAL_TIM_PWM_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008e2:	f000 f947 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4831      	ldr	r0, [pc, #196]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80008fa:	f004 f8c5 	bl	8004a88 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000904:	f000 f936 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000908:	2360      	movs	r3, #96	@ 0x60
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000910:	2300      	movs	r3, #0
 8000912:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000924:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4824      	ldr	r0, [pc, #144]	@ (80009c0 <MX_TIM1_Init+0x180>)
 800092e:	f003 faf7 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000938:	f000 f91c 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000940:	2204      	movs	r2, #4
 8000942:	4619      	mov	r1, r3
 8000944:	481e      	ldr	r0, [pc, #120]	@ (80009c0 <MX_TIM1_Init+0x180>)
 8000946:	f003 faeb 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000950:	f000 f910 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000954:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000958:	2208      	movs	r2, #8
 800095a:	4619      	mov	r1, r3
 800095c:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <MX_TIM1_Init+0x180>)
 800095e:	f003 fadf 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000968:	f000 f904 	bl	8000b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000984:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800098e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80009a2:	f004 f8d7 	bl	8004b54 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80009ac:	f000 f8e2 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <MX_TIM1_Init+0x180>)
 80009b2:	f000 f9c1 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 80009b6:	bf00      	nop
 80009b8:	3768      	adds	r7, #104	@ 0x68
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000868 	.word	0x20000868
 80009c4:	40012c00 	.word	0x40012c00

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	@ (8000a24 <MX_USART1_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a0c:	f004 f938 	bl	8004c80 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f000 f8ad 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200008b4 	.word	0x200008b4
 8000a24:	40013800 	.word	0x40013800

08000a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_DMA_Init+0x38>)
 8000a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <MX_DMA_Init+0x38>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_DMA_Init+0x38>)
 8000a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f001 fa8a 	bl	8001f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a50:	200b      	movs	r0, #11
 8000a52:	f001 faa3 	bl	8001f9c <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4a28      	ldr	r2, [pc, #160]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a22      	ldr	r2, [pc, #136]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <MX_GPIO_Init+0xd4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	481d      	ldr	r0, [pc, #116]	@ (8000b3c <MX_GPIO_Init+0xd8>)
 8000ac8:	f001 fd48 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000acc:	2304      	movs	r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000adc:	2307      	movs	r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f001 fbcd 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0e:	f001 fbbb 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b12:	2308      	movs	r3, #8
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_GPIO_Init+0xd8>)
 8000b2a:	f001 fbad 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000400 	.word	0x48000400

08000b40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f004 fe23 	bl	8005794 <osDelay>
 8000b4e:	e7fb      	b.n	8000b48 <StartDefaultTask+0x8>

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b62:	f000 fa77 	bl	8001054 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40001400 	.word	0x40001400

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <Error_Handler+0x8>

08000b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	f06f 0001 	mvn.w	r0, #1
 8000bbe:	f001 f9d1 	bl	8001f64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b09e      	sub	sp, #120	@ 0x78
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2254      	movs	r2, #84	@ 0x54
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fa61 	bl	80080b8 <memset>
  if(hadc->Instance==ADC1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000ce8 <HAL_ADC_MspInit+0x118>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d16f      	bne.n	8000ce0 <HAL_ADC_MspInit+0x110>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000c14:	2310      	movs	r3, #16
 8000c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fb8a 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000c3a:	f7ff ff9b 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cec <HAL_ADC_MspInit+0x11c>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a2a      	ldr	r2, [pc, #168]	@ (8000cec <HAL_ADC_MspInit+0x11c>)
 8000c44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b28      	ldr	r3, [pc, #160]	@ (8000cec <HAL_ADC_MspInit+0x11c>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <HAL_ADC_MspInit+0x11c>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	4a24      	ldr	r2, [pc, #144]	@ (8000cec <HAL_ADC_MspInit+0x11c>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c62:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <HAL_ADC_MspInit+0x11c>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = LED1_ADC_Current_Pin|LED2_ADC_Current_Pin|LED3_ADC_Current_Pin|LED1_ADC_Temperature_Pin
 8000c6e:	23fa      	movs	r3, #250	@ 0xfa
 8000c70:	667b      	str	r3, [r7, #100]	@ 0x64
                          |LED2_ADC_Temperature_Pin|LED3_ADC_Temperature_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c72:	230b      	movs	r3, #11
 8000c74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c84:	f001 fb00 	bl	8002288 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf4 <HAL_ADC_MspInit+0x124>)
 8000c8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000ca2:	2280      	movs	r2, #128	@ 0x80
 8000ca4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000cb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000cb8:	2220      	movs	r2, #32
 8000cba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000cbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc4:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000cc6:	f001 f977 	bl	8001fb8 <HAL_DMA_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000cd0:	f7ff ff50 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <HAL_ADC_MspInit+0x120>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3778      	adds	r7, #120	@ 0x78
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	50040000 	.word	0x50040000
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	20000820 	.word	0x20000820
 8000cf4:	40020008 	.word	0x40020008

08000cf8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_TIM_Base_MspInit+0x38>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10b      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_TIM_Base_MspInit+0x3c>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a09      	ldr	r2, [pc, #36]	@ (8000d34 <HAL_TIM_Base_MspInit+0x3c>)
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <HAL_TIM_Base_MspInit+0x3c>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d11d      	bne.n	8000d96 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_TIM_MspPostInit+0x6c>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	4a11      	ldr	r2, [pc, #68]	@ (8000da4 <HAL_TIM_MspPostInit+0x6c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_TIM_MspPostInit+0x6c>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED1_PWM_White_Pin|LED2_PWM_Green_Pin|LED3_PWM_Red_Pin;
 8000d72:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d92:	f001 fa79 	bl	8002288 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40012c00 	.word	0x40012c00
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09e      	sub	sp, #120	@ 0x78
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2254      	movs	r2, #84	@ 0x54
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f007 f975 	bl	80080b8 <memset>
  if(huart->Instance==USART1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <HAL_UART_MspInit+0xa4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d135      	bne.n	8000e44 <HAL_UART_MspInit+0x9c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 faaf 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df0:	f7ff fec0 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <HAL_UART_MspInit+0xa8>)
 8000df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df8:	4a15      	ldr	r2, [pc, #84]	@ (8000e50 <HAL_UART_MspInit+0xa8>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <HAL_UART_MspInit+0xa8>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <HAL_UART_MspInit+0xa8>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a0f      	ldr	r2, [pc, #60]	@ (8000e50 <HAL_UART_MspInit+0xa8>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <HAL_UART_MspInit+0xa8>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e24:	23c0      	movs	r3, #192	@ 0xc0
 8000e26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e34:	2307      	movs	r3, #7
 8000e36:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_UART_MspInit+0xac>)
 8000e40:	f001 fa22 	bl	8002288 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e44:	bf00      	nop
 8000e46:	3778      	adds	r7, #120	@ 0x78
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40013800 	.word	0x40013800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	@ 0x38
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e66:	4b34      	ldr	r3, [pc, #208]	@ (8000f38 <HAL_InitTick+0xe0>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	4a33      	ldr	r2, [pc, #204]	@ (8000f38 <HAL_InitTick+0xe0>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e72:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <HAL_InitTick+0xe0>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7e:	f107 0210 	add.w	r2, r7, #16
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 f9cb 	bl	8003224 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e98:	f002 f998 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8000e9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e9e:	e004      	b.n	8000eaa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ea0:	f002 f994 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eac:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <HAL_InitTick+0xe4>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000eb8:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000eba:	4a22      	ldr	r2, [pc, #136]	@ (8000f44 <HAL_InitTick+0xec>)
 8000ebc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ec0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eca:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000ede:	4818      	ldr	r0, [pc, #96]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ee0:	f002 fd2a 	bl	8003938 <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000eea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11b      	bne.n	8000f2a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000ef2:	4813      	ldr	r0, [pc, #76]	@ (8000f40 <HAL_InitTick+0xe8>)
 8000ef4:	f002 fd78 	bl	80039e8 <HAL_TIM_Base_Start_IT>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000efe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d111      	bne.n	8000f2a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f06:	2037      	movs	r0, #55	@ 0x37
 8000f08:	f001 f848 	bl	8001f9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	d808      	bhi.n	8000f24 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000f12:	2200      	movs	r2, #0
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	2037      	movs	r0, #55	@ 0x37
 8000f18:	f001 f824 	bl	8001f64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_InitTick+0xf0>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e002      	b.n	8000f2a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3738      	adds	r7, #56	@ 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	431bde83 	.word	0x431bde83
 8000f40:	20000940 	.word	0x20000940
 8000f44:	40001400 	.word	0x40001400
 8000f48:	20000004 	.word	0x20000004

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <DMA1_Channel1_IRQHandler+0x10>)
 8000f8a:	f001 f8cd 	bl	8002128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000820 	.word	0x20000820

08000f98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <TIM7_IRQHandler+0x10>)
 8000f9e:	f002 feb7 	bl	8003d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000940 	.word	0x20000940

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001008 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff ffea 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	@ (8001010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <LoopForever+0xe>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800101c <LoopForever+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f007 f8c1 	bl	8008184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001002:	f7ff fab7 	bl	8000574 <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001008:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001014:	0800835c 	.word	0x0800835c
  ldr r2, =_sbss
 8001018:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800101c:	20002d60 	.word	0x20002d60

08001020 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_IRQHandler>

08001022 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 ff8e 	bl	8001f4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff ff10 	bl	8000e58 <HAL_InitTick>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001044:	f7ff fd9c 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001048:	79fb      	ldrb	r3, [r7, #7]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	2000098c 	.word	0x2000098c

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000098c 	.word	0x2000098c

08001094 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3360      	adds	r3, #96	@ 0x60
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <LL_ADC_SetOffset+0x44>)
 800111e:	4013      	ands	r3, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	4313      	orrs	r3, r2
 800112c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001134:	bf00      	nop
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	03fff000 	.word	0x03fff000

08001144 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3360      	adds	r3, #96	@ 0x60
 8001152:	461a      	mov	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3360      	adds	r3, #96	@ 0x60
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b087      	sub	sp, #28
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3330      	adds	r3, #48	@ 0x30
 80011b6:	461a      	mov	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	211f      	movs	r1, #31
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	401a      	ands	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	0e9b      	lsrs	r3, r3, #26
 80011de:	f003 011f 	and.w	r1, r3, #31
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	431a      	orrs	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011f2:	bf00      	nop
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011fe:	b480      	push	{r7}
 8001200:	b087      	sub	sp, #28
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3314      	adds	r3, #20
 800120e:	461a      	mov	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	0e5b      	lsrs	r3, r3, #25
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	4413      	add	r3, r2
 800121c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	0d1b      	lsrs	r3, r3, #20
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	2107      	movs	r1, #7
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	0d1b      	lsrs	r3, r3, #20
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	431a      	orrs	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800126c:	43db      	mvns	r3, r3
 800126e:	401a      	ands	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0318 	and.w	r3, r3, #24
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001278:	40d9      	lsrs	r1, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	400b      	ands	r3, r1
 800127e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001282:	431a      	orrs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	0007ffff 	.word	0x0007ffff

0800129c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6093      	str	r3, [r2, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012d4:	d101      	bne.n	80012da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80012f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001324:	d101      	bne.n	800132a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <LL_ADC_IsEnabled+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <LL_ADC_IsEnabled+0x1a>
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b04      	cmp	r3, #4
 8001370:	d101      	bne.n	8001376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b08      	cmp	r3, #8
 8001396:	d101      	bne.n	800139c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e126      	b.n	8001614 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fbfb 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff67 	bl	80012c0 <LL_ADC_IsDeepPowerDownEnabled>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff4d 	bl	800129c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff82 	bl	8001310 <LL_ADC_IsInternalRegulatorEnabled>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d115      	bne.n	800143e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff66 	bl	80012e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800141c:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <HAL_ADC_Init+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	4a7f      	ldr	r2, [pc, #508]	@ (8001620 <HAL_ADC_Init+0x274>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	3301      	adds	r3, #1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001430:	e002      	b.n	8001438 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3b01      	subs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f9      	bne.n	8001432 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff64 	bl	8001310 <LL_ADC_IsInternalRegulatorEnabled>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10d      	bne.n	800146a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001452:	f043 0210 	orr.w	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff75 	bl	800135e <LL_ADC_REG_IsConversionOngoing>
 8001474:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 80bf 	bne.w	8001602 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 80bb 	bne.w	8001602 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001490:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001494:	f043 0202 	orr.w	r2, r3, #2
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff49 	bl	8001338 <LL_ADC_IsEnabled>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10b      	bne.n	80014c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014ac:	485d      	ldr	r0, [pc, #372]	@ (8001624 <HAL_ADC_Init+0x278>)
 80014ae:	f7ff ff43 	bl	8001338 <LL_ADC_IsEnabled>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4619      	mov	r1, r3
 80014be:	485a      	ldr	r0, [pc, #360]	@ (8001628 <HAL_ADC_Init+0x27c>)
 80014c0:	f7ff fde8 	bl	8001094 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7e5b      	ldrb	r3, [r3, #25]
 80014c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d106      	bne.n	8001500 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	3b01      	subs	r3, #1
 80014f8:	045b      	lsls	r3, r3, #17
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001514:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	4b42      	ldr	r3, [pc, #264]	@ (800162c <HAL_ADC_Init+0x280>)
 8001524:	4013      	ands	r3, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	430b      	orrs	r3, r1
 800152e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff25 	bl	8001384 <LL_ADC_INJ_IsConversionOngoing>
 800153a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d13d      	bne.n	80015be <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d13a      	bne.n	80015be <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800154c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001554:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001564:	f023 0302 	bic.w	r3, r3, #2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	69b9      	ldr	r1, [r7, #24]
 800156e:	430b      	orrs	r3, r1
 8001570:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001578:	2b01      	cmp	r3, #1
 800157a:	d118      	bne.n	80015ae <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001586:	f023 0304 	bic.w	r3, r3, #4
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001592:	4311      	orrs	r1, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001598:	4311      	orrs	r1, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800159e:	430a      	orrs	r2, r1
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	e007      	b.n	80015be <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d10c      	bne.n	80015e0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	f023 010f 	bic.w	r1, r3, #15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80015de:	e007      	b.n	80015f0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 020f 	bic.w	r2, r2, #15
 80015ee:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f4:	f023 0303 	bic.w	r3, r3, #3
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001600:	e007      	b.n	8001612 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001606:	f043 0210 	orr.w	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001612:	7ffb      	ldrb	r3, [r7, #31]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	053e2d63 	.word	0x053e2d63
 8001624:	50040000 	.word	0x50040000
 8001628:	50040300 	.word	0x50040300
 800162c:	fff0c007 	.word	0xfff0c007

08001630 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0b6      	sub	sp, #216	@ 0xd8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x22>
 800164e:	2302      	movs	r3, #2
 8001650:	e3bb      	b.n	8001dca <HAL_ADC_ConfigChannel+0x79a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe7d 	bl	800135e <LL_ADC_REG_IsConversionOngoing>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 83a0 	bne.w	8001dac <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d824      	bhi.n	80016c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	3b02      	subs	r3, #2
 8001682:	2b03      	cmp	r3, #3
 8001684:	d81b      	bhi.n	80016be <HAL_ADC_ConfigChannel+0x8e>
 8001686:	a201      	add	r2, pc, #4	@ (adr r2, 800168c <HAL_ADC_ConfigChannel+0x5c>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016a5 	.word	0x080016a5
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016b5 	.word	0x080016b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800169c:	230c      	movs	r3, #12
 800169e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016a2:	e010      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80016a4:	2312      	movs	r3, #18
 80016a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016aa:	e00c      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80016ac:	2318      	movs	r3, #24
 80016ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016b2:	e008      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80016b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016bc:	e003      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80016be:	2306      	movs	r3, #6
 80016c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80016c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80016d4:	f7ff fd67 	bl	80011a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe3e 	bl	800135e <LL_ADC_REG_IsConversionOngoing>
 80016e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fe4a 	bl	8001384 <LL_ADC_INJ_IsConversionOngoing>
 80016f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 81a4 	bne.w	8001a46 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 819f 	bne.w	8001a46 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	f7ff fd72 	bl	80011fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d00a      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6919      	ldr	r1, [r3, #16]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800174c:	f7ff fcd6 	bl	80010fc <LL_ADC_SetOffset>
 8001750:	e179      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fcf3 	bl	8001144 <LL_ADC_GetOffsetChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10a      	bne.n	800177e <HAL_ADC_ConfigChannel+0x14e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fce8 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	0e9b      	lsrs	r3, r3, #26
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	e01e      	b.n	80017bc <HAL_ADC_ConfigChannel+0x18c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcdd 	bl	8001144 <LL_ADC_GetOffsetChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800179c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80017a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80017ac:	2320      	movs	r3, #32
 80017ae:	e004      	b.n	80017ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80017b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1a4>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0e9b      	lsrs	r3, r3, #26
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	e018      	b.n	8001806 <HAL_ADC_ConfigChannel+0x1d6>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80017e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80017f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80017f8:	2320      	movs	r3, #32
 80017fa:	e004      	b.n	8001806 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80017fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001806:	429a      	cmp	r2, r3
 8001808:	d106      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fcac 	bl	8001170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2101      	movs	r1, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc90 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10a      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x214>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fc85 	bl	8001144 <LL_ADC_GetOffsetChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	f003 021f 	and.w	r2, r3, #31
 8001842:	e01e      	b.n	8001882 <HAL_ADC_ConfigChannel+0x252>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fc7a 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001862:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800186a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001872:	2320      	movs	r3, #32
 8001874:	e004      	b.n	8001880 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_ADC_ConfigChannel+0x26a>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0e9b      	lsrs	r3, r3, #26
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	e018      	b.n	80018cc <HAL_ADC_ConfigChannel+0x29c>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80018ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80018b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80018b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80018be:	2320      	movs	r3, #32
 80018c0:	e004      	b.n	80018cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80018c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d106      	bne.n	80018de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc49 	bl	8001170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fc2d 	bl	8001144 <LL_ADC_GetOffsetChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <HAL_ADC_ConfigChannel+0x2da>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2102      	movs	r1, #2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fc22 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	e01e      	b.n	8001948 <HAL_ADC_ConfigChannel+0x318>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2102      	movs	r1, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fc17 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800192c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e004      	b.n	8001946 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800193c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x330>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	e014      	b.n	800198a <HAL_ADC_ConfigChannel+0x35a>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800196e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001970:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800197c:	2320      	movs	r3, #32
 800197e:	e004      	b.n	800198a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800198a:	429a      	cmp	r2, r3
 800198c:	d106      	bne.n	800199c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fbea 	bl	8001170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2103      	movs	r1, #3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fbce 	bl	8001144 <LL_ADC_GetOffsetChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x398>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2103      	movs	r1, #3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fbc3 	bl	8001144 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	f003 021f 	and.w	r2, r3, #31
 80019c6:	e017      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x3c8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2103      	movs	r1, #3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fbb8 	bl	8001144 <LL_ADC_GetOffsetChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80019e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80019e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80019ea:	2320      	movs	r3, #32
 80019ec:	e003      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80019ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x3e0>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	e011      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x404>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a20:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001a22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e003      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2103      	movs	r1, #3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fb95 	bl	8001170 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fc74 	bl	8001338 <LL_ADC_IsEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 8140 	bne.w	8001cd8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff fbf5 	bl	8001254 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a8f      	ldr	r2, [pc, #572]	@ (8001cac <HAL_ADC_ConfigChannel+0x67c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	f040 8131 	bne.w	8001cd8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10b      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x46e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	bf94      	ite	ls
 8001a96:	2301      	movls	r3, #1
 8001a98:	2300      	movhi	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	e019      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x4a2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	e003      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d079      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d107      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x4c2>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	3301      	adds	r3, #1
 8001aea:	069b      	lsls	r3, r3, #26
 8001aec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001af0:	e015      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x4ee>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b02:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	e003      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	069b      	lsls	r3, r3, #26
 8001b1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x50e>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	e017      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x53e>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001b56:	2320      	movs	r3, #32
 8001b58:	e003      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	ea42 0103 	orr.w	r1, r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x564>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	3301      	adds	r3, #1
 8001b86:	f003 021f 	and.w	r2, r3, #31
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	051b      	lsls	r3, r3, #20
 8001b92:	e018      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x596>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 021f 	and.w	r2, r3, #31
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	e081      	b.n	8001cce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x5b6>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0e9b      	lsrs	r3, r3, #26
 8001bdc:	3301      	adds	r3, #1
 8001bde:	069b      	lsls	r3, r3, #26
 8001be0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001be4:	e015      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x5e2>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	069b      	lsls	r3, r3, #26
 8001c0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x602>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	3301      	adds	r3, #1
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	e017      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x632>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	61bb      	str	r3, [r7, #24]
  return result;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	ea42 0103 	orr.w	r1, r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x65e>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0e9b      	lsrs	r3, r3, #26
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	3b1e      	subs	r3, #30
 8001c86:	051b      	lsls	r3, r3, #20
 8001c88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	e01e      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x69c>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
  return result;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e006      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x688>
 8001caa:	bf00      	nop
 8001cac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b1e      	subs	r3, #30
 8001cc6:	051b      	lsls	r3, r3, #20
 8001cc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ccc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7ff fa93 	bl	80011fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d06c      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce4:	483c      	ldr	r0, [pc, #240]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ce6:	f7ff f9fb 	bl	80010e0 <LL_ADC_GetCommonPathInternalCh>
 8001cea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3a      	ldr	r2, [pc, #232]	@ (8001ddc <HAL_ADC_ConfigChannel+0x7ac>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d127      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d121      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a35      	ldr	r2, [pc, #212]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d157      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d16:	4619      	mov	r1, r3
 8001d18:	482f      	ldr	r0, [pc, #188]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d1a:	f7ff f9ce 	bl	80010ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d1e:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <HAL_ADC_ConfigChannel+0x7b4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	4a30      	ldr	r2, [pc, #192]	@ (8001de8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d46:	e03a      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a27      	ldr	r2, [pc, #156]	@ (8001dec <HAL_ADC_ConfigChannel+0x7bc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d113      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10d      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1f      	ldr	r2, [pc, #124]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d12a      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d70:	4619      	mov	r1, r3
 8001d72:	4819      	ldr	r0, [pc, #100]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d74:	f7ff f9a1 	bl	80010ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d78:	e021      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d11c      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d116      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d111      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001da2:	4619      	mov	r1, r3
 8001da4:	480c      	ldr	r0, [pc, #48]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001da6:	f7ff f988 	bl	80010ba <LL_ADC_SetCommonPathInternalCh>
 8001daa:	e008      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001dc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	37d8      	adds	r7, #216	@ 0xd8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	80080000 	.word	0x80080000
 8001dd8:	50040300 	.word	0x50040300
 8001ddc:	c7520000 	.word	0xc7520000
 8001de0:	50040000 	.word	0x50040000
 8001de4:	20000000 	.word	0x20000000
 8001de8:	053e2d63 	.word	0x053e2d63
 8001dec:	cb840000 	.word	0xcb840000
 8001df0:	80000001 	.word	0x80000001

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	@ (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	@ (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	@ (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	@ 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff4c 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f76:	f7ff ff61 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001f7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	6978      	ldr	r0, [r7, #20]
 8001f82:	f7ff ffb1 	bl	8001ee8 <NVIC_EncodePriority>
 8001f86:	4602      	mov	r2, r0
 8001f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff80 	bl	8001e94 <__NVIC_SetPriority>
}
 8001f94:	bf00      	nop
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff54 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e098      	b.n	80020fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002108 <HAL_DMA_Init+0x150>)
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d80f      	bhi.n	8001ff6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <HAL_DMA_Init+0x154>)
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8002110 <HAL_DMA_Init+0x158>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	009a      	lsls	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a48      	ldr	r2, [pc, #288]	@ (8002114 <HAL_DMA_Init+0x15c>)
 8001ff2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ff4:	e00e      	b.n	8002014 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <HAL_DMA_Init+0x160>)
 8001ffe:	4413      	add	r3, r2
 8002000:	4a43      	ldr	r2, [pc, #268]	@ (8002110 <HAL_DMA_Init+0x158>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	009a      	lsls	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a42      	ldr	r2, [pc, #264]	@ (800211c <HAL_DMA_Init+0x164>)
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800202a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800206e:	d039      	beq.n	80020e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a27      	ldr	r2, [pc, #156]	@ (8002114 <HAL_DMA_Init+0x15c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d11a      	bne.n	80020b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800207a:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <HAL_DMA_Init+0x168>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f003 031c 	and.w	r3, r3, #28
 8002086:	210f      	movs	r1, #15
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	4924      	ldr	r1, [pc, #144]	@ (8002120 <HAL_DMA_Init+0x168>)
 8002090:	4013      	ands	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002094:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <HAL_DMA_Init+0x168>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a0:	f003 031c 	and.w	r3, r3, #28
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	491d      	ldr	r1, [pc, #116]	@ (8002120 <HAL_DMA_Init+0x168>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
 80020ae:	e019      	b.n	80020e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <HAL_DMA_Init+0x16c>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	f003 031c 	and.w	r3, r3, #28
 80020bc:	210f      	movs	r1, #15
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4917      	ldr	r1, [pc, #92]	@ (8002124 <HAL_DMA_Init+0x16c>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_DMA_Init+0x16c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f003 031c 	and.w	r3, r3, #28
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	4911      	ldr	r1, [pc, #68]	@ (8002124 <HAL_DMA_Init+0x16c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40020407 	.word	0x40020407
 800210c:	bffdfff8 	.word	0xbffdfff8
 8002110:	cccccccd 	.word	0xcccccccd
 8002114:	40020000 	.word	0x40020000
 8002118:	bffdfbf8 	.word	0xbffdfbf8
 800211c:	40020400 	.word	0x40020400
 8002120:	400200a8 	.word	0x400200a8
 8002124:	400204a8 	.word	0x400204a8

08002128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f003 031c 	and.w	r3, r3, #28
 8002148:	2204      	movs	r2, #4
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d026      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x7a>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d021      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0204 	bic.w	r2, r2, #4
 800217a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	f003 021c 	and.w	r2, r3, #28
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	2104      	movs	r1, #4
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	2b00      	cmp	r3, #0
 8002196:	d071      	beq.n	800227c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021a0:	e06c      	b.n	800227c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f003 031c 	and.w	r3, r3, #28
 80021aa:	2202      	movs	r2, #2
 80021ac:	409a      	lsls	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d02e      	beq.n	8002214 <HAL_DMA_IRQHandler+0xec>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d029      	beq.n	8002214 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10b      	bne.n	80021e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 020a 	bic.w	r2, r2, #10
 80021dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f003 021c 	and.w	r2, r3, #28
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	2102      	movs	r1, #2
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d038      	beq.n	800227c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002212:	e033      	b.n	800227c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	f003 031c 	and.w	r3, r3, #28
 800221c:	2208      	movs	r2, #8
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02a      	beq.n	800227e <HAL_DMA_IRQHandler+0x156>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d025      	beq.n	800227e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 020e 	bic.w	r2, r2, #14
 8002240:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	f003 021c 	and.w	r2, r3, #28
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800227c:	bf00      	nop
 800227e:	bf00      	nop
}
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	e148      	b.n	800252a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 813a 	beq.w	8002524 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d005      	beq.n	80022c8 <HAL_GPIO_Init+0x40>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d130      	bne.n	800232a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022fe:	2201      	movs	r2, #1
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 0201 	and.w	r2, r3, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b03      	cmp	r3, #3
 8002334:	d017      	beq.n	8002366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d123      	bne.n	80023ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	6939      	ldr	r1, [r7, #16]
 80023b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0203 	and.w	r2, r3, #3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8094 	beq.w	8002524 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fc:	4b52      	ldr	r3, [pc, #328]	@ (8002548 <HAL_GPIO_Init+0x2c0>)
 80023fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002400:	4a51      	ldr	r2, [pc, #324]	@ (8002548 <HAL_GPIO_Init+0x2c0>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6613      	str	r3, [r2, #96]	@ 0x60
 8002408:	4b4f      	ldr	r3, [pc, #316]	@ (8002548 <HAL_GPIO_Init+0x2c0>)
 800240a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002414:	4a4d      	ldr	r2, [pc, #308]	@ (800254c <HAL_GPIO_Init+0x2c4>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_Init+0x1d4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a43      	ldr	r2, [pc, #268]	@ (8002550 <HAL_GPIO_Init+0x2c8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_Init+0x1d0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a42      	ldr	r2, [pc, #264]	@ (8002554 <HAL_GPIO_Init+0x2cc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_Init+0x1cc>
 8002450:	2302      	movs	r3, #2
 8002452:	e004      	b.n	800245e <HAL_GPIO_Init+0x1d6>
 8002454:	2307      	movs	r3, #7
 8002456:	e002      	b.n	800245e <HAL_GPIO_Init+0x1d6>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_GPIO_Init+0x1d6>
 800245c:	2300      	movs	r3, #0
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800246e:	4937      	ldr	r1, [pc, #220]	@ (800254c <HAL_GPIO_Init+0x2c4>)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ca:	4a23      	ldr	r2, [pc, #140]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024f4:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024fa:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800251e:	4a0e      	ldr	r2, [pc, #56]	@ (8002558 <HAL_GPIO_Init+0x2d0>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f aeaf 	bne.w	8002298 <HAL_GPIO_Init+0x10>
  }
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	48000400 	.word	0x48000400
 8002554:	48000800 	.word	0x48000800
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002578:	e002      	b.n	8002580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40007000 	.word	0x40007000

080025ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025b0:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40007000 	.word	0x40007000

080025c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025d6:	d130      	bne.n	800263a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d8:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e4:	d038      	beq.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e6:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2232      	movs	r2, #50	@ 0x32
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	4a1b      	ldr	r2, [pc, #108]	@ (8002670 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0c9b      	lsrs	r3, r3, #18
 8002608:	3301      	adds	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260c:	e002      	b.n	8002614 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3b01      	subs	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002614:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002620:	d102      	bne.n	8002628 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f2      	bne.n	800260e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002634:	d110      	bne.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e00f      	b.n	800265a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002646:	d007      	beq.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002648:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002650:	4a05      	ldr	r2, [pc, #20]	@ (8002668 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002656:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40007000 	.word	0x40007000
 800266c:	20000000 	.word	0x20000000
 8002670:	431bde83 	.word	0x431bde83

08002674 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f000 bc02 	b.w	8002e8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002688:	4b96      	ldr	r3, [pc, #600]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002692:	4b94      	ldr	r3, [pc, #592]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80e4 	beq.w	8002872 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4c>
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	f040 808b 	bne.w	80027ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	f040 8087 	bne.w	80027ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c0:	4b88      	ldr	r3, [pc, #544]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x64>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e3d9      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	4b81      	ldr	r3, [pc, #516]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_RCC_OscConfig+0x7e>
 80026e8:	4b7e      	ldr	r3, [pc, #504]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026f0:	e005      	b.n	80026fe <HAL_RCC_OscConfig+0x8a>
 80026f2:	4b7c      	ldr	r3, [pc, #496]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80026f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026fe:	4293      	cmp	r3, r2
 8002700:	d223      	bcs.n	800274a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fdbe 	bl	8003288 <RCC_SetFlashLatencyFromMSIRange>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e3ba      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002716:	4b73      	ldr	r3, [pc, #460]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a72      	ldr	r2, [pc, #456]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800271c:	f043 0308 	orr.w	r3, r3, #8
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b70      	ldr	r3, [pc, #448]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	496d      	ldr	r1, [pc, #436]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002734:	4b6b      	ldr	r3, [pc, #428]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	4968      	ldr	r1, [pc, #416]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e025      	b.n	8002796 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800274a:	4b66      	ldr	r3, [pc, #408]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a65      	ldr	r2, [pc, #404]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002750:	f043 0308 	orr.w	r3, r3, #8
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b63      	ldr	r3, [pc, #396]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4960      	ldr	r1, [pc, #384]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002768:	4b5e      	ldr	r3, [pc, #376]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	495b      	ldr	r1, [pc, #364]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fd7e 	bl	8003288 <RCC_SetFlashLatencyFromMSIRange>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e37a      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002796:	f000 fc81 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800279a:	4602      	mov	r2, r0
 800279c:	4b51      	ldr	r3, [pc, #324]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4950      	ldr	r1, [pc, #320]	@ (80028e8 <HAL_RCC_OscConfig+0x274>)
 80027a8:	5ccb      	ldrb	r3, [r1, r3]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a4e      	ldr	r2, [pc, #312]	@ (80028ec <HAL_RCC_OscConfig+0x278>)
 80027b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027b6:	4b4e      	ldr	r3, [pc, #312]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fb4c 	bl	8000e58 <HAL_InitTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d052      	beq.n	8002870 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	e35e      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d032      	beq.n	800283c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027d6:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a42      	ldr	r2, [pc, #264]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e2:	f7fe fc4b 	bl	800107c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ea:	f7fe fc47 	bl	800107c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e347      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a35      	ldr	r2, [pc, #212]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4930      	ldr	r1, [pc, #192]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002826:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	492b      	ldr	r1, [pc, #172]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
 800283a:	e01a      	b.n	8002872 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800283c:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a28      	ldr	r2, [pc, #160]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002848:	f7fe fc18 	bl	800107c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002850:	f7fe fc14 	bl	800107c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e314      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002862:	4b20      	ldr	r3, [pc, #128]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x1dc>
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d073      	beq.n	8002966 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d005      	beq.n	8002890 <HAL_RCC_OscConfig+0x21c>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d10e      	bne.n	80028a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d10b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d063      	beq.n	8002964 <HAL_RCC_OscConfig+0x2f0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d15f      	bne.n	8002964 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e2f1      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b0:	d106      	bne.n	80028c0 <HAL_RCC_OscConfig+0x24c>
 80028b2:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a0b      	ldr	r2, [pc, #44]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e025      	b.n	800290c <HAL_RCC_OscConfig+0x298>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c8:	d114      	bne.n	80028f4 <HAL_RCC_OscConfig+0x280>
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a05      	ldr	r2, [pc, #20]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a02      	ldr	r2, [pc, #8]	@ (80028e4 <HAL_RCC_OscConfig+0x270>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e013      	b.n	800290c <HAL_RCC_OscConfig+0x298>
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08008304 	.word	0x08008304
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000004 	.word	0x20000004
 80028f4:	4ba0      	ldr	r3, [pc, #640]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a9f      	ldr	r2, [pc, #636]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b9d      	ldr	r3, [pc, #628]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a9c      	ldr	r2, [pc, #624]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fbb2 	bl	800107c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe fbae 	bl	800107c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	@ 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e2ae      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292e:	4b92      	ldr	r3, [pc, #584]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x2a8>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fb9e 	bl	800107c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe fb9a 	bl	800107c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	@ 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e29a      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002956:	4b88      	ldr	r3, [pc, #544]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x2d0>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d060      	beq.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x310>
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d116      	bne.n	80029b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002984:	4b7c      	ldr	r3, [pc, #496]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_OscConfig+0x328>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e277      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b76      	ldr	r3, [pc, #472]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	061b      	lsls	r3, r3, #24
 80029aa:	4973      	ldr	r1, [pc, #460]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b0:	e040      	b.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d023      	beq.n	8002a02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6e      	ldr	r2, [pc, #440]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fb59 	bl	800107c <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe fb55 	bl	800107c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e255      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e0:	4b65      	ldr	r3, [pc, #404]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	4b62      	ldr	r3, [pc, #392]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	495f      	ldr	r1, [pc, #380]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
 8002a00:	e018      	b.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a02:	4b5d      	ldr	r3, [pc, #372]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a5c      	ldr	r2, [pc, #368]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fb35 	bl	800107c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fb31 	bl	800107c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e231      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a28:	4b53      	ldr	r3, [pc, #332]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d03c      	beq.n	8002aba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a48:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fb10 	bl	800107c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fe fb0c 	bl	800107c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e20c      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a72:	4b41      	ldr	r3, [pc, #260]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ef      	beq.n	8002a60 <HAL_RCC_OscConfig+0x3ec>
 8002a80:	e01b      	b.n	8002aba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b3d      	ldr	r3, [pc, #244]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a88:	4a3b      	ldr	r2, [pc, #236]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a92:	f7fe faf3 	bl	800107c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7fe faef 	bl	800107c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1ef      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aac:	4b32      	ldr	r3, [pc, #200]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1ef      	bne.n	8002a9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80a6 	beq.w	8002c14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002acc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002adc:	4a26      	ldr	r2, [pc, #152]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ae4:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af4:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <HAL_RCC_OscConfig+0x508>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d118      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b00:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <HAL_RCC_OscConfig+0x508>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <HAL_RCC_OscConfig+0x508>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fab6 	bl	800107c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fe fab2 	bl	800107c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1b2      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_RCC_OscConfig+0x508>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4d8>
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b40:	4a0d      	ldr	r2, [pc, #52]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b4a:	e029      	b.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d115      	bne.n	8002b80 <HAL_RCC_OscConfig+0x50c>
 8002b54:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5a:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	4a03      	ldr	r2, [pc, #12]	@ (8002b78 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b74:	e014      	b.n	8002ba0 <HAL_RCC_OscConfig+0x52c>
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	4b9a      	ldr	r3, [pc, #616]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	4a99      	ldr	r2, [pc, #612]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b90:	4b96      	ldr	r3, [pc, #600]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b96:	4a95      	ldr	r2, [pc, #596]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d016      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fa68 	bl	800107c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fa64 	bl	800107c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e162      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc6:	4b89      	ldr	r3, [pc, #548]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ed      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x53c>
 8002bd4:	e015      	b.n	8002c02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fa51 	bl	800107c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fa4d 	bl	800107c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e14b      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf4:	4b7d      	ldr	r3, [pc, #500]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ed      	bne.n	8002bde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c02:	7ffb      	ldrb	r3, [r7, #31]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b78      	ldr	r3, [pc, #480]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	4a77      	ldr	r2, [pc, #476]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d03c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c28:	4b70      	ldr	r3, [pc, #448]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe fa20 	bl	800107c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c40:	f7fe fa1c 	bl	800107c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e11c      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c52:	4b66      	ldr	r3, [pc, #408]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <HAL_RCC_OscConfig+0x5cc>
 8002c60:	e01b      	b.n	8002c9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c62:	4b62      	ldr	r3, [pc, #392]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c68:	4a60      	ldr	r2, [pc, #384]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fa03 	bl	800107c <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c7a:	f7fe f9ff 	bl	800107c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0ff      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c8c:	4b57      	ldr	r3, [pc, #348]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ef      	bne.n	8002c7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80f3 	beq.w	8002e8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	f040 80c9 	bne.w	8002e40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cae:	4b4f      	ldr	r3, [pc, #316]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d12c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d123      	bne.n	8002d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d11b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d113      	bne.n	8002d1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d109      	bne.n	8002d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	3b01      	subs	r3, #1
 8002d16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d06b      	beq.n	8002df4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d062      	beq.n	8002de8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d22:	4b32      	ldr	r3, [pc, #200]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0ac      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d32:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2d      	ldr	r2, [pc, #180]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002d38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d3e:	f7fe f99d 	bl	800107c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fe f999 	bl	800107c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e099      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d58:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d64:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d74:	3a01      	subs	r2, #1
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	4311      	orrs	r1, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d7e:	0212      	lsls	r2, r2, #8
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d86:	0852      	lsrs	r2, r2, #1
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	0552      	lsls	r2, r2, #21
 8002d8c:	4311      	orrs	r1, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d92:	0852      	lsrs	r2, r2, #1
 8002d94:	3a01      	subs	r2, #1
 8002d96:	0652      	lsls	r2, r2, #25
 8002d98:	4311      	orrs	r1, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d9e:	06d2      	lsls	r2, r2, #27
 8002da0:	430a      	orrs	r2, r1
 8002da2:	4912      	ldr	r1, [pc, #72]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002da8:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0f      	ldr	r2, [pc, #60]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc0:	f7fe f95c 	bl	800107c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe f958 	bl	800107c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e058      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <HAL_RCC_OscConfig+0x778>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002de6:	e050      	b.n	8002e8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04f      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
 8002dec:	40021000 	.word	0x40021000
 8002df0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df4:	4b27      	ldr	r3, [pc, #156]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d144      	bne.n	8002e8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a23      	ldr	r2, [pc, #140]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e0c:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a20      	ldr	r2, [pc, #128]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e18:	f7fe f930 	bl	800107c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe f92c 	bl	800107c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e02c      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x7ac>
 8002e3e:	e024      	b.n	8002e8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d01f      	beq.n	8002e86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe f913 	bl	800107c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe f90f 	bl	800107c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e00f      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4905      	ldr	r1, [pc, #20]	@ (8002e94 <HAL_RCC_OscConfig+0x820>)
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_OscConfig+0x824>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
 8002e84:	e001      	b.n	8002e8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	feeefffc 	.word	0xfeeefffc

08002e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0e7      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b75      	ldr	r3, [pc, #468]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b72      	ldr	r3, [pc, #456]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4970      	ldr	r1, [pc, #448]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b6e      	ldr	r3, [pc, #440]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0cf      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b66      	ldr	r3, [pc, #408]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d908      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b63      	ldr	r3, [pc, #396]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4960      	ldr	r1, [pc, #384]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d04c      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	4b5a      	ldr	r3, [pc, #360]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0a6      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3a:	4b54      	ldr	r3, [pc, #336]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d115      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e09a      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f52:	4b4e      	ldr	r3, [pc, #312]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e08e      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e086      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b46      	ldr	r3, [pc, #280]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4943      	ldr	r1, [pc, #268]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fe f87a 	bl	800107c <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe f876 	bl	800107c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e06e      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b31      	ldr	r3, [pc, #196]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d208      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	492b      	ldr	r1, [pc, #172]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe2:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d210      	bcs.n	8003012 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 0207 	bic.w	r2, r3, #7
 8002ff8:	4923      	ldr	r1, [pc, #140]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003000:	4b21      	ldr	r3, [pc, #132]	@ (8003088 <HAL_RCC_ClockConfig+0x1ec>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e036      	b.n	8003080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301e:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4918      	ldr	r1, [pc, #96]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4910      	ldr	r1, [pc, #64]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003050:	f000 f824 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	490b      	ldr	r1, [pc, #44]	@ (8003090 <HAL_RCC_ClockConfig+0x1f4>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <HAL_RCC_ClockConfig+0x1f8>)
 800306e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003070:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_ClockConfig+0x1fc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd feef 	bl	8000e58 <HAL_InitTick>
 800307a:	4603      	mov	r3, r0
 800307c:	72fb      	strb	r3, [r7, #11]

  return status;
 800307e:	7afb      	ldrb	r3, [r7, #11]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40022000 	.word	0x40022000
 800308c:	40021000 	.word	0x40021000
 8003090:	08008304 	.word	0x08008304
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	@ 0x24
 80030a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x34>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d121      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d11e      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030d0:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030dc:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e005      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030f8:	4a2b      	ldr	r2, [pc, #172]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d102      	bne.n	800311a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e004      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d101      	bne.n	8003124 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003120:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003122:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d134      	bne.n	8003194 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312a:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0xa6>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d003      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0xac>
 8003140:	e005      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003142:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003144:	617b      	str	r3, [r7, #20]
      break;
 8003146:	e005      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003148:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800314a:	617b      	str	r3, [r7, #20]
      break;
 800314c:	e002      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	617b      	str	r3, [r7, #20]
      break;
 8003152:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003154:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	3301      	adds	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	fb03 f202 	mul.w	r2, r3, r2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800317a:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	0e5b      	lsrs	r3, r3, #25
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	3301      	adds	r3, #1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003194:	69bb      	ldr	r3, [r7, #24]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	@ 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	0800831c 	.word	0x0800831c
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	007a1200 	.word	0x007a1200

080031b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4904      	ldr	r1, [pc, #16]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08008314 	.word	0x08008314

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031fc:	f7ff ffda 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0adb      	lsrs	r3, r3, #11
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4904      	ldr	r1, [pc, #16]	@ (8003220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	08008314 	.word	0x08008314

08003224 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	220f      	movs	r2, #15
 8003232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003234:	4b12      	ldr	r3, [pc, #72]	@ (8003280 <HAL_RCC_GetClockConfig+0x5c>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0203 	and.w	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003240:	4b0f      	ldr	r3, [pc, #60]	@ (8003280 <HAL_RCC_GetClockConfig+0x5c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <HAL_RCC_GetClockConfig+0x5c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003258:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <HAL_RCC_GetClockConfig+0x5c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	08db      	lsrs	r3, r3, #3
 800325e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003266:	4b07      	ldr	r3, [pc, #28]	@ (8003284 <HAL_RCC_GetClockConfig+0x60>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0207 	and.w	r2, r3, #7
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	601a      	str	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	40022000 	.word	0x40022000

08003288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003294:	4b2a      	ldr	r3, [pc, #168]	@ (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032a0:	f7ff f984 	bl	80025ac <HAL_PWREx_GetVoltageRange>
 80032a4:	6178      	str	r0, [r7, #20]
 80032a6:	e014      	b.n	80032d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	4b25      	ldr	r3, [pc, #148]	@ (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	4a24      	ldr	r2, [pc, #144]	@ (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b4:	4b22      	ldr	r3, [pc, #136]	@ (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032c0:	f7ff f974 	bl	80025ac <HAL_PWREx_GetVoltageRange>
 80032c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032d8:	d10b      	bne.n	80032f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b80      	cmp	r3, #128	@ 0x80
 80032de:	d919      	bls.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80032e4:	d902      	bls.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e6:	2302      	movs	r3, #2
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e013      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ec:	2301      	movs	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	e010      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b80      	cmp	r3, #128	@ 0x80
 80032f6:	d902      	bls.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032f8:	2303      	movs	r3, #3
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	e00a      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b80      	cmp	r3, #128	@ 0x80
 8003302:	d102      	bne.n	800330a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003304:	2302      	movs	r3, #2
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	e004      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b70      	cmp	r3, #112	@ 0x70
 800330e:	d101      	bne.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003314:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 0207 	bic.w	r2, r3, #7
 800331c:	4909      	ldr	r1, [pc, #36]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003324:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	429a      	cmp	r2, r3
 8003330:	d001      	beq.n	8003336 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	40022000 	.word	0x40022000

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003350:	2300      	movs	r3, #0
 8003352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003354:	2300      	movs	r3, #0
 8003356:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003360:	2b00      	cmp	r3, #0
 8003362:	d031      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800336c:	d01a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800336e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003372:	d814      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800337c:	d10f      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800337e:	4b5d      	ldr	r3, [pc, #372]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800338a:	e00c      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f9de 	bl	8003754 <RCCEx_PLLSAI1_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	74fb      	strb	r3, [r7, #19]
      break;
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80033a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ac:	4b51      	ldr	r3, [pc, #324]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ba:	494e      	ldr	r1, [pc, #312]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033c2:	e001      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 809e 	beq.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033da:	4b46      	ldr	r3, [pc, #280]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4b40      	ldr	r3, [pc, #256]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f4:	4a3f      	ldr	r2, [pc, #252]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80033fc:	4b3d      	ldr	r3, [pc, #244]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003408:	2301      	movs	r3, #1
 800340a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340c:	4b3a      	ldr	r3, [pc, #232]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a39      	ldr	r2, [pc, #228]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003416:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003418:	f7fd fe30 	bl	800107c <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800341e:	e009      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fd fe2c 	bl	800107c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	74fb      	strb	r3, [r7, #19]
        break;
 8003432:	e005      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003434:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ef      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d15a      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003446:	4b2b      	ldr	r3, [pc, #172]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003450:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01e      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	429a      	cmp	r2, r3
 8003460:	d019      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003462:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800346c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b21      	ldr	r3, [pc, #132]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003474:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800347e:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003484:	4a1b      	ldr	r2, [pc, #108]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800348e:	4a19      	ldr	r2, [pc, #100]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d016      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fdec 	bl	800107c <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a6:	e00b      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fd fde8 	bl	800107c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d902      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	74fb      	strb	r3, [r7, #19]
            break;
 80034be:	e006      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c0:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ec      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d4:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e2:	4904      	ldr	r1, [pc, #16]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034ea:	e009      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	74bb      	strb	r3, [r7, #18]
 80034f0:	e006      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003500:	7c7b      	ldrb	r3, [r7, #17]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4b8a      	ldr	r3, [pc, #552]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350a:	4a89      	ldr	r2, [pc, #548]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003510:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800351e:	4b84      	ldr	r3, [pc, #528]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003524:	f023 0203 	bic.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4980      	ldr	r1, [pc, #512]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003540:	4b7b      	ldr	r3, [pc, #492]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	f023 020c 	bic.w	r2, r3, #12
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	4978      	ldr	r1, [pc, #480]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003562:	4b73      	ldr	r3, [pc, #460]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	496f      	ldr	r1, [pc, #444]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003584:	4b6a      	ldr	r3, [pc, #424]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003592:	4967      	ldr	r1, [pc, #412]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a6:	4b62      	ldr	r3, [pc, #392]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	495e      	ldr	r1, [pc, #376]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c8:	4b59      	ldr	r3, [pc, #356]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d6:	4956      	ldr	r1, [pc, #344]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ea:	4b51      	ldr	r3, [pc, #324]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	494d      	ldr	r1, [pc, #308]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d028      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800360c:	4b48      	ldr	r3, [pc, #288]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	4945      	ldr	r1, [pc, #276]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800362a:	d106      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362c:	4b40      	ldr	r3, [pc, #256]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a3f      	ldr	r2, [pc, #252]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003636:	60d3      	str	r3, [r2, #12]
 8003638:	e011      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003642:	d10c      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f882 	bl	8003754 <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d028      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800366a:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003678:	492d      	ldr	r1, [pc, #180]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003688:	d106      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368a:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4a28      	ldr	r2, [pc, #160]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003694:	60d3      	str	r3, [r2, #12]
 8003696:	e011      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f853 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01c      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d6:	4916      	ldr	r1, [pc, #88]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036e6:	d10c      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f830 	bl	8003754 <RCCEx_PLLSAI1_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800370e:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371c:	4904      	ldr	r1, [pc, #16]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003724:	7cbb      	ldrb	r3, [r7, #18]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a04      	ldr	r2, [pc, #16]	@ (8003750 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000

08003754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003762:	4b74      	ldr	r3, [pc, #464]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800376e:	4b71      	ldr	r3, [pc, #452]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d10d      	bne.n	800379a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
       ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003786:	4b6b      	ldr	r3, [pc, #428]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
       ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d047      	beq.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	e044      	b.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d018      	beq.n	80037da <RCCEx_PLLSAI1_Config+0x86>
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d825      	bhi.n	80037f8 <RCCEx_PLLSAI1_Config+0xa4>
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d002      	beq.n	80037b6 <RCCEx_PLLSAI1_Config+0x62>
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d009      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x74>
 80037b4:	e020      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11d      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c6:	e01a      	b.n	80037fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e013      	b.n	8003802 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037da:	4b56      	ldr	r3, [pc, #344]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037e6:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037f6:	e006      	b.n	8003806 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e004      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003806:	bf00      	nop
    }

    if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800380e:	4b49      	ldr	r3, [pc, #292]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	430b      	orrs	r3, r1
 8003824:	4943      	ldr	r1, [pc, #268]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d17c      	bne.n	800392a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003830:	4b40      	ldr	r3, [pc, #256]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3f      	ldr	r2, [pc, #252]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003836:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800383a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fd fc1e 	bl	800107c <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003842:	e009      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003844:	f7fd fc1a 	bl	800107c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	73fb      	strb	r3, [r7, #15]
        break;
 8003856:	e005      	b.n	8003864 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003858:	4b36      	ldr	r3, [pc, #216]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ef      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d15f      	bne.n	800392a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d110      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003870:	4b30      	ldr	r3, [pc, #192]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003878:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	0211      	lsls	r1, r2, #8
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	06d2      	lsls	r2, r2, #27
 8003888:	430a      	orrs	r2, r1
 800388a:	492a      	ldr	r1, [pc, #168]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	610b      	str	r3, [r1, #16]
 8003890:	e027      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d112      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003898:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6892      	ldr	r2, [r2, #8]
 80038a8:	0211      	lsls	r1, r2, #8
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6912      	ldr	r2, [r2, #16]
 80038ae:	0852      	lsrs	r2, r2, #1
 80038b0:	3a01      	subs	r2, #1
 80038b2:	0552      	lsls	r2, r2, #21
 80038b4:	430a      	orrs	r2, r1
 80038b6:	491f      	ldr	r1, [pc, #124]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	610b      	str	r3, [r1, #16]
 80038bc:	e011      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038be:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6892      	ldr	r2, [r2, #8]
 80038ce:	0211      	lsls	r1, r2, #8
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6952      	ldr	r2, [r2, #20]
 80038d4:	0852      	lsrs	r2, r2, #1
 80038d6:	3a01      	subs	r2, #1
 80038d8:	0652      	lsls	r2, r2, #25
 80038da:	430a      	orrs	r2, r1
 80038dc:	4915      	ldr	r1, [pc, #84]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038e2:	4b14      	ldr	r3, [pc, #80]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a13      	ldr	r2, [pc, #76]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ee:	f7fd fbc5 	bl	800107c <HAL_GetTick>
 80038f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f4:	e009      	b.n	800390a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f6:	f7fd fbc1 	bl	800107c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d902      	bls.n	800390a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	73fb      	strb	r3, [r7, #15]
          break;
 8003908:	e005      	b.n	8003916 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0ef      	beq.n	80038f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e049      	b.n	80039de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd f9ca 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 fcd8 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d001      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e03b      	b.n	8003a78 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_TIM_Base_Start_IT+0x4e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2a:	d004      	beq.n	8003a36 <HAL_TIM_Base_Start_IT+0x4e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a15      	ldr	r2, [pc, #84]	@ (8003a88 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d115      	bne.n	8003a62 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <HAL_TIM_Base_Start_IT+0xa4>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d015      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x8c>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a4e:	d011      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	e008      	b.n	8003a74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e000      	b.n	8003a76 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	00010007 	.word	0x00010007

08003a90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e049      	b.n	8003b36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f841 	bl	8003b3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 fc2c 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_TIM_PWM_Start+0x24>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e03c      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x9e>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d109      	bne.n	8003b92 <HAL_TIM_PWM_Start+0x3e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	e02f      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x9e>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d109      	bne.n	8003bac <HAL_TIM_PWM_Start+0x58>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e022      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x9e>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b0c      	cmp	r3, #12
 8003bb0:	d109      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x72>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	e015      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x9e>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d109      	bne.n	8003be0 <HAL_TIM_PWM_Start+0x8c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e008      	b.n	8003bf2 <HAL_TIM_PWM_Start+0x9e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07e      	b.n	8003cf8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start+0xb6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c08:	e023      	b.n	8003c52 <HAL_TIM_PWM_Start+0xfe>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0xc6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c18:	e01b      	b.n	8003c52 <HAL_TIM_PWM_Start+0xfe>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0xd6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c28:	e013      	b.n	8003c52 <HAL_TIM_PWM_Start+0xfe>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xe6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c38:	e00b      	b.n	8003c52 <HAL_TIM_PWM_Start+0xfe>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0xf6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c48:	e003      	b.n	8003c52 <HAL_TIM_PWM_Start+0xfe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 feee 	bl	8004a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a26      	ldr	r2, [pc, #152]	@ (8003d00 <HAL_TIM_PWM_Start+0x1ac>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x12a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a25      	ldr	r2, [pc, #148]	@ (8003d04 <HAL_TIM_PWM_Start+0x1b0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x12a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <HAL_TIM_PWM_Start+0x1b4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x12e>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_TIM_PWM_Start+0x130>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <HAL_TIM_PWM_Start+0x1ac>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x162>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0x162>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <HAL_TIM_PWM_Start+0x1b0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d115      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <HAL_TIM_PWM_Start+0x1b8>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d015      	beq.n	8003cf4 <HAL_TIM_PWM_Start+0x1a0>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cce:	d011      	beq.n	8003cf4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	e008      	b.n	8003cf4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e000      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	00010007 	.word	0x00010007

08003d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d020      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0202 	mvn.w	r2, #2
 8003d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fac7 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fab9 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 faca 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0204 	mvn.w	r2, #4
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 faa1 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa93 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 faa4 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d020      	beq.n	8003e0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01b      	beq.n	8003e0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0208 	mvn.w	r2, #8
 8003ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa7b 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003df8:	e005      	b.n	8003e06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa6d 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa7e 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d020      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01b      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0210 	mvn.w	r2, #16
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa55 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa47 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fa58 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0201 	mvn.w	r2, #1
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fc fe6a 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fed7 	bl	8004c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00c      	beq.n	8003ece <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fecf 	bl	8004c6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00c      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fa12 	bl	8004316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00c      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f06f 0220 	mvn.w	r2, #32
 8003f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fe97 	bl	8004c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0ff      	b.n	800413e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b14      	cmp	r3, #20
 8003f4a:	f200 80f0 	bhi.w	800412e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	0800412f 	.word	0x0800412f
 8003f5c:	0800412f 	.word	0x0800412f
 8003f60:	0800412f 	.word	0x0800412f
 8003f64:	08003fe9 	.word	0x08003fe9
 8003f68:	0800412f 	.word	0x0800412f
 8003f6c:	0800412f 	.word	0x0800412f
 8003f70:	0800412f 	.word	0x0800412f
 8003f74:	0800402b 	.word	0x0800402b
 8003f78:	0800412f 	.word	0x0800412f
 8003f7c:	0800412f 	.word	0x0800412f
 8003f80:	0800412f 	.word	0x0800412f
 8003f84:	0800406b 	.word	0x0800406b
 8003f88:	0800412f 	.word	0x0800412f
 8003f8c:	0800412f 	.word	0x0800412f
 8003f90:	0800412f 	.word	0x0800412f
 8003f94:	080040ad 	.word	0x080040ad
 8003f98:	0800412f 	.word	0x0800412f
 8003f9c:	0800412f 	.word	0x0800412f
 8003fa0:	0800412f 	.word	0x0800412f
 8003fa4:	080040ed 	.word	0x080040ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fa2c 	bl	800440c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0208 	orr.w	r2, r2, #8
 8003fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0204 	bic.w	r2, r2, #4
 8003fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6999      	ldr	r1, [r3, #24]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	619a      	str	r2, [r3, #24]
      break;
 8003fe6:	e0a5      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fa88 	bl	8004504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6999      	ldr	r1, [r3, #24]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	021a      	lsls	r2, r3, #8
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	619a      	str	r2, [r3, #24]
      break;
 8004028:	e084      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fae1 	bl	80045f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0208 	orr.w	r2, r2, #8
 8004044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0204 	bic.w	r2, r2, #4
 8004054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69d9      	ldr	r1, [r3, #28]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	61da      	str	r2, [r3, #28]
      break;
 8004068:	e064      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fb39 	bl	80046e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69d9      	ldr	r1, [r3, #28]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	021a      	lsls	r2, r3, #8
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	61da      	str	r2, [r3, #28]
      break;
 80040aa:	e043      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb76 	bl	80047a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0208 	orr.w	r2, r2, #8
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80040ea:	e023      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fbae 	bl	8004854 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004106:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800412c:	e002      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
      break;
 8004132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800413c:	7dfb      	ldrb	r3, [r7, #23]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop

08004148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIM_ConfigClockSource+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e0b6      	b.n	80042d2 <HAL_TIM_ConfigClockSource+0x18a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800418e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a0:	d03e      	beq.n	8004220 <HAL_TIM_ConfigClockSource+0xd8>
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a6:	f200 8087 	bhi.w	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ae:	f000 8086 	beq.w	80042be <HAL_TIM_ConfigClockSource+0x176>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b6:	d87f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041b8:	2b70      	cmp	r3, #112	@ 0x70
 80041ba:	d01a      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xaa>
 80041bc:	2b70      	cmp	r3, #112	@ 0x70
 80041be:	d87b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041c0:	2b60      	cmp	r3, #96	@ 0x60
 80041c2:	d050      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x11e>
 80041c4:	2b60      	cmp	r3, #96	@ 0x60
 80041c6:	d877      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041c8:	2b50      	cmp	r3, #80	@ 0x50
 80041ca:	d03c      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0xfe>
 80041cc:	2b50      	cmp	r3, #80	@ 0x50
 80041ce:	d873      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d058      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x13e>
 80041d4:	2b40      	cmp	r3, #64	@ 0x40
 80041d6:	d86f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041d8:	2b30      	cmp	r3, #48	@ 0x30
 80041da:	d064      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15e>
 80041dc:	2b30      	cmp	r3, #48	@ 0x30
 80041de:	d86b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d060      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15e>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d867      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15e>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d05a      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15e>
 80041f0:	e062      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004202:	f000 fbfb 	bl	80049fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	609a      	str	r2, [r3, #8]
      break;
 800421e:	e04f      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004230:	f000 fbe4 	bl	80049fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004242:	609a      	str	r2, [r3, #8]
      break;
 8004244:	e03c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	461a      	mov	r2, r3
 8004254:	f000 fb58 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2150      	movs	r1, #80	@ 0x50
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fbb1 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 8004264:	e02c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004272:	461a      	mov	r2, r3
 8004274:	f000 fb77 	bl	8004966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2160      	movs	r1, #96	@ 0x60
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fba1 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 8004284:	e01c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	461a      	mov	r2, r3
 8004294:	f000 fb38 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2140      	movs	r1, #64	@ 0x40
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fb91 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 80042a4:	e00c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 fb88 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 80042b6:	e003      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e000      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a30      	ldr	r2, [pc, #192]	@ (8004400 <TIM_Base_SetConfig+0xd4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_Base_SetConfig+0x20>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434a:	d108      	bne.n	800435e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a27      	ldr	r2, [pc, #156]	@ (8004400 <TIM_Base_SetConfig+0xd4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0x52>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0x52>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a24      	ldr	r2, [pc, #144]	@ (8004404 <TIM_Base_SetConfig+0xd8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0x52>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a23      	ldr	r2, [pc, #140]	@ (8004408 <TIM_Base_SetConfig+0xdc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a12      	ldr	r2, [pc, #72]	@ (8004400 <TIM_Base_SetConfig+0xd4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0xa0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a11      	ldr	r2, [pc, #68]	@ (8004404 <TIM_Base_SetConfig+0xd8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0xa0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a10      	ldr	r2, [pc, #64]	@ (8004408 <TIM_Base_SetConfig+0xdc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d103      	bne.n	80043d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	611a      	str	r2, [r3, #16]
  }
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40014000 	.word	0x40014000
 8004408:	40014400 	.word	0x40014400

0800440c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f023 0201 	bic.w	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800443a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0303 	bic.w	r3, r3, #3
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f023 0302 	bic.w	r3, r3, #2
 8004458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a24      	ldr	r2, [pc, #144]	@ (80044f8 <TIM_OC1_SetConfig+0xec>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <TIM_OC1_SetConfig+0x70>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a23      	ldr	r2, [pc, #140]	@ (80044fc <TIM_OC1_SetConfig+0xf0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC1_SetConfig+0x70>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a22      	ldr	r2, [pc, #136]	@ (8004500 <TIM_OC1_SetConfig+0xf4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10c      	bne.n	8004496 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0308 	bic.w	r3, r3, #8
 8004482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 0304 	bic.w	r3, r3, #4
 8004494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a17      	ldr	r2, [pc, #92]	@ (80044f8 <TIM_OC1_SetConfig+0xec>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d007      	beq.n	80044ae <TIM_OC1_SetConfig+0xa2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <TIM_OC1_SetConfig+0xf0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_OC1_SetConfig+0xa2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <TIM_OC1_SetConfig+0xf4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d111      	bne.n	80044d2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400

08004504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f023 0210 	bic.w	r2, r3, #16
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0320 	bic.w	r3, r3, #32
 8004552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a22      	ldr	r2, [pc, #136]	@ (80045ec <TIM_OC2_SetConfig+0xe8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10d      	bne.n	8004584 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004582:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a19      	ldr	r2, [pc, #100]	@ (80045ec <TIM_OC2_SetConfig+0xe8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_OC2_SetConfig+0x98>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a18      	ldr	r2, [pc, #96]	@ (80045f0 <TIM_OC2_SetConfig+0xec>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC2_SetConfig+0x98>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a17      	ldr	r2, [pc, #92]	@ (80045f4 <TIM_OC2_SetConfig+0xf0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d113      	bne.n	80045c4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400

080045f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a21      	ldr	r2, [pc, #132]	@ (80046dc <TIM_OC3_SetConfig+0xe4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10d      	bne.n	8004676 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a18      	ldr	r2, [pc, #96]	@ (80046dc <TIM_OC3_SetConfig+0xe4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <TIM_OC3_SetConfig+0x96>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a17      	ldr	r2, [pc, #92]	@ (80046e0 <TIM_OC3_SetConfig+0xe8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d003      	beq.n	800468e <TIM_OC3_SetConfig+0x96>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a16      	ldr	r2, [pc, #88]	@ (80046e4 <TIM_OC3_SetConfig+0xec>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d113      	bne.n	80046b6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800469c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400

080046e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	031b      	lsls	r3, r3, #12
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a14      	ldr	r2, [pc, #80]	@ (8004798 <TIM_OC4_SetConfig+0xb0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_OC4_SetConfig+0x74>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a13      	ldr	r2, [pc, #76]	@ (800479c <TIM_OC4_SetConfig+0xb4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_OC4_SetConfig+0x74>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a12      	ldr	r2, [pc, #72]	@ (80047a0 <TIM_OC4_SetConfig+0xb8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d109      	bne.n	8004770 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	019b      	lsls	r3, r3, #6
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400

080047a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80047e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a13      	ldr	r2, [pc, #76]	@ (8004848 <TIM_OC5_SetConfig+0xa4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <TIM_OC5_SetConfig+0x6a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a12      	ldr	r2, [pc, #72]	@ (800484c <TIM_OC5_SetConfig+0xa8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d003      	beq.n	800480e <TIM_OC5_SetConfig+0x6a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a11      	ldr	r2, [pc, #68]	@ (8004850 <TIM_OC5_SetConfig+0xac>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d109      	bne.n	8004822 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	621a      	str	r2, [r3, #32]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40014000 	.word	0x40014000
 8004850:	40014400 	.word	0x40014400

08004854 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800489a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	051b      	lsls	r3, r3, #20
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <TIM_OC6_SetConfig+0xa8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_OC6_SetConfig+0x6c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <TIM_OC6_SetConfig+0xac>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC6_SetConfig+0x6c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a12      	ldr	r2, [pc, #72]	@ (8004904 <TIM_OC6_SetConfig+0xb0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d109      	bne.n	80048d4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	029b      	lsls	r3, r3, #10
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400

08004908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f023 030a 	bic.w	r3, r3, #10
 8004944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f023 0210 	bic.w	r2, r3, #16
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f043 0307 	orr.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	609a      	str	r2, [r3, #8]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2201      	movs	r2, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	401a      	ands	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1a      	ldr	r2, [r3, #32]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e04f      	b.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a21      	ldr	r2, [pc, #132]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ad0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b08:	d004      	beq.n	8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a10      	ldr	r2, [pc, #64]	@ (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10c      	bne.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40014000 	.word	0x40014000

08004b54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e060      	b.n	8004c32 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a14      	ldr	r2, [pc, #80]	@ (8004c40 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d115      	bne.n	8004c20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	051b      	lsls	r3, r3, #20
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40012c00 	.word	0x40012c00

08004c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e040      	b.n	8004d14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc f880 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	@ 0x24
 8004cac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fade 	bl	8005288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f8af 	bl	8004e30 <UART_SetConfig>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e01b      	b.n	8004d14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fb5d 	bl	80053cc <UART_CheckIdleState>
 8004d12:	4603      	mov	r3, r0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d177      	bne.n	8004e24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_UART_Transmit+0x24>
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e070      	b.n	8004e26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2221      	movs	r2, #33	@ 0x21
 8004d50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d52:	f7fc f993 	bl	800107c <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d70:	d108      	bne.n	8004d84 <HAL_UART_Transmit+0x68>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e003      	b.n	8004d8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d8c:	e02f      	b.n	8004dee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2180      	movs	r1, #128	@ 0x80
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fbbf 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e03b      	b.n	8004e26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc0:	b292      	uxth	r2, r2
 8004dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	e007      	b.n	8004ddc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	781a      	ldrb	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1c9      	bne.n	8004d8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2140      	movs	r1, #64	@ 0x40
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fb89 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e005      	b.n	8004e26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b08a      	sub	sp, #40	@ 0x28
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4bb4      	ldr	r3, [pc, #720]	@ (8005130 <UART_SetConfig+0x300>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4aa9      	ldr	r2, [pc, #676]	@ (8005134 <UART_SetConfig+0x304>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	430a      	orrs	r2, r1
 8004eae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4aa0      	ldr	r2, [pc, #640]	@ (8005138 <UART_SetConfig+0x308>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d126      	bne.n	8004f08 <UART_SetConfig+0xd8>
 8004eba:	4ba0      	ldr	r3, [pc, #640]	@ (800513c <UART_SetConfig+0x30c>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d81b      	bhi.n	8004f00 <UART_SetConfig+0xd0>
 8004ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <UART_SetConfig+0xa0>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ef1 	.word	0x08004ef1
 8004ed8:	08004ee9 	.word	0x08004ee9
 8004edc:	08004ef9 	.word	0x08004ef9
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee6:	e080      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eee:	e07c      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef6:	e078      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efe:	e074      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e070      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a8c      	ldr	r2, [pc, #560]	@ (8005140 <UART_SetConfig+0x310>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d138      	bne.n	8004f84 <UART_SetConfig+0x154>
 8004f12:	4b8a      	ldr	r3, [pc, #552]	@ (800513c <UART_SetConfig+0x30c>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d82d      	bhi.n	8004f7c <UART_SetConfig+0x14c>
 8004f20:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <UART_SetConfig+0xf8>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08004f7d 	.word	0x08004f7d
 8004f30:	08004f7d 	.word	0x08004f7d
 8004f34:	08004f7d 	.word	0x08004f7d
 8004f38:	08004f6d 	.word	0x08004f6d
 8004f3c:	08004f7d 	.word	0x08004f7d
 8004f40:	08004f7d 	.word	0x08004f7d
 8004f44:	08004f7d 	.word	0x08004f7d
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f7d 	.word	0x08004f7d
 8004f50:	08004f7d 	.word	0x08004f7d
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e042      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004f64:	2302      	movs	r3, #2
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6a:	e03e      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f72:	e03a      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004f74:	2308      	movs	r3, #8
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7a:	e036      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f82:	e032      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6a      	ldr	r2, [pc, #424]	@ (8005134 <UART_SetConfig+0x304>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d12a      	bne.n	8004fe4 <UART_SetConfig+0x1b4>
 8004f8e:	4b6b      	ldr	r3, [pc, #428]	@ (800513c <UART_SetConfig+0x30c>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f9c:	d01a      	beq.n	8004fd4 <UART_SetConfig+0x1a4>
 8004f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fa2:	d81b      	bhi.n	8004fdc <UART_SetConfig+0x1ac>
 8004fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa8:	d00c      	beq.n	8004fc4 <UART_SetConfig+0x194>
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fae:	d815      	bhi.n	8004fdc <UART_SetConfig+0x1ac>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <UART_SetConfig+0x18c>
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb8:	d008      	beq.n	8004fcc <UART_SetConfig+0x19c>
 8004fba:	e00f      	b.n	8004fdc <UART_SetConfig+0x1ac>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e012      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e00e      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e00a      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e006      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e002      	b.n	8004fea <UART_SetConfig+0x1ba>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a51      	ldr	r2, [pc, #324]	@ (8005134 <UART_SetConfig+0x304>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d17a      	bne.n	80050ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d824      	bhi.n	8005046 <UART_SetConfig+0x216>
 8004ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <UART_SetConfig+0x1d4>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005029 	.word	0x08005029
 8005008:	08005047 	.word	0x08005047
 800500c:	08005031 	.word	0x08005031
 8005010:	08005047 	.word	0x08005047
 8005014:	08005037 	.word	0x08005037
 8005018:	08005047 	.word	0x08005047
 800501c:	08005047 	.word	0x08005047
 8005020:	08005047 	.word	0x08005047
 8005024:	0800503f 	.word	0x0800503f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe f8d0 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 800502c:	61f8      	str	r0, [r7, #28]
        break;
 800502e:	e010      	b.n	8005052 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005030:	4b44      	ldr	r3, [pc, #272]	@ (8005144 <UART_SetConfig+0x314>)
 8005032:	61fb      	str	r3, [r7, #28]
        break;
 8005034:	e00d      	b.n	8005052 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005036:	f7fe f831 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800503a:	61f8      	str	r0, [r7, #28]
        break;
 800503c:	e009      	b.n	8005052 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005042:	61fb      	str	r3, [r7, #28]
        break;
 8005044:	e005      	b.n	8005052 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8107 	beq.w	8005268 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	429a      	cmp	r2, r3
 8005068:	d305      	bcc.n	8005076 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	429a      	cmp	r2, r3
 8005074:	d903      	bls.n	800507e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800507c:	e0f4      	b.n	8005268 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2200      	movs	r2, #0
 8005082:	461c      	mov	r4, r3
 8005084:	4615      	mov	r5, r2
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	022b      	lsls	r3, r5, #8
 8005090:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005094:	0222      	lsls	r2, r4, #8
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	6849      	ldr	r1, [r1, #4]
 800509a:	0849      	lsrs	r1, r1, #1
 800509c:	2000      	movs	r0, #0
 800509e:	4688      	mov	r8, r1
 80050a0:	4681      	mov	r9, r0
 80050a2:	eb12 0a08 	adds.w	sl, r2, r8
 80050a6:	eb43 0b09 	adc.w	fp, r3, r9
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	f7fb f890 	bl	80001e0 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050ce:	d308      	bcc.n	80050e2 <UART_SetConfig+0x2b2>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d6:	d204      	bcs.n	80050e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	60da      	str	r2, [r3, #12]
 80050e0:	e0c2      	b.n	8005268 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050e8:	e0be      	b.n	8005268 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f2:	d16a      	bne.n	80051ca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80050f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d834      	bhi.n	8005166 <UART_SetConfig+0x336>
 80050fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005104 <UART_SetConfig+0x2d4>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005129 	.word	0x08005129
 8005108:	08005149 	.word	0x08005149
 800510c:	08005151 	.word	0x08005151
 8005110:	08005167 	.word	0x08005167
 8005114:	08005157 	.word	0x08005157
 8005118:	08005167 	.word	0x08005167
 800511c:	08005167 	.word	0x08005167
 8005120:	08005167 	.word	0x08005167
 8005124:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fe f850 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 800512c:	61f8      	str	r0, [r7, #28]
        break;
 800512e:	e020      	b.n	8005172 <UART_SetConfig+0x342>
 8005130:	efff69f3 	.word	0xefff69f3
 8005134:	40008000 	.word	0x40008000
 8005138:	40013800 	.word	0x40013800
 800513c:	40021000 	.word	0x40021000
 8005140:	40004400 	.word	0x40004400
 8005144:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7fe f856 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 800514c:	61f8      	str	r0, [r7, #28]
        break;
 800514e:	e010      	b.n	8005172 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b4c      	ldr	r3, [pc, #304]	@ (8005284 <UART_SetConfig+0x454>)
 8005152:	61fb      	str	r3, [r7, #28]
        break;
 8005154:	e00d      	b.n	8005172 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7fd ffa1 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800515a:	61f8      	str	r0, [r7, #28]
        break;
 800515c:	e009      	b.n	8005172 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005162:	61fb      	str	r3, [r7, #28]
        break;
 8005164:	e005      	b.n	8005172 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d077      	beq.n	8005268 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	005a      	lsls	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	441a      	add	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b0f      	cmp	r3, #15
 8005192:	d916      	bls.n	80051c2 <UART_SetConfig+0x392>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519a:	d212      	bcs.n	80051c2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f023 030f 	bic.w	r3, r3, #15
 80051a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	8afb      	ldrh	r3, [r7, #22]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	8afa      	ldrh	r2, [r7, #22]
 80051be:	60da      	str	r2, [r3, #12]
 80051c0:	e052      	b.n	8005268 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051c8:	e04e      	b.n	8005268 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d827      	bhi.n	8005222 <UART_SetConfig+0x3f2>
 80051d2:	a201      	add	r2, pc, #4	@ (adr r2, 80051d8 <UART_SetConfig+0x3a8>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005223 	.word	0x08005223
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005223 	.word	0x08005223
 80051f4:	08005223 	.word	0x08005223
 80051f8:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fd ffe6 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8005200:	61f8      	str	r0, [r7, #28]
        break;
 8005202:	e014      	b.n	800522e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fd fff8 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 8005208:	61f8      	str	r0, [r7, #28]
        break;
 800520a:	e010      	b.n	800522e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b1d      	ldr	r3, [pc, #116]	@ (8005284 <UART_SetConfig+0x454>)
 800520e:	61fb      	str	r3, [r7, #28]
        break;
 8005210:	e00d      	b.n	800522e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fd ff43 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8005216:	61f8      	str	r0, [r7, #28]
        break;
 8005218:	e009      	b.n	800522e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800521e:	61fb      	str	r3, [r7, #28]
        break;
 8005220:	e005      	b.n	800522e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800522c:	bf00      	nop
    }

    if (pclk != 0U)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d019      	beq.n	8005268 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	085a      	lsrs	r2, r3, #1
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	441a      	add	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d909      	bls.n	8005262 <UART_SetConfig+0x432>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005254:	d205      	bcs.n	8005262 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	e002      	b.n	8005268 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005274:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	@ 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005282:	bf00      	nop
 8005284:	00f42400 	.word	0x00f42400

08005288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01a      	beq.n	800539e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005386:	d10a      	bne.n	800539e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b098      	sub	sp, #96	@ 0x60
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053dc:	f7fb fe4e 	bl	800107c <HAL_GetTick>
 80053e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d12e      	bne.n	800544e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f8:	2200      	movs	r2, #0
 80053fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f88c 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d021      	beq.n	800544e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800541e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005428:	647b      	str	r3, [r7, #68]	@ 0x44
 800542a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800542e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e062      	b.n	8005514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b04      	cmp	r3, #4
 800545a:	d149      	bne.n	80054f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800545c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005464:	2200      	movs	r2, #0
 8005466:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f856 	bl	800551c <UART_WaitOnFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d03c      	beq.n	80054f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	623b      	str	r3, [r7, #32]
   return(result);
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
 8005496:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c8:	61fa      	str	r2, [r7, #28]
 80054ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	617b      	str	r3, [r7, #20]
   return(result);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e5      	bne.n	80054a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e011      	b.n	8005514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3758      	adds	r7, #88	@ 0x58
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552c:	e04f      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d04b      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fb fda1 	bl	800107c <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <UART_WaitOnFlagUntilTimeout+0x30>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e04e      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d037      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b80      	cmp	r3, #128	@ 0x80
 8005562:	d034      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b40      	cmp	r3, #64	@ 0x40
 8005568:	d031      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b08      	cmp	r3, #8
 8005576:	d110      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2208      	movs	r2, #8
 800557e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f838 	bl	80055f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2208      	movs	r2, #8
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e029      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a8:	d111      	bne.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f81e 	bl	80055f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00f      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d0a0      	beq.n	800552e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b095      	sub	sp, #84	@ 0x54
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
 800561e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e5      	bne.n	8005630 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005668:	2b01      	cmp	r3, #1
 800566a:	d118      	bne.n	800569e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	60bb      	str	r3, [r7, #8]
   return(result);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0310 	bic.w	r3, r3, #16
 8005680:	647b      	str	r3, [r7, #68]	@ 0x44
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6979      	ldr	r1, [r7, #20]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	613b      	str	r3, [r7, #16]
   return(result);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e6      	bne.n	800566c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056b2:	bf00      	nop
 80056b4:	3754      	adds	r7, #84	@ 0x54
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	4603      	mov	r3, r0
 80056c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d0:	2b84      	cmp	r3, #132	@ 0x84
 80056d2:	d005      	beq.n	80056e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	3303      	adds	r3, #3
 80056de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056f2:	f000 fff3 	bl	80066dc <vTaskStartScheduler>
  
  return osOK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}

080056fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80056fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056fe:	b089      	sub	sp, #36	@ 0x24
 8005700:	af04      	add	r7, sp, #16
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d020      	beq.n	8005750 <osThreadCreate+0x54>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01c      	beq.n	8005750 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685c      	ldr	r4, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691e      	ldr	r6, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ffc8 	bl	80056be <makeFreeRtosPriority>
 800572e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005738:	9202      	str	r2, [sp, #8]
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	9100      	str	r1, [sp, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	4632      	mov	r2, r6
 8005742:	4629      	mov	r1, r5
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fde3 	bl	8006310 <xTaskCreateStatic>
 800574a:	4603      	mov	r3, r0
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e01c      	b.n	800578a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685c      	ldr	r4, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800575c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ffaa 	bl	80056be <makeFreeRtosPriority>
 800576a:	4602      	mov	r2, r0
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	9200      	str	r2, [sp, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4632      	mov	r2, r6
 8005778:	4629      	mov	r1, r5
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fe28 	bl	80063d0 <xTaskCreate>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d001      	beq.n	800578a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	e000      	b.n	800578c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005794 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <osDelay+0x16>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e000      	b.n	80057ac <osDelay+0x18>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 ff5f 	bl	8006670 <vTaskDelay>
  
  return osOK;
 80057b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f103 0208 	add.w	r2, r3, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f103 0208 	add.w	r2, r3, #8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f103 0208 	add.w	r2, r3, #8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d103      	bne.n	800587e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e00c      	b.n	8005898 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3308      	adds	r3, #8
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	e002      	b.n	800588c <vListInsert+0x2e>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	429a      	cmp	r2, r3
 8005896:	d2f6      	bcs.n	8005886 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6892      	ldr	r2, [r2, #8]
 80058e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6852      	ldr	r2, [r2, #4]
 80058f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d103      	bne.n	8005904 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	1e5a      	subs	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005950:	f002 f8a2 	bl	8007a98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595c:	68f9      	ldr	r1, [r7, #12]
 800595e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	441a      	add	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	3b01      	subs	r3, #1
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	441a      	add	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	22ff      	movs	r2, #255	@ 0xff
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	22ff      	movs	r2, #255	@ 0xff
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d114      	bne.n	80059d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01a      	beq.n	80059e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3310      	adds	r3, #16
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f92e 	bl	8006c14 <xTaskRemoveFromEventList>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d012      	beq.n	80059e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <xQueueGenericReset+0xd0>)
 80059c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	e009      	b.n	80059e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3310      	adds	r3, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fef1 	bl	80057bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3324      	adds	r3, #36	@ 0x24
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff feec 	bl	80057bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059e4:	f002 f88a 	bl	8007afc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059e8:	2301      	movs	r3, #1
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08e      	sub	sp, #56	@ 0x38
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	e7fd      	b.n	8005a20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	e7fd      	b.n	8005a3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <xQueueGenericCreateStatic+0x56>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <xQueueGenericCreateStatic+0x5a>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueGenericCreateStatic+0x5c>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	623b      	str	r3, [r7, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	e7fd      	b.n	8005a6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <xQueueGenericCreateStatic+0x84>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <xQueueGenericCreateStatic+0x88>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <xQueueGenericCreateStatic+0x8a>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10b      	bne.n	8005a9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	61fb      	str	r3, [r7, #28]
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	e7fd      	b.n	8005a9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a9e:	2348      	movs	r3, #72	@ 0x48
 8005aa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b48      	cmp	r3, #72	@ 0x48
 8005aa6:	d00b      	beq.n	8005ac0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61bb      	str	r3, [r7, #24]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ac0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00d      	beq.n	8005ae8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ad4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f805 	bl	8005af2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3730      	adds	r7, #48	@ 0x30
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e002      	b.n	8005b14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b20:	2101      	movs	r1, #1
 8005b22:	69b8      	ldr	r0, [r7, #24]
 8005b24:	f7ff fefe 	bl	8005924 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08e      	sub	sp, #56	@ 0x38
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <xQueueGenericSend+0x34>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSend+0x42>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <xQueueGenericSend+0x46>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueGenericSend+0x48>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <xQueueGenericSend+0x64>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	e7fd      	b.n	8005b90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSend+0x72>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <xQueueGenericSend+0x76>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueGenericSend+0x78>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <xQueueGenericSend+0x94>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	623b      	str	r3, [r7, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	e7fd      	b.n	8005bc0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bc4:	f001 f9ec 	bl	8006fa0 <xTaskGetSchedulerState>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <xQueueGenericSend+0xa4>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <xQueueGenericSend+0xa8>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <xQueueGenericSend+0xaa>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <xQueueGenericSend+0xc6>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	61fb      	str	r3, [r7, #28]
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bf6:	f001 ff4f 	bl	8007a98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <xQueueGenericSend+0xdc>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d129      	bne.n	8005c60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c12:	f000 fa0f 	bl	8006034 <prvCopyDataToQueue>
 8005c16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d010      	beq.n	8005c42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	3324      	adds	r3, #36	@ 0x24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fff5 	bl	8006c14 <xTaskRemoveFromEventList>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d013      	beq.n	8005c58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c30:	4b3f      	ldr	r3, [pc, #252]	@ (8005d30 <xQueueGenericSend+0x200>)
 8005c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	e00a      	b.n	8005c58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c48:	4b39      	ldr	r3, [pc, #228]	@ (8005d30 <xQueueGenericSend+0x200>)
 8005c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c58:	f001 ff50 	bl	8007afc <vPortExitCritical>
				return pdPASS;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e063      	b.n	8005d28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c66:	f001 ff49 	bl	8007afc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e05c      	b.n	8005d28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c74:	f107 0314 	add.w	r3, r7, #20
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 f82f 	bl	8006cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c82:	f001 ff3b 	bl	8007afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c86:	f000 fd99 	bl	80067bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c8a:	f001 ff05 	bl	8007a98 <vPortEnterCritical>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c94:	b25b      	sxtb	r3, r3
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d103      	bne.n	8005ca4 <xQueueGenericSend+0x174>
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005caa:	b25b      	sxtb	r3, r3
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d103      	bne.n	8005cba <xQueueGenericSend+0x18a>
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cba:	f001 ff1f 	bl	8007afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cbe:	1d3a      	adds	r2, r7, #4
 8005cc0:	f107 0314 	add.w	r3, r7, #20
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 f81e 	bl	8006d08 <xTaskCheckForTimeOut>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d124      	bne.n	8005d1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cd4:	f000 faa6 	bl	8006224 <prvIsQueueFull>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d018      	beq.n	8005d10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 ff42 	bl	8006b70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cee:	f000 fa31 	bl	8006154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cf2:	f000 fd71 	bl	80067d8 <xTaskResumeAll>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f47f af7c 	bne.w	8005bf6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005d30 <xQueueGenericSend+0x200>)
 8005d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	e772      	b.n	8005bf6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d12:	f000 fa1f 	bl	8006154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d16:	f000 fd5f 	bl	80067d8 <xTaskResumeAll>
 8005d1a:	e76c      	b.n	8005bf6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d1e:	f000 fa19 	bl	8006154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d22:	f000 fd59 	bl	80067d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3738      	adds	r7, #56	@ 0x38
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b090      	sub	sp, #64	@ 0x40
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <xQueueGenericSendFromISR+0x3e>
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <xQueueGenericSendFromISR+0x42>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <xQueueGenericSendFromISR+0x44>
 8005d76:	2300      	movs	r3, #0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d103      	bne.n	8005da2 <xQueueGenericSendFromISR+0x6e>
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <xQueueGenericSendFromISR+0x72>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <xQueueGenericSendFromISR+0x74>
 8005da6:	2300      	movs	r3, #0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	623b      	str	r3, [r7, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dc4:	f001 ff48 	bl	8007c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dc8:	f3ef 8211 	mrs	r2, BASEPRI
 8005dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	61fa      	str	r2, [r7, #28]
 8005dde:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005de0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <xQueueGenericSendFromISR+0xc2>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d12f      	bne.n	8005e56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e0c:	f000 f912 	bl	8006034 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d112      	bne.n	8005e40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e24:	3324      	adds	r3, #36	@ 0x24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fef4 	bl	8006c14 <xTaskRemoveFromEventList>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e007      	b.n	8005e50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e44:	3301      	adds	r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	b25a      	sxtb	r2, r3
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005e54:	e001      	b.n	8005e5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3740      	adds	r7, #64	@ 0x40
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08c      	sub	sp, #48	@ 0x30
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <xQueueReceive+0x32>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	623b      	str	r3, [r7, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <xQueueReceive+0x40>
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <xQueueReceive+0x44>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <xQueueReceive+0x46>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <xQueueReceive+0x62>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	61fb      	str	r3, [r7, #28]
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ed2:	f001 f865 	bl	8006fa0 <xTaskGetSchedulerState>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <xQueueReceive+0x72>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <xQueueReceive+0x76>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <xQueueReceive+0x78>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <xQueueReceive+0x94>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	61bb      	str	r3, [r7, #24]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f04:	f001 fdc8 	bl	8007a98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01f      	beq.n	8005f54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f18:	f000 f8f6 	bl	8006108 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00f      	beq.n	8005f4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	3310      	adds	r3, #16
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fe6f 	bl	8006c14 <xTaskRemoveFromEventList>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8006030 <xQueueReceive+0x1c0>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f4c:	f001 fdd6 	bl	8007afc <vPortExitCritical>
				return pdPASS;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e069      	b.n	8006028 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f5a:	f001 fdcf 	bl	8007afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e062      	b.n	8006028 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f68:	f107 0310 	add.w	r3, r7, #16
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 feb5 	bl	8006cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f72:	2301      	movs	r3, #1
 8005f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f76:	f001 fdc1 	bl	8007afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f7a:	f000 fc1f 	bl	80067bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f7e:	f001 fd8b 	bl	8007a98 <vPortEnterCritical>
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d103      	bne.n	8005f98 <xQueueReceive+0x128>
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d103      	bne.n	8005fae <xQueueReceive+0x13e>
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fae:	f001 fda5 	bl	8007afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fb2:	1d3a      	adds	r2, r7, #4
 8005fb4:	f107 0310 	add.w	r3, r7, #16
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fea4 	bl	8006d08 <xTaskCheckForTimeOut>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d123      	bne.n	800600e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fc8:	f000 f916 	bl	80061f8 <prvIsQueueEmpty>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d017      	beq.n	8006002 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd4:	3324      	adds	r3, #36	@ 0x24
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fdc8 	bl	8006b70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fe2:	f000 f8b7 	bl	8006154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fe6:	f000 fbf7 	bl	80067d8 <xTaskResumeAll>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d189      	bne.n	8005f04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8006030 <xQueueReceive+0x1c0>)
 8005ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	e780      	b.n	8005f04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006004:	f000 f8a6 	bl	8006154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006008:	f000 fbe6 	bl	80067d8 <xTaskResumeAll>
 800600c:	e77a      	b.n	8005f04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800600e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006010:	f000 f8a0 	bl	8006154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006014:	f000 fbe0 	bl	80067d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800601a:	f000 f8ed 	bl	80061f8 <prvIsQueueEmpty>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	f43f af6f 	beq.w	8005f04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006026:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006028:	4618      	mov	r0, r3
 800602a:	3730      	adds	r7, #48	@ 0x30
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	e000ed04 	.word	0xe000ed04

08006034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10d      	bne.n	800606e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d14d      	bne.n	80060f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 ffbc 	bl	8006fdc <xTaskPriorityDisinherit>
 8006064:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	e043      	b.n	80060f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d119      	bne.n	80060a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6858      	ldr	r0, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	461a      	mov	r2, r3
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	f002 f8a6 	bl	80081d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	441a      	add	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	429a      	cmp	r2, r3
 800609c:	d32b      	bcc.n	80060f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	e026      	b.n	80060f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68d8      	ldr	r0, [r3, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	461a      	mov	r2, r3
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	f002 f88c 	bl	80081d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	425b      	negs	r3, r3
 80060c2:	441a      	add	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d207      	bcs.n	80060e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060dc:	425b      	negs	r3, r3
 80060de:	441a      	add	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d105      	bne.n	80060f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80060fe:	697b      	ldr	r3, [r7, #20]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d018      	beq.n	800614c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006122:	441a      	add	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	d303      	bcc.n	800613c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68d9      	ldr	r1, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	461a      	mov	r2, r3
 8006146:	6838      	ldr	r0, [r7, #0]
 8006148:	f002 f842 	bl	80081d0 <memcpy>
	}
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800615c:	f001 fc9c 	bl	8007a98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006166:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006168:	e011      	b.n	800618e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d012      	beq.n	8006198 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3324      	adds	r3, #36	@ 0x24
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fd4c 	bl	8006c14 <xTaskRemoveFromEventList>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006182:	f000 fe25 	bl	8006dd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	3b01      	subs	r3, #1
 800618a:	b2db      	uxtb	r3, r3
 800618c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800618e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006192:	2b00      	cmp	r3, #0
 8006194:	dce9      	bgt.n	800616a <prvUnlockQueue+0x16>
 8006196:	e000      	b.n	800619a <prvUnlockQueue+0x46>
					break;
 8006198:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	22ff      	movs	r2, #255	@ 0xff
 800619e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80061a2:	f001 fcab 	bl	8007afc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061a6:	f001 fc77 	bl	8007a98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061b2:	e011      	b.n	80061d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d012      	beq.n	80061e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3310      	adds	r3, #16
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fd27 	bl	8006c14 <xTaskRemoveFromEventList>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061cc:	f000 fe00 	bl	8006dd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dce9      	bgt.n	80061b4 <prvUnlockQueue+0x60>
 80061e0:	e000      	b.n	80061e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	22ff      	movs	r2, #255	@ 0xff
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80061ec:	f001 fc86 	bl	8007afc <vPortExitCritical>
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006200:	f001 fc4a 	bl	8007a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e001      	b.n	8006216 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006216:	f001 fc71 	bl	8007afc <vPortExitCritical>

	return xReturn;
 800621a:	68fb      	ldr	r3, [r7, #12]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800622c:	f001 fc34 	bl	8007a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006238:	429a      	cmp	r2, r3
 800623a:	d102      	bne.n	8006242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e001      	b.n	8006246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006246:	f001 fc59 	bl	8007afc <vPortExitCritical>

	return xReturn;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e014      	b.n	800628e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006264:	4a0f      	ldr	r2, [pc, #60]	@ (80062a4 <vQueueAddToRegistry+0x50>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006270:	490c      	ldr	r1, [pc, #48]	@ (80062a4 <vQueueAddToRegistry+0x50>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800627a:	4a0a      	ldr	r2, [pc, #40]	@ (80062a4 <vQueueAddToRegistry+0x50>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4413      	add	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006286:	e006      	b.n	8006296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b07      	cmp	r3, #7
 8006292:	d9e7      	bls.n	8006264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000990 	.word	0x20000990

080062a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062b8:	f001 fbee 	bl	8007a98 <vPortEnterCritical>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d103      	bne.n	80062d2 <vQueueWaitForMessageRestricted+0x2a>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d103      	bne.n	80062e8 <vQueueWaitForMessageRestricted+0x40>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062e8:	f001 fc08 	bl	8007afc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	3324      	adds	r3, #36	@ 0x24
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fc5d 	bl	8006bbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006302:	6978      	ldr	r0, [r7, #20]
 8006304:	f7ff ff26 	bl	8006154 <prvUnlockQueue>
	}
 8006308:	bf00      	nop
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08e      	sub	sp, #56	@ 0x38
 8006314:	af04      	add	r7, sp, #16
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800631e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	623b      	str	r3, [r7, #32]
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	61fb      	str	r3, [r7, #28]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800635a:	23a0      	movs	r3, #160	@ 0xa0
 800635c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2ba0      	cmp	r3, #160	@ 0xa0
 8006362:	d00b      	beq.n	800637c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	61bb      	str	r3, [r7, #24]
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800637c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01e      	beq.n	80063c2 <xTaskCreateStatic+0xb2>
 8006384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01b      	beq.n	80063c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006392:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	2202      	movs	r2, #2
 8006398:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800639c:	2300      	movs	r3, #0
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	9302      	str	r3, [sp, #8]
 80063a4:	f107 0314 	add.w	r3, r7, #20
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f851 	bl	800645c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063bc:	f000 f8ee 	bl	800659c <prvAddNewTaskToReadyList>
 80063c0:	e001      	b.n	80063c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063c6:	697b      	ldr	r3, [r7, #20]
	}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3728      	adds	r7, #40	@ 0x28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	@ 0x30
 80063d4:	af04      	add	r7, sp, #16
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fc79 	bl	8007cdc <pvPortMalloc>
 80063ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00e      	beq.n	8006410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063f2:	20a0      	movs	r0, #160	@ 0xa0
 80063f4:	f001 fc72 	bl	8007cdc <pvPortMalloc>
 80063f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30
 8006406:	e005      	b.n	8006414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006408:	6978      	ldr	r0, [r7, #20]
 800640a:	f001 fd35 	bl	8007e78 <vPortFree>
 800640e:	e001      	b.n	8006414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d017      	beq.n	800644a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	2300      	movs	r3, #0
 8006426:	9303      	str	r3, [sp, #12]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	9302      	str	r3, [sp, #8]
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f80f 	bl	800645c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800643e:	69f8      	ldr	r0, [r7, #28]
 8006440:	f000 f8ac 	bl	800659c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006444:	2301      	movs	r3, #1
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e002      	b.n	8006450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006450:	69bb      	ldr	r3, [r7, #24]
	}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006474:	3b01      	subs	r3, #1
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	617b      	str	r3, [r7, #20]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01f      	beq.n	80064ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e012      	b.n	80064d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	7819      	ldrb	r1, [r3, #0]
 80064ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	3334      	adds	r3, #52	@ 0x34
 80064c2:	460a      	mov	r2, r1
 80064c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3301      	adds	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b0f      	cmp	r3, #15
 80064dc:	d9e9      	bls.n	80064b2 <prvInitialiseNewTask+0x56>
 80064de:	e000      	b.n	80064e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80064e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064ea:	e003      	b.n	80064f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d901      	bls.n	80064fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064fa:	2306      	movs	r3, #6
 80064fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006502:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	2200      	movs	r2, #0
 800650e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff f971 	bl	80057fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800651a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651c:	3318      	adds	r3, #24
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff f96c 	bl	80057fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	f1c3 0207 	rsb	r2, r3, #7
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2200      	movs	r2, #0
 800653e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	2200      	movs	r2, #0
 8006546:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	334c      	adds	r3, #76	@ 0x4c
 800654e:	224c      	movs	r2, #76	@ 0x4c
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fdb0 	bl	80080b8 <memset>
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	4a0d      	ldr	r2, [pc, #52]	@ (8006590 <prvInitialiseNewTask+0x134>)
 800655c:	651a      	str	r2, [r3, #80]	@ 0x50
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	4a0c      	ldr	r2, [pc, #48]	@ (8006594 <prvInitialiseNewTask+0x138>)
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	4a0c      	ldr	r2, [pc, #48]	@ (8006598 <prvInitialiseNewTask+0x13c>)
 8006568:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	69b8      	ldr	r0, [r7, #24]
 8006570:	f001 f960 	bl	8007834 <pxPortInitialiseStack>
 8006574:	4602      	mov	r2, r0
 8006576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800657a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006586:	bf00      	nop
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20002c20 	.word	0x20002c20
 8006594:	20002c88 	.word	0x20002c88
 8006598:	20002cf0 	.word	0x20002cf0

0800659c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065a4:	f001 fa78 	bl	8007a98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006654 <prvAddNewTaskToReadyList+0xb8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	4a29      	ldr	r2, [pc, #164]	@ (8006654 <prvAddNewTaskToReadyList+0xb8>)
 80065b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065b2:	4b29      	ldr	r3, [pc, #164]	@ (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ba:	4a27      	ldr	r2, [pc, #156]	@ (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065c0:	4b24      	ldr	r3, [pc, #144]	@ (8006654 <prvAddNewTaskToReadyList+0xb8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d110      	bne.n	80065ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065c8:	f000 fc26 	bl	8006e18 <prvInitialiseTaskLists>
 80065cc:	e00d      	b.n	80065ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065ce:	4b23      	ldr	r3, [pc, #140]	@ (800665c <prvAddNewTaskToReadyList+0xc0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065d6:	4b20      	ldr	r3, [pc, #128]	@ (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d802      	bhi.n	80065ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006660 <prvAddNewTaskToReadyList+0xc4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3301      	adds	r3, #1
 80065f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006660 <prvAddNewTaskToReadyList+0xc4>)
 80065f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	2201      	movs	r2, #1
 80065fa:	409a      	lsls	r2, r3
 80065fc:	4b19      	ldr	r3, [pc, #100]	@ (8006664 <prvAddNewTaskToReadyList+0xc8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4313      	orrs	r3, r2
 8006602:	4a18      	ldr	r2, [pc, #96]	@ (8006664 <prvAddNewTaskToReadyList+0xc8>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4a15      	ldr	r2, [pc, #84]	@ (8006668 <prvAddNewTaskToReadyList+0xcc>)
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7ff f8fa 	bl	8005816 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006622:	f001 fa6b 	bl	8007afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006626:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <prvAddNewTaskToReadyList+0xc0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800662e:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <prvAddNewTaskToReadyList+0xbc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	429a      	cmp	r2, r3
 800663a:	d207      	bcs.n	800664c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800663c:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <prvAddNewTaskToReadyList+0xd0>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000ad0 	.word	0x20000ad0
 8006658:	200009d0 	.word	0x200009d0
 800665c:	20000adc 	.word	0x20000adc
 8006660:	20000aec 	.word	0x20000aec
 8006664:	20000ad8 	.word	0x20000ad8
 8006668:	200009d4 	.word	0x200009d4
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d018      	beq.n	80066b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006682:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <vTaskDelay+0x64>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <vTaskDelay+0x32>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60bb      	str	r3, [r7, #8]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066a2:	f000 f88b 	bl	80067bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066a6:	2100      	movs	r1, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fd1f 	bl	80070ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066ae:	f000 f893 	bl	80067d8 <xTaskResumeAll>
 80066b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d107      	bne.n	80066ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066ba:	4b07      	ldr	r3, [pc, #28]	@ (80066d8 <vTaskDelay+0x68>)
 80066bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000af8 	.word	0x20000af8
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	@ 0x28
 80066e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066ea:	463a      	mov	r2, r7
 80066ec:	1d39      	adds	r1, r7, #4
 80066ee:	f107 0308 	add.w	r3, r7, #8
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7f9 ff0a 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	9202      	str	r2, [sp, #8]
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	2300      	movs	r3, #0
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2300      	movs	r3, #0
 8006708:	460a      	mov	r2, r1
 800670a:	4924      	ldr	r1, [pc, #144]	@ (800679c <vTaskStartScheduler+0xc0>)
 800670c:	4824      	ldr	r0, [pc, #144]	@ (80067a0 <vTaskStartScheduler+0xc4>)
 800670e:	f7ff fdff 	bl	8006310 <xTaskCreateStatic>
 8006712:	4603      	mov	r3, r0
 8006714:	4a23      	ldr	r2, [pc, #140]	@ (80067a4 <vTaskStartScheduler+0xc8>)
 8006716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006718:	4b22      	ldr	r3, [pc, #136]	@ (80067a4 <vTaskStartScheduler+0xc8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006720:	2301      	movs	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	e001      	b.n	800672a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d102      	bne.n	8006736 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006730:	f000 fd42 	bl	80071b8 <xTimerCreateTimerTask>
 8006734:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d11b      	bne.n	8006774 <vTaskStartScheduler+0x98>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	613b      	str	r3, [r7, #16]
}
 800674e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006750:	4b15      	ldr	r3, [pc, #84]	@ (80067a8 <vTaskStartScheduler+0xcc>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	334c      	adds	r3, #76	@ 0x4c
 8006756:	4a15      	ldr	r2, [pc, #84]	@ (80067ac <vTaskStartScheduler+0xd0>)
 8006758:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800675a:	4b15      	ldr	r3, [pc, #84]	@ (80067b0 <vTaskStartScheduler+0xd4>)
 800675c:	f04f 32ff 	mov.w	r2, #4294967295
 8006760:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006762:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <vTaskStartScheduler+0xd8>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006768:	4b13      	ldr	r3, [pc, #76]	@ (80067b8 <vTaskStartScheduler+0xdc>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800676e:	f001 f8ef 	bl	8007950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006772:	e00f      	b.n	8006794 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d10b      	bne.n	8006794 <vTaskStartScheduler+0xb8>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	60fb      	str	r3, [r7, #12]
}
 800678e:	bf00      	nop
 8006790:	bf00      	nop
 8006792:	e7fd      	b.n	8006790 <vTaskStartScheduler+0xb4>
}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	080082ec 	.word	0x080082ec
 80067a0:	08006de9 	.word	0x08006de9
 80067a4:	20000af4 	.word	0x20000af4
 80067a8:	200009d0 	.word	0x200009d0
 80067ac:	20000010 	.word	0x20000010
 80067b0:	20000af0 	.word	0x20000af0
 80067b4:	20000adc 	.word	0x20000adc
 80067b8:	20000ad4 	.word	0x20000ad4

080067bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067c0:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <vTaskSuspendAll+0x18>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	4a03      	ldr	r2, [pc, #12]	@ (80067d4 <vTaskSuspendAll+0x18>)
 80067c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	20000af8 	.word	0x20000af8

080067d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067e6:	4b42      	ldr	r3, [pc, #264]	@ (80068f0 <xTaskResumeAll+0x118>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <xTaskResumeAll+0x2e>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	603b      	str	r3, [r7, #0]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006806:	f001 f947 	bl	8007a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800680a:	4b39      	ldr	r3, [pc, #228]	@ (80068f0 <xTaskResumeAll+0x118>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3b01      	subs	r3, #1
 8006810:	4a37      	ldr	r2, [pc, #220]	@ (80068f0 <xTaskResumeAll+0x118>)
 8006812:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006814:	4b36      	ldr	r3, [pc, #216]	@ (80068f0 <xTaskResumeAll+0x118>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d161      	bne.n	80068e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800681c:	4b35      	ldr	r3, [pc, #212]	@ (80068f4 <xTaskResumeAll+0x11c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d05d      	beq.n	80068e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006824:	e02e      	b.n	8006884 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006826:	4b34      	ldr	r3, [pc, #208]	@ (80068f8 <xTaskResumeAll+0x120>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3318      	adds	r3, #24
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff f84c 	bl	80058d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3304      	adds	r3, #4
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff f847 	bl	80058d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	2201      	movs	r2, #1
 8006848:	409a      	lsls	r2, r3
 800684a:	4b2c      	ldr	r3, [pc, #176]	@ (80068fc <xTaskResumeAll+0x124>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4313      	orrs	r3, r2
 8006850:	4a2a      	ldr	r2, [pc, #168]	@ (80068fc <xTaskResumeAll+0x124>)
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4a27      	ldr	r2, [pc, #156]	@ (8006900 <xTaskResumeAll+0x128>)
 8006862:	441a      	add	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f7fe ffd3 	bl	8005816 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006874:	4b23      	ldr	r3, [pc, #140]	@ (8006904 <xTaskResumeAll+0x12c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800687e:	4b22      	ldr	r3, [pc, #136]	@ (8006908 <xTaskResumeAll+0x130>)
 8006880:	2201      	movs	r2, #1
 8006882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006884:	4b1c      	ldr	r3, [pc, #112]	@ (80068f8 <xTaskResumeAll+0x120>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1cc      	bne.n	8006826 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006892:	f000 fb65 	bl	8006f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006896:	4b1d      	ldr	r3, [pc, #116]	@ (800690c <xTaskResumeAll+0x134>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d010      	beq.n	80068c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068a2:	f000 f847 	bl	8006934 <xTaskIncrementTick>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068ac:	4b16      	ldr	r3, [pc, #88]	@ (8006908 <xTaskResumeAll+0x130>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f1      	bne.n	80068a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80068be:	4b13      	ldr	r3, [pc, #76]	@ (800690c <xTaskResumeAll+0x134>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068c4:	4b10      	ldr	r3, [pc, #64]	@ (8006908 <xTaskResumeAll+0x130>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d009      	beq.n	80068e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <xTaskResumeAll+0x138>)
 80068d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068e0:	f001 f90c 	bl	8007afc <vPortExitCritical>

	return xAlreadyYielded;
 80068e4:	68bb      	ldr	r3, [r7, #8]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000af8 	.word	0x20000af8
 80068f4:	20000ad0 	.word	0x20000ad0
 80068f8:	20000a90 	.word	0x20000a90
 80068fc:	20000ad8 	.word	0x20000ad8
 8006900:	200009d4 	.word	0x200009d4
 8006904:	200009d0 	.word	0x200009d0
 8006908:	20000ae4 	.word	0x20000ae4
 800690c:	20000ae0 	.word	0x20000ae0
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800691a:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <xTaskGetTickCount+0x1c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006920:	687b      	ldr	r3, [r7, #4]
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000ad4 	.word	0x20000ad4

08006934 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800693e:	4b4f      	ldr	r3, [pc, #316]	@ (8006a7c <xTaskIncrementTick+0x148>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	f040 808f 	bne.w	8006a66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006948:	4b4d      	ldr	r3, [pc, #308]	@ (8006a80 <xTaskIncrementTick+0x14c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006950:	4a4b      	ldr	r2, [pc, #300]	@ (8006a80 <xTaskIncrementTick+0x14c>)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d121      	bne.n	80069a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800695c:	4b49      	ldr	r3, [pc, #292]	@ (8006a84 <xTaskIncrementTick+0x150>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	603b      	str	r3, [r7, #0]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <xTaskIncrementTick+0x46>
 800697e:	4b41      	ldr	r3, [pc, #260]	@ (8006a84 <xTaskIncrementTick+0x150>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	4b40      	ldr	r3, [pc, #256]	@ (8006a88 <xTaskIncrementTick+0x154>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a3e      	ldr	r2, [pc, #248]	@ (8006a84 <xTaskIncrementTick+0x150>)
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	4a3e      	ldr	r2, [pc, #248]	@ (8006a88 <xTaskIncrementTick+0x154>)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	4b3e      	ldr	r3, [pc, #248]	@ (8006a8c <xTaskIncrementTick+0x158>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a3c      	ldr	r2, [pc, #240]	@ (8006a8c <xTaskIncrementTick+0x158>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	f000 fae0 	bl	8006f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006a90 <xTaskIncrementTick+0x15c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d348      	bcc.n	8006a3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069aa:	4b36      	ldr	r3, [pc, #216]	@ (8006a84 <xTaskIncrementTick+0x150>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b4:	4b36      	ldr	r3, [pc, #216]	@ (8006a90 <xTaskIncrementTick+0x15c>)
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ba:	601a      	str	r2, [r3, #0]
					break;
 80069bc:	e03e      	b.n	8006a3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069be:	4b31      	ldr	r3, [pc, #196]	@ (8006a84 <xTaskIncrementTick+0x150>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d203      	bcs.n	80069de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069d6:	4a2e      	ldr	r2, [pc, #184]	@ (8006a90 <xTaskIncrementTick+0x15c>)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069dc:	e02e      	b.n	8006a3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe ff74 	bl	80058d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d004      	beq.n	80069fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3318      	adds	r3, #24
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe ff6b 	bl	80058d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	2201      	movs	r2, #1
 8006a00:	409a      	lsls	r2, r3
 8006a02:	4b24      	ldr	r3, [pc, #144]	@ (8006a94 <xTaskIncrementTick+0x160>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	4a22      	ldr	r2, [pc, #136]	@ (8006a94 <xTaskIncrementTick+0x160>)
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4a1f      	ldr	r2, [pc, #124]	@ (8006a98 <xTaskIncrementTick+0x164>)
 8006a1a:	441a      	add	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f7fe fef7 	bl	8005816 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a9c <xTaskIncrementTick+0x168>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d3b9      	bcc.n	80069aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a36:	2301      	movs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a3a:	e7b6      	b.n	80069aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a3c:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <xTaskIncrementTick+0x168>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a42:	4915      	ldr	r1, [pc, #84]	@ (8006a98 <xTaskIncrementTick+0x164>)
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d901      	bls.n	8006a58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <xTaskIncrementTick+0x16c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e004      	b.n	8006a70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a66:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa4 <xTaskIncrementTick+0x170>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006aa4 <xTaskIncrementTick+0x170>)
 8006a6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a70:	697b      	ldr	r3, [r7, #20]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000af8 	.word	0x20000af8
 8006a80:	20000ad4 	.word	0x20000ad4
 8006a84:	20000a88 	.word	0x20000a88
 8006a88:	20000a8c 	.word	0x20000a8c
 8006a8c:	20000ae8 	.word	0x20000ae8
 8006a90:	20000af0 	.word	0x20000af0
 8006a94:	20000ad8 	.word	0x20000ad8
 8006a98:	200009d4 	.word	0x200009d4
 8006a9c:	200009d0 	.word	0x200009d0
 8006aa0:	20000ae4 	.word	0x20000ae4
 8006aa4:	20000ae0 	.word	0x20000ae0

08006aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006aae:	4b2a      	ldr	r3, [pc, #168]	@ (8006b58 <vTaskSwitchContext+0xb0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ab6:	4b29      	ldr	r3, [pc, #164]	@ (8006b5c <vTaskSwitchContext+0xb4>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006abc:	e045      	b.n	8006b4a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006abe:	4b27      	ldr	r3, [pc, #156]	@ (8006b5c <vTaskSwitchContext+0xb4>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac4:	4b26      	ldr	r3, [pc, #152]	@ (8006b60 <vTaskSwitchContext+0xb8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	fab3 f383 	clz	r3, r3
 8006ad0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	f1c3 031f 	rsb	r3, r3, #31
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	4922      	ldr	r1, [pc, #136]	@ (8006b64 <vTaskSwitchContext+0xbc>)
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <vTaskSwitchContext+0x5a>
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a14      	ldr	r2, [pc, #80]	@ (8006b64 <vTaskSwitchContext+0xbc>)
 8006b12:	4413      	add	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	3308      	adds	r3, #8
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d104      	bne.n	8006b36 <vTaskSwitchContext+0x8e>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006b68 <vTaskSwitchContext+0xc0>)
 8006b3e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b40:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <vTaskSwitchContext+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	334c      	adds	r3, #76	@ 0x4c
 8006b46:	4a09      	ldr	r2, [pc, #36]	@ (8006b6c <vTaskSwitchContext+0xc4>)
 8006b48:	6013      	str	r3, [r2, #0]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000af8 	.word	0x20000af8
 8006b5c:	20000ae4 	.word	0x20000ae4
 8006b60:	20000ad8 	.word	0x20000ad8
 8006b64:	200009d4 	.word	0x200009d4
 8006b68:	200009d0 	.word	0x200009d0
 8006b6c:	20000010 	.word	0x20000010

08006b70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10b      	bne.n	8006b98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60fb      	str	r3, [r7, #12]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b98:	4b07      	ldr	r3, [pc, #28]	@ (8006bb8 <vTaskPlaceOnEventList+0x48>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fe fe5c 	bl	800585e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6838      	ldr	r0, [r7, #0]
 8006baa:	f000 fa9f 	bl	80070ec <prvAddCurrentTaskToDelayedList>
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200009d0 	.word	0x200009d0

08006bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	617b      	str	r3, [r7, #20]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006be6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <vTaskPlaceOnEventListRestricted+0x54>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3318      	adds	r3, #24
 8006bec:	4619      	mov	r1, r3
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7fe fe11 	bl	8005816 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	68b8      	ldr	r0, [r7, #8]
 8006c04:	f000 fa72 	bl	80070ec <prvAddCurrentTaskToDelayedList>
	}
 8006c08:	bf00      	nop
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	200009d0 	.word	0x200009d0

08006c14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	60fb      	str	r3, [r7, #12]
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	e7fd      	b.n	8006c3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3318      	adds	r3, #24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fe42 	bl	80058d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc4 <xTaskRemoveFromEventList+0xb0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11c      	bne.n	8006c8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fe39 	bl	80058d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	2201      	movs	r2, #1
 8006c64:	409a      	lsls	r2, r3
 8006c66:	4b18      	ldr	r3, [pc, #96]	@ (8006cc8 <xTaskRemoveFromEventList+0xb4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	4a16      	ldr	r2, [pc, #88]	@ (8006cc8 <xTaskRemoveFromEventList+0xb4>)
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4a13      	ldr	r2, [pc, #76]	@ (8006ccc <xTaskRemoveFromEventList+0xb8>)
 8006c7e:	441a      	add	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fe fdc5 	bl	8005816 <vListInsertEnd>
 8006c8c:	e005      	b.n	8006c9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3318      	adds	r3, #24
 8006c92:	4619      	mov	r1, r3
 8006c94:	480e      	ldr	r0, [pc, #56]	@ (8006cd0 <xTaskRemoveFromEventList+0xbc>)
 8006c96:	f7fe fdbe 	bl	8005816 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <xTaskRemoveFromEventList+0xc0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d905      	bls.n	8006cb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <xTaskRemoveFromEventList+0xc4>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	e001      	b.n	8006cb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cb8:	697b      	ldr	r3, [r7, #20]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000af8 	.word	0x20000af8
 8006cc8:	20000ad8 	.word	0x20000ad8
 8006ccc:	200009d4 	.word	0x200009d4
 8006cd0:	20000a90 	.word	0x20000a90
 8006cd4:	200009d0 	.word	0x200009d0
 8006cd8:	20000ae4 	.word	0x20000ae4

08006cdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ce4:	4b06      	ldr	r3, [pc, #24]	@ (8006d00 <vTaskInternalSetTimeOutState+0x24>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <vTaskInternalSetTimeOutState+0x28>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20000ae8 	.word	0x20000ae8
 8006d04:	20000ad4 	.word	0x20000ad4

08006d08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10b      	bne.n	8006d30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	613b      	str	r3, [r7, #16]
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d4e:	f000 fea3 	bl	8007a98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d52:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc8 <xTaskCheckForTimeOut+0xc0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6a:	d102      	bne.n	8006d72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	e023      	b.n	8006dba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b15      	ldr	r3, [pc, #84]	@ (8006dcc <xTaskCheckForTimeOut+0xc4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d007      	beq.n	8006d8e <xTaskCheckForTimeOut+0x86>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d302      	bcc.n	8006d8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	e015      	b.n	8006dba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d20b      	bcs.n	8006db0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff99 	bl	8006cdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	e004      	b.n	8006dba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dba:	f000 fe9f 	bl	8007afc <vPortExitCritical>

	return xReturn;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3720      	adds	r7, #32
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000ad4 	.word	0x20000ad4
 8006dcc:	20000ae8 	.word	0x20000ae8

08006dd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006dd4:	4b03      	ldr	r3, [pc, #12]	@ (8006de4 <vTaskMissedYield+0x14>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20000ae4 	.word	0x20000ae4

08006de8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006df0:	f000 f852 	bl	8006e98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006df4:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <prvIdleTask+0x28>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d9f9      	bls.n	8006df0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <prvIdleTask+0x2c>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e0c:	e7f0      	b.n	8006df0 <prvIdleTask+0x8>
 8006e0e:	bf00      	nop
 8006e10:	200009d4 	.word	0x200009d4
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e1e:	2300      	movs	r3, #0
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	e00c      	b.n	8006e3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4a12      	ldr	r2, [pc, #72]	@ (8006e78 <prvInitialiseTaskLists+0x60>)
 8006e30:	4413      	add	r3, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fcc2 	bl	80057bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b06      	cmp	r3, #6
 8006e42:	d9ef      	bls.n	8006e24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e44:	480d      	ldr	r0, [pc, #52]	@ (8006e7c <prvInitialiseTaskLists+0x64>)
 8006e46:	f7fe fcb9 	bl	80057bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e4a:	480d      	ldr	r0, [pc, #52]	@ (8006e80 <prvInitialiseTaskLists+0x68>)
 8006e4c:	f7fe fcb6 	bl	80057bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e50:	480c      	ldr	r0, [pc, #48]	@ (8006e84 <prvInitialiseTaskLists+0x6c>)
 8006e52:	f7fe fcb3 	bl	80057bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e56:	480c      	ldr	r0, [pc, #48]	@ (8006e88 <prvInitialiseTaskLists+0x70>)
 8006e58:	f7fe fcb0 	bl	80057bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e5c:	480b      	ldr	r0, [pc, #44]	@ (8006e8c <prvInitialiseTaskLists+0x74>)
 8006e5e:	f7fe fcad 	bl	80057bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e62:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <prvInitialiseTaskLists+0x78>)
 8006e64:	4a05      	ldr	r2, [pc, #20]	@ (8006e7c <prvInitialiseTaskLists+0x64>)
 8006e66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e68:	4b0a      	ldr	r3, [pc, #40]	@ (8006e94 <prvInitialiseTaskLists+0x7c>)
 8006e6a:	4a05      	ldr	r2, [pc, #20]	@ (8006e80 <prvInitialiseTaskLists+0x68>)
 8006e6c:	601a      	str	r2, [r3, #0]
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	200009d4 	.word	0x200009d4
 8006e7c:	20000a60 	.word	0x20000a60
 8006e80:	20000a74 	.word	0x20000a74
 8006e84:	20000a90 	.word	0x20000a90
 8006e88:	20000aa4 	.word	0x20000aa4
 8006e8c:	20000abc 	.word	0x20000abc
 8006e90:	20000a88 	.word	0x20000a88
 8006e94:	20000a8c 	.word	0x20000a8c

08006e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e9e:	e019      	b.n	8006ed4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ea0:	f000 fdfa 	bl	8007a98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea4:	4b10      	ldr	r3, [pc, #64]	@ (8006ee8 <prvCheckTasksWaitingTermination+0x50>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fd0d 	bl	80058d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <prvCheckTasksWaitingTermination+0x54>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8006eec <prvCheckTasksWaitingTermination+0x54>)
 8006ebe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef0 <prvCheckTasksWaitingTermination+0x58>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef0 <prvCheckTasksWaitingTermination+0x58>)
 8006ec8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eca:	f000 fe17 	bl	8007afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f810 	bl	8006ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed4:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <prvCheckTasksWaitingTermination+0x58>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e1      	bne.n	8006ea0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000aa4 	.word	0x20000aa4
 8006eec:	20000ad0 	.word	0x20000ad0
 8006ef0:	20000ab8 	.word	0x20000ab8

08006ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	334c      	adds	r3, #76	@ 0x4c
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 f8e1 	bl	80080c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d108      	bne.n	8006f22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 ffaf 	bl	8007e78 <vPortFree>
				vPortFree( pxTCB );
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 ffac 	bl	8007e78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f20:	e019      	b.n	8006f56 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d103      	bne.n	8006f34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 ffa3 	bl	8007e78 <vPortFree>
	}
 8006f32:	e010      	b.n	8006f56 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d00b      	beq.n	8006f56 <prvDeleteTCB+0x62>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <prvDeleteTCB+0x5e>
	}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f66:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <prvResetNextTaskUnblockTime+0x38>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f70:	4b0a      	ldr	r3, [pc, #40]	@ (8006f9c <prvResetNextTaskUnblockTime+0x3c>)
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f78:	e008      	b.n	8006f8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7a:	4b07      	ldr	r3, [pc, #28]	@ (8006f98 <prvResetNextTaskUnblockTime+0x38>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a04      	ldr	r2, [pc, #16]	@ (8006f9c <prvResetNextTaskUnblockTime+0x3c>)
 8006f8a:	6013      	str	r3, [r2, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	20000a88 	.word	0x20000a88
 8006f9c:	20000af0 	.word	0x20000af0

08006fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd4 <xTaskGetSchedulerState+0x34>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	e008      	b.n	8006fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb4:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <xTaskGetSchedulerState+0x38>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	e001      	b.n	8006fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fc6:	687b      	ldr	r3, [r7, #4]
	}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000adc 	.word	0x20000adc
 8006fd8:	20000af8 	.word	0x20000af8

08006fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d070      	beq.n	80070d4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80070e0 <xTaskPriorityDisinherit+0x104>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d00b      	beq.n	8007014 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60fb      	str	r3, [r7, #12]
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	60bb      	str	r3, [r7, #8]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007046:	429a      	cmp	r2, r3
 8007048:	d044      	beq.n	80070d4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704e:	2b00      	cmp	r3, #0
 8007050:	d140      	bne.n	80070d4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fc3a 	bl	80058d0 <uxListRemove>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d115      	bne.n	800708e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007066:	491f      	ldr	r1, [pc, #124]	@ (80070e4 <xTaskPriorityDisinherit+0x108>)
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xTaskPriorityDisinherit+0xb2>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	2201      	movs	r2, #1
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	43da      	mvns	r2, r3
 8007084:	4b18      	ldr	r3, [pc, #96]	@ (80070e8 <xTaskPriorityDisinherit+0x10c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4013      	ands	r3, r2
 800708a:	4a17      	ldr	r2, [pc, #92]	@ (80070e8 <xTaskPriorityDisinherit+0x10c>)
 800708c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	f1c3 0207 	rsb	r2, r3, #7
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a6:	2201      	movs	r2, #1
 80070a8:	409a      	lsls	r2, r3
 80070aa:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <xTaskPriorityDisinherit+0x10c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	4a0d      	ldr	r2, [pc, #52]	@ (80070e8 <xTaskPriorityDisinherit+0x10c>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4a08      	ldr	r2, [pc, #32]	@ (80070e4 <xTaskPriorityDisinherit+0x108>)
 80070c2:	441a      	add	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f7fe fba3 	bl	8005816 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070d4:	697b      	ldr	r3, [r7, #20]
	}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200009d0 	.word	0x200009d0
 80070e4:	200009d4 	.word	0x200009d4
 80070e8:	20000ad8 	.word	0x20000ad8

080070ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070f6:	4b29      	ldr	r3, [pc, #164]	@ (800719c <prvAddCurrentTaskToDelayedList+0xb0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070fc:	4b28      	ldr	r3, [pc, #160]	@ (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fbe4 	bl	80058d0 <uxListRemove>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800710e:	4b24      	ldr	r3, [pc, #144]	@ (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007114:	2201      	movs	r2, #1
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43da      	mvns	r2, r3
 800711c:	4b21      	ldr	r3, [pc, #132]	@ (80071a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4013      	ands	r3, r2
 8007122:	4a20      	ldr	r2, [pc, #128]	@ (80071a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007124:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712c:	d10a      	bne.n	8007144 <prvAddCurrentTaskToDelayedList+0x58>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007134:	4b1a      	ldr	r3, [pc, #104]	@ (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	481a      	ldr	r0, [pc, #104]	@ (80071a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800713e:	f7fe fb6a 	bl	8005816 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007142:	e026      	b.n	8007192 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800714c:	4b14      	ldr	r3, [pc, #80]	@ (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	429a      	cmp	r2, r3
 800715a:	d209      	bcs.n	8007170 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800715c:	4b13      	ldr	r3, [pc, #76]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b0f      	ldr	r3, [pc, #60]	@ (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3304      	adds	r3, #4
 8007166:	4619      	mov	r1, r3
 8007168:	4610      	mov	r0, r2
 800716a:	f7fe fb78 	bl	800585e <vListInsert>
}
 800716e:	e010      	b.n	8007192 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007170:	4b0f      	ldr	r3, [pc, #60]	@ (80071b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b0a      	ldr	r3, [pc, #40]	@ (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3304      	adds	r3, #4
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7fe fb6e 	bl	800585e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007182:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d202      	bcs.n	8007192 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800718c:	4a09      	ldr	r2, [pc, #36]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6013      	str	r3, [r2, #0]
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000ad4 	.word	0x20000ad4
 80071a0:	200009d0 	.word	0x200009d0
 80071a4:	20000ad8 	.word	0x20000ad8
 80071a8:	20000abc 	.word	0x20000abc
 80071ac:	20000a8c 	.word	0x20000a8c
 80071b0:	20000a88 	.word	0x20000a88
 80071b4:	20000af0 	.word	0x20000af0

080071b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	@ 0x28
 80071bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071c2:	f000 faf7 	bl	80077b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071c6:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <xTimerCreateTimerTask+0x84>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d021      	beq.n	8007212 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071d6:	1d3a      	adds	r2, r7, #4
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7f9 f9ad 	bl	8000540 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	9202      	str	r2, [sp, #8]
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	2302      	movs	r3, #2
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	460a      	mov	r2, r1
 80071f8:	4911      	ldr	r1, [pc, #68]	@ (8007240 <xTimerCreateTimerTask+0x88>)
 80071fa:	4812      	ldr	r0, [pc, #72]	@ (8007244 <xTimerCreateTimerTask+0x8c>)
 80071fc:	f7ff f888 	bl	8006310 <xTaskCreateStatic>
 8007200:	4603      	mov	r3, r0
 8007202:	4a11      	ldr	r2, [pc, #68]	@ (8007248 <xTimerCreateTimerTask+0x90>)
 8007204:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007206:	4b10      	ldr	r3, [pc, #64]	@ (8007248 <xTimerCreateTimerTask+0x90>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	613b      	str	r3, [r7, #16]
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007230:	697b      	ldr	r3, [r7, #20]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000b2c 	.word	0x20000b2c
 8007240:	080082f4 	.word	0x080082f4
 8007244:	08007385 	.word	0x08007385
 8007248:	20000b30 	.word	0x20000b30

0800724c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	@ 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <xTimerGenericCommand+0x30>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	623b      	str	r3, [r7, #32]
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800727c:	4b19      	ldr	r3, [pc, #100]	@ (80072e4 <xTimerGenericCommand+0x98>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02a      	beq.n	80072da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b05      	cmp	r3, #5
 8007294:	dc18      	bgt.n	80072c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007296:	f7ff fe83 	bl	8006fa0 <xTaskGetSchedulerState>
 800729a:	4603      	mov	r3, r0
 800729c:	2b02      	cmp	r3, #2
 800729e:	d109      	bne.n	80072b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072a0:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <xTimerGenericCommand+0x98>)
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	f107 0114 	add.w	r1, r7, #20
 80072a8:	2300      	movs	r3, #0
 80072aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ac:	f7fe fc40 	bl	8005b30 <xQueueGenericSend>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80072b2:	e012      	b.n	80072da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072b4:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <xTimerGenericCommand+0x98>)
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	f107 0114 	add.w	r1, r7, #20
 80072bc:	2300      	movs	r3, #0
 80072be:	2200      	movs	r2, #0
 80072c0:	f7fe fc36 	bl	8005b30 <xQueueGenericSend>
 80072c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80072c6:	e008      	b.n	80072da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <xTimerGenericCommand+0x98>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	f107 0114 	add.w	r1, r7, #20
 80072d0:	2300      	movs	r3, #0
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	f7fe fd2e 	bl	8005d34 <xQueueGenericSendFromISR>
 80072d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3728      	adds	r7, #40	@ 0x28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000b2c 	.word	0x20000b2c

080072e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f2:	4b23      	ldr	r3, [pc, #140]	@ (8007380 <prvProcessExpiredTimer+0x98>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	3304      	adds	r3, #4
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fae5 	bl	80058d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d023      	beq.n	800735c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	18d1      	adds	r1, r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	6978      	ldr	r0, [r7, #20]
 8007322:	f000 f8d5 	bl	80074d0 <prvInsertTimerInActiveList>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d020      	beq.n	800736e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800732c:	2300      	movs	r3, #0
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2300      	movs	r3, #0
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	2100      	movs	r1, #0
 8007336:	6978      	ldr	r0, [r7, #20]
 8007338:	f7ff ff88 	bl	800724c <xTimerGenericCommand>
 800733c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d114      	bne.n	800736e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	e7fd      	b.n	8007358 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	b2da      	uxtb	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	6978      	ldr	r0, [r7, #20]
 8007374:	4798      	blx	r3
}
 8007376:	bf00      	nop
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000b24 	.word	0x20000b24

08007384 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800738c:	f107 0308 	add.w	r3, r7, #8
 8007390:	4618      	mov	r0, r3
 8007392:	f000 f859 	bl	8007448 <prvGetNextExpireTime>
 8007396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4619      	mov	r1, r3
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f805 	bl	80073ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073a2:	f000 f8d7 	bl	8007554 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073a6:	bf00      	nop
 80073a8:	e7f0      	b.n	800738c <prvTimerTask+0x8>
	...

080073ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073b6:	f7ff fa01 	bl	80067bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f866 	bl	8007490 <prvSampleTimeNow>
 80073c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d130      	bne.n	800742e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <prvProcessTimerOrBlockTask+0x3c>
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d806      	bhi.n	80073e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073da:	f7ff f9fd 	bl	80067d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff ff81 	bl	80072e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073e6:	e024      	b.n	8007432 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073ee:	4b13      	ldr	r3, [pc, #76]	@ (800743c <prvProcessTimerOrBlockTask+0x90>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <prvProcessTimerOrBlockTask+0x50>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <prvProcessTimerOrBlockTask+0x52>
 80073fc:	2300      	movs	r3, #0
 80073fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007400:	4b0f      	ldr	r3, [pc, #60]	@ (8007440 <prvProcessTimerOrBlockTask+0x94>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	f7fe ff4b 	bl	80062a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007412:	f7ff f9e1 	bl	80067d8 <xTaskResumeAll>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800741c:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <prvProcessTimerOrBlockTask+0x98>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
}
 800742c:	e001      	b.n	8007432 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800742e:	f7ff f9d3 	bl	80067d8 <xTaskResumeAll>
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000b28 	.word	0x20000b28
 8007440:	20000b2c 	.word	0x20000b2c
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007450:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <prvGetNextExpireTime+0x44>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <prvGetNextExpireTime+0x16>
 800745a:	2201      	movs	r2, #1
 800745c:	e000      	b.n	8007460 <prvGetNextExpireTime+0x18>
 800745e:	2200      	movs	r2, #0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800746c:	4b07      	ldr	r3, [pc, #28]	@ (800748c <prvGetNextExpireTime+0x44>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e001      	b.n	800747c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	20000b24 	.word	0x20000b24

08007490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007498:	f7ff fa3c 	bl	8006914 <xTaskGetTickCount>
 800749c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800749e:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <prvSampleTimeNow+0x3c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d205      	bcs.n	80074b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80074a8:	f000 f91e 	bl	80076e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e002      	b.n	80074ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074ba:	4a04      	ldr	r2, [pc, #16]	@ (80074cc <prvSampleTimeNow+0x3c>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074c0:	68fb      	ldr	r3, [r7, #12]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000b34 	.word	0x20000b34

080074d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d812      	bhi.n	800751c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	429a      	cmp	r2, r3
 8007502:	d302      	bcc.n	800750a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007504:	2301      	movs	r3, #1
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	e01b      	b.n	8007542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800750a:	4b10      	ldr	r3, [pc, #64]	@ (800754c <prvInsertTimerInActiveList+0x7c>)
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7fe f9a2 	bl	800585e <vListInsert>
 800751a:	e012      	b.n	8007542 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d206      	bcs.n	8007532 <prvInsertTimerInActiveList+0x62>
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d302      	bcc.n	8007532 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800752c:	2301      	movs	r3, #1
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e007      	b.n	8007542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007532:	4b07      	ldr	r3, [pc, #28]	@ (8007550 <prvInsertTimerInActiveList+0x80>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3304      	adds	r3, #4
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f7fe f98e 	bl	800585e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007542:	697b      	ldr	r3, [r7, #20]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000b28 	.word	0x20000b28
 8007550:	20000b24 	.word	0x20000b24

08007554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08c      	sub	sp, #48	@ 0x30
 8007558:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800755a:	e0b2      	b.n	80076c2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f2c0 80af 	blt.w	80076c2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	3304      	adds	r3, #4
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe f9ab 	bl	80058d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff ff87 	bl	8007490 <prvSampleTimeNow>
 8007582:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b09      	cmp	r3, #9
 8007588:	f200 8098 	bhi.w	80076bc <prvProcessReceivedCommands+0x168>
 800758c:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <prvProcessReceivedCommands+0x40>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075bd 	.word	0x080075bd
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075bd 	.word	0x080075bd
 80075a0:	08007633 	.word	0x08007633
 80075a4:	08007647 	.word	0x08007647
 80075a8:	08007693 	.word	0x08007693
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075bd 	.word	0x080075bd
 80075b4:	08007633 	.word	0x08007633
 80075b8:	08007647 	.word	0x08007647
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075c2:	f043 0301 	orr.w	r3, r3, #1
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	18d1      	adds	r1, r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075dc:	f7ff ff78 	bl	80074d0 <prvInsertTimerInActiveList>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d06c      	beq.n	80076c0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d061      	beq.n	80076c0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	441a      	add	r2, r3
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	2300      	movs	r3, #0
 800760a:	2100      	movs	r1, #0
 800760c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800760e:	f7ff fe1d 	bl	800724c <xTimerGenericCommand>
 8007612:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d152      	bne.n	80076c0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	61bb      	str	r3, [r7, #24]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007644:	e03d      	b.n	80076c2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	617b      	str	r3, [r7, #20]
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	e7fd      	b.n	800767a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	18d1      	adds	r1, r2, r3
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	6a3a      	ldr	r2, [r7, #32]
 800768a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800768c:	f7ff ff20 	bl	80074d0 <prvInsertTimerInActiveList>
					break;
 8007690:	e017      	b.n	80076c2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d103      	bne.n	80076a8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 80076a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076a2:	f000 fbe9 	bl	8007e78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076a6:	e00c      	b.n	80076c2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80076ba:	e002      	b.n	80076c2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <prvProcessReceivedCommands+0x16e>
					break;
 80076c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076c2:	4b08      	ldr	r3, [pc, #32]	@ (80076e4 <prvProcessReceivedCommands+0x190>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f107 0108 	add.w	r1, r7, #8
 80076ca:	2200      	movs	r2, #0
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe fbcf 	bl	8005e70 <xQueueReceive>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f47f af41 	bne.w	800755c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	3728      	adds	r7, #40	@ 0x28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000b2c 	.word	0x20000b2c

080076e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ee:	e049      	b.n	8007784 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076f0:	4b2e      	ldr	r3, [pc, #184]	@ (80077ac <prvSwitchTimerLists+0xc4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fa:	4b2c      	ldr	r3, [pc, #176]	@ (80077ac <prvSwitchTimerLists+0xc4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe f8e1 	bl	80058d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d02f      	beq.n	8007784 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	429a      	cmp	r2, r3
 8007734:	d90e      	bls.n	8007754 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007742:	4b1a      	ldr	r3, [pc, #104]	@ (80077ac <prvSwitchTimerLists+0xc4>)
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3304      	adds	r3, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f7fe f886 	bl	800585e <vListInsert>
 8007752:	e017      	b.n	8007784 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007754:	2300      	movs	r3, #0
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	2100      	movs	r1, #0
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff fd74 	bl	800724c <xTimerGenericCommand>
 8007764:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	603b      	str	r3, [r7, #0]
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007784:	4b09      	ldr	r3, [pc, #36]	@ (80077ac <prvSwitchTimerLists+0xc4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1b0      	bne.n	80076f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800778e:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <prvSwitchTimerLists+0xc4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007794:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <prvSwitchTimerLists+0xc8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a04      	ldr	r2, [pc, #16]	@ (80077ac <prvSwitchTimerLists+0xc4>)
 800779a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800779c:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <prvSwitchTimerLists+0xc8>)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	6013      	str	r3, [r2, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000b24 	.word	0x20000b24
 80077b0:	20000b28 	.word	0x20000b28

080077b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077ba:	f000 f96d 	bl	8007a98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077be:	4b15      	ldr	r3, [pc, #84]	@ (8007814 <prvCheckForValidListAndQueue+0x60>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d120      	bne.n	8007808 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077c6:	4814      	ldr	r0, [pc, #80]	@ (8007818 <prvCheckForValidListAndQueue+0x64>)
 80077c8:	f7fd fff8 	bl	80057bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077cc:	4813      	ldr	r0, [pc, #76]	@ (800781c <prvCheckForValidListAndQueue+0x68>)
 80077ce:	f7fd fff5 	bl	80057bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077d2:	4b13      	ldr	r3, [pc, #76]	@ (8007820 <prvCheckForValidListAndQueue+0x6c>)
 80077d4:	4a10      	ldr	r2, [pc, #64]	@ (8007818 <prvCheckForValidListAndQueue+0x64>)
 80077d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077d8:	4b12      	ldr	r3, [pc, #72]	@ (8007824 <prvCheckForValidListAndQueue+0x70>)
 80077da:	4a10      	ldr	r2, [pc, #64]	@ (800781c <prvCheckForValidListAndQueue+0x68>)
 80077dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077de:	2300      	movs	r3, #0
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <prvCheckForValidListAndQueue+0x74>)
 80077e4:	4a11      	ldr	r2, [pc, #68]	@ (800782c <prvCheckForValidListAndQueue+0x78>)
 80077e6:	210c      	movs	r1, #12
 80077e8:	200a      	movs	r0, #10
 80077ea:	f7fe f905 	bl	80059f8 <xQueueGenericCreateStatic>
 80077ee:	4603      	mov	r3, r0
 80077f0:	4a08      	ldr	r2, [pc, #32]	@ (8007814 <prvCheckForValidListAndQueue+0x60>)
 80077f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077f4:	4b07      	ldr	r3, [pc, #28]	@ (8007814 <prvCheckForValidListAndQueue+0x60>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <prvCheckForValidListAndQueue+0x60>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	490b      	ldr	r1, [pc, #44]	@ (8007830 <prvCheckForValidListAndQueue+0x7c>)
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fd26 	bl	8006254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007808:	f000 f978 	bl	8007afc <vPortExitCritical>
}
 800780c:	bf00      	nop
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000b2c 	.word	0x20000b2c
 8007818:	20000afc 	.word	0x20000afc
 800781c:	20000b10 	.word	0x20000b10
 8007820:	20000b24 	.word	0x20000b24
 8007824:	20000b28 	.word	0x20000b28
 8007828:	20000bb0 	.word	0x20000bb0
 800782c:	20000b38 	.word	0x20000b38
 8007830:	080082fc 	.word	0x080082fc

08007834 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3b04      	subs	r3, #4
 8007844:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800784c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3b04      	subs	r3, #4
 8007852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f023 0201 	bic.w	r2, r3, #1
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b04      	subs	r3, #4
 8007862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007864:	4a0c      	ldr	r2, [pc, #48]	@ (8007898 <pxPortInitialiseStack+0x64>)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3b14      	subs	r3, #20
 800786e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b04      	subs	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f06f 0202 	mvn.w	r2, #2
 8007882:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b20      	subs	r3, #32
 8007888:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800788a:	68fb      	ldr	r3, [r7, #12]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	0800789d 	.word	0x0800789d

0800789c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078a6:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <prvTaskExitError+0x58>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ae:	d00b      	beq.n	80078c8 <prvTaskExitError+0x2c>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	60fb      	str	r3, [r7, #12]
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <prvTaskExitError+0x28>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60bb      	str	r3, [r7, #8]
}
 80078da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078dc:	bf00      	nop
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0fc      	beq.n	80078de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	2000000c 	.word	0x2000000c
	...

08007900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007900:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <pxCurrentTCBConst2>)
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	6808      	ldr	r0, [r1, #0]
 8007906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	f380 8809 	msr	PSP, r0
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8811 	msr	BASEPRI, r0
 800791a:	4770      	bx	lr
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst2>:
 8007920:	200009d0 	.word	0x200009d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007928:	4808      	ldr	r0, [pc, #32]	@ (800794c <prvPortStartFirstTask+0x24>)
 800792a:	6800      	ldr	r0, [r0, #0]
 800792c:	6800      	ldr	r0, [r0, #0]
 800792e:	f380 8808 	msr	MSP, r0
 8007932:	f04f 0000 	mov.w	r0, #0
 8007936:	f380 8814 	msr	CONTROL, r0
 800793a:	b662      	cpsie	i
 800793c:	b661      	cpsie	f
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	df00      	svc	0
 8007948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800794a:	bf00      	nop
 800794c:	e000ed08 	.word	0xe000ed08

08007950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007956:	4b47      	ldr	r3, [pc, #284]	@ (8007a74 <xPortStartScheduler+0x124>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a47      	ldr	r2, [pc, #284]	@ (8007a78 <xPortStartScheduler+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d10b      	bne.n	8007978 <xPortStartScheduler+0x28>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	e7fd      	b.n	8007974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007978:	4b3e      	ldr	r3, [pc, #248]	@ (8007a74 <xPortStartScheduler+0x124>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a7c <xPortStartScheduler+0x12c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d10b      	bne.n	800799a <xPortStartScheduler+0x4a>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	613b      	str	r3, [r7, #16]
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	e7fd      	b.n	8007996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800799a:	4b39      	ldr	r3, [pc, #228]	@ (8007a80 <xPortStartScheduler+0x130>)
 800799c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	22ff      	movs	r2, #255	@ 0xff
 80079aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	4b31      	ldr	r3, [pc, #196]	@ (8007a84 <xPortStartScheduler+0x134>)
 80079c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079c2:	4b31      	ldr	r3, [pc, #196]	@ (8007a88 <xPortStartScheduler+0x138>)
 80079c4:	2207      	movs	r2, #7
 80079c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079c8:	e009      	b.n	80079de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80079ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007a88 <xPortStartScheduler+0x138>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a88 <xPortStartScheduler+0x138>)
 80079d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e6:	2b80      	cmp	r3, #128	@ 0x80
 80079e8:	d0ef      	beq.n	80079ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079ea:	4b27      	ldr	r3, [pc, #156]	@ (8007a88 <xPortStartScheduler+0x138>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f1c3 0307 	rsb	r3, r3, #7
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d00b      	beq.n	8007a0e <xPortStartScheduler+0xbe>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60bb      	str	r3, [r7, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	e7fd      	b.n	8007a0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a88 <xPortStartScheduler+0x138>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	4a1c      	ldr	r2, [pc, #112]	@ (8007a88 <xPortStartScheduler+0x138>)
 8007a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a18:	4b1b      	ldr	r3, [pc, #108]	@ (8007a88 <xPortStartScheduler+0x138>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a20:	4a19      	ldr	r2, [pc, #100]	@ (8007a88 <xPortStartScheduler+0x138>)
 8007a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a2c:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <xPortStartScheduler+0x13c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a16      	ldr	r2, [pc, #88]	@ (8007a8c <xPortStartScheduler+0x13c>)
 8007a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a38:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <xPortStartScheduler+0x13c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a13      	ldr	r2, [pc, #76]	@ (8007a8c <xPortStartScheduler+0x13c>)
 8007a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a44:	f000 f8da 	bl	8007bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a48:	4b11      	ldr	r3, [pc, #68]	@ (8007a90 <xPortStartScheduler+0x140>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a4e:	f000 f8f9 	bl	8007c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <xPortStartScheduler+0x144>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0f      	ldr	r2, [pc, #60]	@ (8007a94 <xPortStartScheduler+0x144>)
 8007a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a5e:	f7ff ff63 	bl	8007928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a62:	f7ff f821 	bl	8006aa8 <vTaskSwitchContext>
	prvTaskExitError();
 8007a66:	f7ff ff19 	bl	800789c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	e000ed00 	.word	0xe000ed00
 8007a78:	410fc271 	.word	0x410fc271
 8007a7c:	410fc270 	.word	0x410fc270
 8007a80:	e000e400 	.word	0xe000e400
 8007a84:	20000bf8 	.word	0x20000bf8
 8007a88:	20000bfc 	.word	0x20000bfc
 8007a8c:	e000ed20 	.word	0xe000ed20
 8007a90:	2000000c 	.word	0x2000000c
 8007a94:	e000ef34 	.word	0xe000ef34

08007a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ab2:	4b10      	ldr	r3, [pc, #64]	@ (8007af4 <vPortEnterCritical+0x5c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8007af4 <vPortEnterCritical+0x5c>)
 8007aba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007abc:	4b0d      	ldr	r3, [pc, #52]	@ (8007af4 <vPortEnterCritical+0x5c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d110      	bne.n	8007ae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8007af8 <vPortEnterCritical+0x60>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	603b      	str	r3, [r7, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	e7fd      	b.n	8007ae2 <vPortEnterCritical+0x4a>
	}
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	2000000c 	.word	0x2000000c
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b02:	4b12      	ldr	r3, [pc, #72]	@ (8007b4c <vPortExitCritical+0x50>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10b      	bne.n	8007b22 <vPortExitCritical+0x26>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	607b      	str	r3, [r7, #4]
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	e7fd      	b.n	8007b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b22:	4b0a      	ldr	r3, [pc, #40]	@ (8007b4c <vPortExitCritical+0x50>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	4a08      	ldr	r2, [pc, #32]	@ (8007b4c <vPortExitCritical+0x50>)
 8007b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b2c:	4b07      	ldr	r3, [pc, #28]	@ (8007b4c <vPortExitCritical+0x50>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d105      	bne.n	8007b40 <vPortExitCritical+0x44>
 8007b34:	2300      	movs	r3, #0
 8007b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f383 8811 	msr	BASEPRI, r3
}
 8007b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	2000000c 	.word	0x2000000c

08007b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b50:	f3ef 8009 	mrs	r0, PSP
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	4b15      	ldr	r3, [pc, #84]	@ (8007bb0 <pxCurrentTCBConst>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	f01e 0f10 	tst.w	lr, #16
 8007b60:	bf08      	it	eq
 8007b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	6010      	str	r0, [r2, #0]
 8007b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b74:	f380 8811 	msr	BASEPRI, r0
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f7fe ff92 	bl	8006aa8 <vTaskSwitchContext>
 8007b84:	f04f 0000 	mov.w	r0, #0
 8007b88:	f380 8811 	msr	BASEPRI, r0
 8007b8c:	bc09      	pop	{r0, r3}
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	6808      	ldr	r0, [r1, #0]
 8007b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b96:	f01e 0f10 	tst.w	lr, #16
 8007b9a:	bf08      	it	eq
 8007b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ba0:	f380 8809 	msr	PSP, r0
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	f3af 8000 	nop.w

08007bb0 <pxCurrentTCBConst>:
 8007bb0:	200009d0 	.word	0x200009d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop

08007bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	607b      	str	r3, [r7, #4]
}
 8007bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bd2:	f7fe feaf 	bl	8006934 <xTaskIncrementTick>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bdc:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <SysTick_Handler+0x40>)
 8007bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	2300      	movs	r3, #0
 8007be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f383 8811 	msr	BASEPRI, r3
}
 8007bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c00:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <vPortSetupTimerInterrupt+0x34>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c06:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <vPortSetupTimerInterrupt+0x38>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <vPortSetupTimerInterrupt+0x3c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a0a      	ldr	r2, [pc, #40]	@ (8007c3c <vPortSetupTimerInterrupt+0x40>)
 8007c12:	fba2 2303 	umull	r2, r3, r2, r3
 8007c16:	099b      	lsrs	r3, r3, #6
 8007c18:	4a09      	ldr	r2, [pc, #36]	@ (8007c40 <vPortSetupTimerInterrupt+0x44>)
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c1e:	4b04      	ldr	r3, [pc, #16]	@ (8007c30 <vPortSetupTimerInterrupt+0x34>)
 8007c20:	2207      	movs	r2, #7
 8007c22:	601a      	str	r2, [r3, #0]
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	e000e010 	.word	0xe000e010
 8007c34:	e000e018 	.word	0xe000e018
 8007c38:	20000000 	.word	0x20000000
 8007c3c:	10624dd3 	.word	0x10624dd3
 8007c40:	e000e014 	.word	0xe000e014

08007c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c54 <vPortEnableVFP+0x10>
 8007c48:	6801      	ldr	r1, [r0, #0]
 8007c4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c4e:	6001      	str	r1, [r0, #0]
 8007c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c52:	bf00      	nop
 8007c54:	e000ed88 	.word	0xe000ed88

08007c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c5e:	f3ef 8305 	mrs	r3, IPSR
 8007c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d915      	bls.n	8007c96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c6a:	4a18      	ldr	r2, [pc, #96]	@ (8007ccc <vPortValidateInterruptPriority+0x74>)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c74:	4b16      	ldr	r3, [pc, #88]	@ (8007cd0 <vPortValidateInterruptPriority+0x78>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	7afa      	ldrb	r2, [r7, #11]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d20b      	bcs.n	8007c96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c96:	4b0f      	ldr	r3, [pc, #60]	@ (8007cd4 <vPortValidateInterruptPriority+0x7c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd8 <vPortValidateInterruptPriority+0x80>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d90b      	bls.n	8007cbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	603b      	str	r3, [r7, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <vPortValidateInterruptPriority+0x62>
	}
 8007cbe:	bf00      	nop
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	e000e3f0 	.word	0xe000e3f0
 8007cd0:	20000bf8 	.word	0x20000bf8
 8007cd4:	e000ed0c 	.word	0xe000ed0c
 8007cd8:	20000bfc 	.word	0x20000bfc

08007cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08a      	sub	sp, #40	@ 0x28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ce8:	f7fe fd68 	bl	80067bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cec:	4b5c      	ldr	r3, [pc, #368]	@ (8007e60 <pvPortMalloc+0x184>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cf4:	f000 f924 	bl	8007f40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e64 <pvPortMalloc+0x188>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 8095 	bne.w	8007e30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01e      	beq.n	8007d4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d0c:	2208      	movs	r2, #8
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4413      	add	r3, r2
 8007d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d015      	beq.n	8007d4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f023 0307 	bic.w	r3, r3, #7
 8007d24:	3308      	adds	r3, #8
 8007d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00b      	beq.n	8007d4a <pvPortMalloc+0x6e>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	617b      	str	r3, [r7, #20]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d06f      	beq.n	8007e30 <pvPortMalloc+0x154>
 8007d50:	4b45      	ldr	r3, [pc, #276]	@ (8007e68 <pvPortMalloc+0x18c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d86a      	bhi.n	8007e30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d5a:	4b44      	ldr	r3, [pc, #272]	@ (8007e6c <pvPortMalloc+0x190>)
 8007d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d5e:	4b43      	ldr	r3, [pc, #268]	@ (8007e6c <pvPortMalloc+0x190>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d64:	e004      	b.n	8007d70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d903      	bls.n	8007d82 <pvPortMalloc+0xa6>
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f1      	bne.n	8007d66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d82:	4b37      	ldr	r3, [pc, #220]	@ (8007e60 <pvPortMalloc+0x184>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d051      	beq.n	8007e30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2208      	movs	r2, #8
 8007d92:	4413      	add	r3, r2
 8007d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	1ad2      	subs	r2, r2, r3
 8007da6:	2308      	movs	r3, #8
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d920      	bls.n	8007df0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <pvPortMalloc+0xfc>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	613b      	str	r3, [r7, #16]
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dea:	69b8      	ldr	r0, [r7, #24]
 8007dec:	f000 f90a 	bl	8008004 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007df0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e68 <pvPortMalloc+0x18c>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8007e68 <pvPortMalloc+0x18c>)
 8007dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8007e68 <pvPortMalloc+0x18c>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b1b      	ldr	r3, [pc, #108]	@ (8007e70 <pvPortMalloc+0x194>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d203      	bcs.n	8007e12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e0a:	4b17      	ldr	r3, [pc, #92]	@ (8007e68 <pvPortMalloc+0x18c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a18      	ldr	r2, [pc, #96]	@ (8007e70 <pvPortMalloc+0x194>)
 8007e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <pvPortMalloc+0x188>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e26:	4b13      	ldr	r3, [pc, #76]	@ (8007e74 <pvPortMalloc+0x198>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	4a11      	ldr	r2, [pc, #68]	@ (8007e74 <pvPortMalloc+0x198>)
 8007e2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e30:	f7fe fcd2 	bl	80067d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00b      	beq.n	8007e56 <pvPortMalloc+0x17a>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	60fb      	str	r3, [r7, #12]
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	e7fd      	b.n	8007e52 <pvPortMalloc+0x176>
	return pvReturn;
 8007e56:	69fb      	ldr	r3, [r7, #28]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3728      	adds	r7, #40	@ 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20002c08 	.word	0x20002c08
 8007e64:	20002c1c 	.word	0x20002c1c
 8007e68:	20002c0c 	.word	0x20002c0c
 8007e6c:	20002c00 	.word	0x20002c00
 8007e70:	20002c10 	.word	0x20002c10
 8007e74:	20002c14 	.word	0x20002c14

08007e78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d04f      	beq.n	8007f2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	425b      	negs	r3, r3
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4413      	add	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	4b25      	ldr	r3, [pc, #148]	@ (8007f34 <vPortFree+0xbc>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10b      	bne.n	8007ebe <vPortFree+0x46>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	60fb      	str	r3, [r7, #12]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <vPortFree+0x66>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	60bb      	str	r3, [r7, #8]
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	e7fd      	b.n	8007eda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	4b14      	ldr	r3, [pc, #80]	@ (8007f34 <vPortFree+0xbc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01e      	beq.n	8007f2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11a      	bne.n	8007f2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f34 <vPortFree+0xbc>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	43db      	mvns	r3, r3
 8007efe:	401a      	ands	r2, r3
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f04:	f7fe fc5a 	bl	80067bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <vPortFree+0xc0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4413      	add	r3, r2
 8007f12:	4a09      	ldr	r2, [pc, #36]	@ (8007f38 <vPortFree+0xc0>)
 8007f14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f16:	6938      	ldr	r0, [r7, #16]
 8007f18:	f000 f874 	bl	8008004 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f1c:	4b07      	ldr	r3, [pc, #28]	@ (8007f3c <vPortFree+0xc4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	4a06      	ldr	r2, [pc, #24]	@ (8007f3c <vPortFree+0xc4>)
 8007f24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f26:	f7fe fc57 	bl	80067d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f2a:	bf00      	nop
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20002c1c 	.word	0x20002c1c
 8007f38:	20002c0c 	.word	0x20002c0c
 8007f3c:	20002c18 	.word	0x20002c18

08007f40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007f4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f4c:	4b27      	ldr	r3, [pc, #156]	@ (8007fec <prvHeapInit+0xac>)
 8007f4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3307      	adds	r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fec <prvHeapInit+0xac>)
 8007f70:	4413      	add	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f78:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff0 <prvHeapInit+0xb0>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ff0 <prvHeapInit+0xb0>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	4413      	add	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0307 	bic.w	r3, r3, #7
 8007f9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4a15      	ldr	r2, [pc, #84]	@ (8007ff4 <prvHeapInit+0xb4>)
 8007fa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fa2:	4b14      	ldr	r3, [pc, #80]	@ (8007ff4 <prvHeapInit+0xb4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007faa:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <prvHeapInit+0xb4>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff4 <prvHeapInit+0xb4>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff8 <prvHeapInit+0xb8>)
 8007fce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	4a09      	ldr	r2, [pc, #36]	@ (8007ffc <prvHeapInit+0xbc>)
 8007fd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fd8:	4b09      	ldr	r3, [pc, #36]	@ (8008000 <prvHeapInit+0xc0>)
 8007fda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007fde:	601a      	str	r2, [r3, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20000c00 	.word	0x20000c00
 8007ff0:	20002c00 	.word	0x20002c00
 8007ff4:	20002c08 	.word	0x20002c08
 8007ff8:	20002c10 	.word	0x20002c10
 8007ffc:	20002c0c 	.word	0x20002c0c
 8008000:	20002c1c 	.word	0x20002c1c

08008004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800800c:	4b28      	ldr	r3, [pc, #160]	@ (80080b0 <prvInsertBlockIntoFreeList+0xac>)
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e002      	b.n	8008018 <prvInsertBlockIntoFreeList+0x14>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d8f7      	bhi.n	8008012 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d108      	bne.n	8008046 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	441a      	add	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	441a      	add	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d118      	bne.n	800808c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	4b15      	ldr	r3, [pc, #84]	@ (80080b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d00d      	beq.n	8008082 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	441a      	add	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	e008      	b.n	8008094 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e003      	b.n	8008094 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	429a      	cmp	r2, r3
 800809a:	d002      	beq.n	80080a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080a2:	bf00      	nop
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20002c00 	.word	0x20002c00
 80080b4:	20002c08 	.word	0x20002c08

080080b8 <memset>:
 80080b8:	4402      	add	r2, r0
 80080ba:	4603      	mov	r3, r0
 80080bc:	4293      	cmp	r3, r2
 80080be:	d100      	bne.n	80080c2 <memset+0xa>
 80080c0:	4770      	bx	lr
 80080c2:	f803 1b01 	strb.w	r1, [r3], #1
 80080c6:	e7f9      	b.n	80080bc <memset+0x4>

080080c8 <_reclaim_reent>:
 80080c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008180 <_reclaim_reent+0xb8>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4283      	cmp	r3, r0
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	4604      	mov	r4, r0
 80080d2:	d053      	beq.n	800817c <_reclaim_reent+0xb4>
 80080d4:	69c3      	ldr	r3, [r0, #28]
 80080d6:	b31b      	cbz	r3, 8008120 <_reclaim_reent+0x58>
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	b163      	cbz	r3, 80080f6 <_reclaim_reent+0x2e>
 80080dc:	2500      	movs	r5, #0
 80080de:	69e3      	ldr	r3, [r4, #28]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	5959      	ldr	r1, [r3, r5]
 80080e4:	b9b1      	cbnz	r1, 8008114 <_reclaim_reent+0x4c>
 80080e6:	3504      	adds	r5, #4
 80080e8:	2d80      	cmp	r5, #128	@ 0x80
 80080ea:	d1f8      	bne.n	80080de <_reclaim_reent+0x16>
 80080ec:	69e3      	ldr	r3, [r4, #28]
 80080ee:	4620      	mov	r0, r4
 80080f0:	68d9      	ldr	r1, [r3, #12]
 80080f2:	f000 f87b 	bl	80081ec <_free_r>
 80080f6:	69e3      	ldr	r3, [r4, #28]
 80080f8:	6819      	ldr	r1, [r3, #0]
 80080fa:	b111      	cbz	r1, 8008102 <_reclaim_reent+0x3a>
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 f875 	bl	80081ec <_free_r>
 8008102:	69e3      	ldr	r3, [r4, #28]
 8008104:	689d      	ldr	r5, [r3, #8]
 8008106:	b15d      	cbz	r5, 8008120 <_reclaim_reent+0x58>
 8008108:	4629      	mov	r1, r5
 800810a:	4620      	mov	r0, r4
 800810c:	682d      	ldr	r5, [r5, #0]
 800810e:	f000 f86d 	bl	80081ec <_free_r>
 8008112:	e7f8      	b.n	8008106 <_reclaim_reent+0x3e>
 8008114:	680e      	ldr	r6, [r1, #0]
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f868 	bl	80081ec <_free_r>
 800811c:	4631      	mov	r1, r6
 800811e:	e7e1      	b.n	80080e4 <_reclaim_reent+0x1c>
 8008120:	6961      	ldr	r1, [r4, #20]
 8008122:	b111      	cbz	r1, 800812a <_reclaim_reent+0x62>
 8008124:	4620      	mov	r0, r4
 8008126:	f000 f861 	bl	80081ec <_free_r>
 800812a:	69e1      	ldr	r1, [r4, #28]
 800812c:	b111      	cbz	r1, 8008134 <_reclaim_reent+0x6c>
 800812e:	4620      	mov	r0, r4
 8008130:	f000 f85c 	bl	80081ec <_free_r>
 8008134:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008136:	b111      	cbz	r1, 800813e <_reclaim_reent+0x76>
 8008138:	4620      	mov	r0, r4
 800813a:	f000 f857 	bl	80081ec <_free_r>
 800813e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008140:	b111      	cbz	r1, 8008148 <_reclaim_reent+0x80>
 8008142:	4620      	mov	r0, r4
 8008144:	f000 f852 	bl	80081ec <_free_r>
 8008148:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800814a:	b111      	cbz	r1, 8008152 <_reclaim_reent+0x8a>
 800814c:	4620      	mov	r0, r4
 800814e:	f000 f84d 	bl	80081ec <_free_r>
 8008152:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008154:	b111      	cbz	r1, 800815c <_reclaim_reent+0x94>
 8008156:	4620      	mov	r0, r4
 8008158:	f000 f848 	bl	80081ec <_free_r>
 800815c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800815e:	b111      	cbz	r1, 8008166 <_reclaim_reent+0x9e>
 8008160:	4620      	mov	r0, r4
 8008162:	f000 f843 	bl	80081ec <_free_r>
 8008166:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008168:	b111      	cbz	r1, 8008170 <_reclaim_reent+0xa8>
 800816a:	4620      	mov	r0, r4
 800816c:	f000 f83e 	bl	80081ec <_free_r>
 8008170:	6a23      	ldr	r3, [r4, #32]
 8008172:	b11b      	cbz	r3, 800817c <_reclaim_reent+0xb4>
 8008174:	4620      	mov	r0, r4
 8008176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800817a:	4718      	bx	r3
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	bf00      	nop
 8008180:	20000010 	.word	0x20000010

08008184 <__libc_init_array>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4d0d      	ldr	r5, [pc, #52]	@ (80081bc <__libc_init_array+0x38>)
 8008188:	4c0d      	ldr	r4, [pc, #52]	@ (80081c0 <__libc_init_array+0x3c>)
 800818a:	1b64      	subs	r4, r4, r5
 800818c:	10a4      	asrs	r4, r4, #2
 800818e:	2600      	movs	r6, #0
 8008190:	42a6      	cmp	r6, r4
 8008192:	d109      	bne.n	80081a8 <__libc_init_array+0x24>
 8008194:	4d0b      	ldr	r5, [pc, #44]	@ (80081c4 <__libc_init_array+0x40>)
 8008196:	4c0c      	ldr	r4, [pc, #48]	@ (80081c8 <__libc_init_array+0x44>)
 8008198:	f000 f87e 	bl	8008298 <_init>
 800819c:	1b64      	subs	r4, r4, r5
 800819e:	10a4      	asrs	r4, r4, #2
 80081a0:	2600      	movs	r6, #0
 80081a2:	42a6      	cmp	r6, r4
 80081a4:	d105      	bne.n	80081b2 <__libc_init_array+0x2e>
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ac:	4798      	blx	r3
 80081ae:	3601      	adds	r6, #1
 80081b0:	e7ee      	b.n	8008190 <__libc_init_array+0xc>
 80081b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b6:	4798      	blx	r3
 80081b8:	3601      	adds	r6, #1
 80081ba:	e7f2      	b.n	80081a2 <__libc_init_array+0x1e>
 80081bc:	08008354 	.word	0x08008354
 80081c0:	08008354 	.word	0x08008354
 80081c4:	08008354 	.word	0x08008354
 80081c8:	08008358 	.word	0x08008358

080081cc <__retarget_lock_acquire_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__retarget_lock_release_recursive>:
 80081ce:	4770      	bx	lr

080081d0 <memcpy>:
 80081d0:	440a      	add	r2, r1
 80081d2:	4291      	cmp	r1, r2
 80081d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d8:	d100      	bne.n	80081dc <memcpy+0xc>
 80081da:	4770      	bx	lr
 80081dc:	b510      	push	{r4, lr}
 80081de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e6:	4291      	cmp	r1, r2
 80081e8:	d1f9      	bne.n	80081de <memcpy+0xe>
 80081ea:	bd10      	pop	{r4, pc}

080081ec <_free_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4605      	mov	r5, r0
 80081f0:	2900      	cmp	r1, #0
 80081f2:	d041      	beq.n	8008278 <_free_r+0x8c>
 80081f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f8:	1f0c      	subs	r4, r1, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfb8      	it	lt
 80081fe:	18e4      	addlt	r4, r4, r3
 8008200:	f000 f83e 	bl	8008280 <__malloc_lock>
 8008204:	4a1d      	ldr	r2, [pc, #116]	@ (800827c <_free_r+0x90>)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	b933      	cbnz	r3, 8008218 <_free_r+0x2c>
 800820a:	6063      	str	r3, [r4, #4]
 800820c:	6014      	str	r4, [r2, #0]
 800820e:	4628      	mov	r0, r5
 8008210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008214:	f000 b83a 	b.w	800828c <__malloc_unlock>
 8008218:	42a3      	cmp	r3, r4
 800821a:	d908      	bls.n	800822e <_free_r+0x42>
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	1821      	adds	r1, r4, r0
 8008220:	428b      	cmp	r3, r1
 8008222:	bf01      	itttt	eq
 8008224:	6819      	ldreq	r1, [r3, #0]
 8008226:	685b      	ldreq	r3, [r3, #4]
 8008228:	1809      	addeq	r1, r1, r0
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	e7ed      	b.n	800820a <_free_r+0x1e>
 800822e:	461a      	mov	r2, r3
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	b10b      	cbz	r3, 8008238 <_free_r+0x4c>
 8008234:	42a3      	cmp	r3, r4
 8008236:	d9fa      	bls.n	800822e <_free_r+0x42>
 8008238:	6811      	ldr	r1, [r2, #0]
 800823a:	1850      	adds	r0, r2, r1
 800823c:	42a0      	cmp	r0, r4
 800823e:	d10b      	bne.n	8008258 <_free_r+0x6c>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	4401      	add	r1, r0
 8008244:	1850      	adds	r0, r2, r1
 8008246:	4283      	cmp	r3, r0
 8008248:	6011      	str	r1, [r2, #0]
 800824a:	d1e0      	bne.n	800820e <_free_r+0x22>
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	6053      	str	r3, [r2, #4]
 8008252:	4408      	add	r0, r1
 8008254:	6010      	str	r0, [r2, #0]
 8008256:	e7da      	b.n	800820e <_free_r+0x22>
 8008258:	d902      	bls.n	8008260 <_free_r+0x74>
 800825a:	230c      	movs	r3, #12
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	e7d6      	b.n	800820e <_free_r+0x22>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	bf04      	itt	eq
 8008268:	6819      	ldreq	r1, [r3, #0]
 800826a:	685b      	ldreq	r3, [r3, #4]
 800826c:	6063      	str	r3, [r4, #4]
 800826e:	bf04      	itt	eq
 8008270:	1809      	addeq	r1, r1, r0
 8008272:	6021      	streq	r1, [r4, #0]
 8008274:	6054      	str	r4, [r2, #4]
 8008276:	e7ca      	b.n	800820e <_free_r+0x22>
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	bf00      	nop
 800827c:	20002d5c 	.word	0x20002d5c

08008280 <__malloc_lock>:
 8008280:	4801      	ldr	r0, [pc, #4]	@ (8008288 <__malloc_lock+0x8>)
 8008282:	f7ff bfa3 	b.w	80081cc <__retarget_lock_acquire_recursive>
 8008286:	bf00      	nop
 8008288:	20002d58 	.word	0x20002d58

0800828c <__malloc_unlock>:
 800828c:	4801      	ldr	r0, [pc, #4]	@ (8008294 <__malloc_unlock+0x8>)
 800828e:	f7ff bf9e 	b.w	80081ce <__retarget_lock_release_recursive>
 8008292:	bf00      	nop
 8008294:	20002d58 	.word	0x20002d58

08008298 <_init>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr

080082a4 <_fini>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	bf00      	nop
 80082a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082aa:	bc08      	pop	{r3}
 80082ac:	469e      	mov	lr, r3
 80082ae:	4770      	bx	lr
