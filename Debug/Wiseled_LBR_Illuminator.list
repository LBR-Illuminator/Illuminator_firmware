
Wiseled_LBR_Illuminator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eae0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800ec70  0800ec70  0000fc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f25c  0800f25c  000111d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f25c  0800f25c  0001025c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f264  0800f264  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f264  0800f264  00010264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f268  0800f268  00010268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f26c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003378  200001d8  0800f444  000111d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003550  0800f444  00011550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025077  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b2f  00000000  00000000  0003627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0003bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e0  00000000  00000000  0003db88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002791a  00000000  00000000  0003f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002590c  00000000  00000000  00066b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e782e  00000000  00000000  0008c48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173cbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c4c  00000000  00000000  00173d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0017c94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec58 	.word	0x0800ec58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ec58 	.word	0x0800ec58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	@ 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b988 	b.w	80010ec <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f806 	bl	8000df4 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	468e      	mov	lr, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d962      	bls.n	8000ed0 <__udivmoddi4+0xdc>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	b14e      	cbz	r6, 8000e24 <__udivmoddi4+0x30>
 8000e10:	f1c6 0320 	rsb	r3, r6, #32
 8000e14:	fa01 f806 	lsl.w	r8, r1, r6
 8000e18:	fa20 f303 	lsr.w	r3, r0, r3
 8000e1c:	40b7      	lsls	r7, r6
 8000e1e:	ea43 0808 	orr.w	r8, r3, r8
 8000e22:	40b4      	lsls	r4, r6
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f fc87 	uxth.w	ip, r7
 8000e2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e30:	0c23      	lsrs	r3, r4, #16
 8000e32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e48:	f080 80ea 	bcs.w	8001020 <__udivmoddi4+0x22c>
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f240 80e7 	bls.w	8001020 <__udivmoddi4+0x22c>
 8000e52:	3902      	subs	r1, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	1a9a      	subs	r2, r3, r2
 8000e58:	b2a3      	uxth	r3, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e6a:	459c      	cmp	ip, r3
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x8e>
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	f080 80d6 	bcs.w	8001024 <__udivmoddi4+0x230>
 8000e78:	459c      	cmp	ip, r3
 8000e7a:	f240 80d3 	bls.w	8001024 <__udivmoddi4+0x230>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3802      	subs	r0, #2
 8000e82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e86:	eba3 030c 	sub.w	r3, r3, ip
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40f3      	lsrs	r3, r6
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xb6>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb0>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x14c>
 8000eb2:	4573      	cmp	r3, lr
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xc8>
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	f200 8105 	bhi.w	80010c6 <__udivmoddi4+0x2d2>
 8000ebc:	1a84      	subs	r4, r0, r2
 8000ebe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000eca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ece:	e7e2      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8090 	beq.w	8000ff6 <__udivmoddi4+0x202>
 8000ed6:	fab2 f682 	clz	r6, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f040 80a4 	bne.w	8001028 <__udivmoddi4+0x234>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	b280      	uxth	r0, r0
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ef2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000efa:	fb04 f20c 	mul.w	r2, r4, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x11e>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x11c>
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	f200 80e0 	bhi.w	80010d0 <__udivmoddi4+0x2dc>
 8000f10:	46c4      	mov	ip, r8
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f20:	fb02 f404 	mul.w	r4, r2, r4
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x144>
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x142>
 8000f30:	429c      	cmp	r4, r3
 8000f32:	f200 80ca 	bhi.w	80010ca <__udivmoddi4+0x2d6>
 8000f36:	4602      	mov	r2, r0
 8000f38:	1b1b      	subs	r3, r3, r4
 8000f3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f50:	fa20 f306 	lsr.w	r3, r0, r6
 8000f54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f5c:	4323      	orrs	r3, r4
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	fa1f fc87 	uxth.w	ip, r7
 8000f66:	fbbe f0f9 	udiv	r0, lr, r9
 8000f6a:	0c1c      	lsrs	r4, r3, #16
 8000f6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x1a0>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f86:	f080 809c 	bcs.w	80010c2 <__udivmoddi4+0x2ce>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	f240 8099 	bls.w	80010c2 <__udivmoddi4+0x2ce>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	eba4 040e 	sub.w	r4, r4, lr
 8000f98:	fa1f fe83 	uxth.w	lr, r3
 8000f9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fac:	45a4      	cmp	ip, r4
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x1ce>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb6:	f080 8082 	bcs.w	80010be <__udivmoddi4+0x2ca>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d97f      	bls.n	80010be <__udivmoddi4+0x2ca>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	eba4 040c 	sub.w	r4, r4, ip
 8000fca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fce:	4564      	cmp	r4, ip
 8000fd0:	4673      	mov	r3, lr
 8000fd2:	46e1      	mov	r9, ip
 8000fd4:	d362      	bcc.n	800109c <__udivmoddi4+0x2a8>
 8000fd6:	d05f      	beq.n	8001098 <__udivmoddi4+0x2a4>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x1fe>
 8000fda:	ebb8 0203 	subs.w	r2, r8, r3
 8000fde:	eb64 0409 	sbc.w	r4, r4, r9
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fea:	431e      	orrs	r6, r3
 8000fec:	40cc      	lsrs	r4, r1
 8000fee:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e74f      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ff6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ffa:	0c01      	lsrs	r1, r0, #16
 8000ffc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001000:	b280      	uxth	r0, r0
 8001002:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001006:	463b      	mov	r3, r7
 8001008:	4638      	mov	r0, r7
 800100a:	463c      	mov	r4, r7
 800100c:	46b8      	mov	r8, r7
 800100e:	46be      	mov	lr, r7
 8001010:	2620      	movs	r6, #32
 8001012:	fbb1 f1f7 	udiv	r1, r1, r7
 8001016:	eba2 0208 	sub.w	r2, r2, r8
 800101a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101e:	e766      	b.n	8000eee <__udivmoddi4+0xfa>
 8001020:	4601      	mov	r1, r0
 8001022:	e718      	b.n	8000e56 <__udivmoddi4+0x62>
 8001024:	4610      	mov	r0, r2
 8001026:	e72c      	b.n	8000e82 <__udivmoddi4+0x8e>
 8001028:	f1c6 0220 	rsb	r2, r6, #32
 800102c:	fa2e f302 	lsr.w	r3, lr, r2
 8001030:	40b7      	lsls	r7, r6
 8001032:	40b1      	lsls	r1, r6
 8001034:	fa20 f202 	lsr.w	r2, r0, r2
 8001038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103c:	430a      	orrs	r2, r1
 800103e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001042:	b2bc      	uxth	r4, r7
 8001044:	fb0e 3318 	mls	r3, lr, r8, r3
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104e:	fb08 f904 	mul.w	r9, r8, r4
 8001052:	40b0      	lsls	r0, r6
 8001054:	4589      	cmp	r9, r1
 8001056:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800105a:	b280      	uxth	r0, r0
 800105c:	d93e      	bls.n	80010dc <__udivmoddi4+0x2e8>
 800105e:	1879      	adds	r1, r7, r1
 8001060:	f108 3cff 	add.w	ip, r8, #4294967295
 8001064:	d201      	bcs.n	800106a <__udivmoddi4+0x276>
 8001066:	4589      	cmp	r9, r1
 8001068:	d81f      	bhi.n	80010aa <__udivmoddi4+0x2b6>
 800106a:	eba1 0109 	sub.w	r1, r1, r9
 800106e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001072:	fb09 f804 	mul.w	r8, r9, r4
 8001076:	fb0e 1119 	mls	r1, lr, r9, r1
 800107a:	b292      	uxth	r2, r2
 800107c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001080:	4542      	cmp	r2, r8
 8001082:	d229      	bcs.n	80010d8 <__udivmoddi4+0x2e4>
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	f109 31ff 	add.w	r1, r9, #4294967295
 800108a:	d2c4      	bcs.n	8001016 <__udivmoddi4+0x222>
 800108c:	4542      	cmp	r2, r8
 800108e:	d2c2      	bcs.n	8001016 <__udivmoddi4+0x222>
 8001090:	f1a9 0102 	sub.w	r1, r9, #2
 8001094:	443a      	add	r2, r7
 8001096:	e7be      	b.n	8001016 <__udivmoddi4+0x222>
 8001098:	45f0      	cmp	r8, lr
 800109a:	d29d      	bcs.n	8000fd8 <__udivmoddi4+0x1e4>
 800109c:	ebbe 0302 	subs.w	r3, lr, r2
 80010a0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a4:	3801      	subs	r0, #1
 80010a6:	46e1      	mov	r9, ip
 80010a8:	e796      	b.n	8000fd8 <__udivmoddi4+0x1e4>
 80010aa:	eba7 0909 	sub.w	r9, r7, r9
 80010ae:	4449      	add	r1, r9
 80010b0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b8:	fb09 f804 	mul.w	r8, r9, r4
 80010bc:	e7db      	b.n	8001076 <__udivmoddi4+0x282>
 80010be:	4673      	mov	r3, lr
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1ce>
 80010c2:	4650      	mov	r0, sl
 80010c4:	e766      	b.n	8000f94 <__udivmoddi4+0x1a0>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e6fd      	b.n	8000ec6 <__udivmoddi4+0xd2>
 80010ca:	443b      	add	r3, r7
 80010cc:	3a02      	subs	r2, #2
 80010ce:	e733      	b.n	8000f38 <__udivmoddi4+0x144>
 80010d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d4:	443b      	add	r3, r7
 80010d6:	e71c      	b.n	8000f12 <__udivmoddi4+0x11e>
 80010d8:	4649      	mov	r1, r9
 80010da:	e79c      	b.n	8001016 <__udivmoddi4+0x222>
 80010dc:	eba1 0109 	sub.w	r1, r1, r9
 80010e0:	46c4      	mov	ip, r8
 80010e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e6:	fb09 f804 	mul.w	r8, r9, r4
 80010ea:	e7c4      	b.n	8001076 <__udivmoddi4+0x282>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <lwjson_get_val_string>:
 * \param[out]      str_len: Pointer to variable holding length of string.
 *                      Set to `NULL` if not used
 * \return          Pointer to string or `NULL` if invalid token type
 */
static inline const char*
lwjson_get_val_string(const lwjson_token_t* token, size_t* str_len) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
    if (token != NULL && token->type == LWJSON_TYPE_STRING) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00d      	beq.n	800111c <lwjson_get_val_string+0x2c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	791b      	ldrb	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <lwjson_get_val_string+0x2c>
        if (str_len != NULL) {
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <lwjson_get_val_string+0x26>
            *str_len = token->u.str.token_value_len;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	601a      	str	r2, [r3, #0]
        }
        return token->u.str.token_value;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	e000      	b.n	800111e <lwjson_get_val_string+0x2e>
    }
    return NULL;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <COMMS_Handler_Init>:

/**
  * @brief  Initialize the communications handler
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status COMMS_Handler_Init(void) {
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  /* Initialize JSON parser */
  lwjson_init(&jsonParser, jsonTokens, LWJSON_ARRAYSIZE(jsonTokens));
 8001132:	2220      	movs	r2, #32
 8001134:	4914      	ldr	r1, [pc, #80]	@ (8001188 <COMMS_Handler_Init+0x5c>)
 8001136:	4815      	ldr	r0, [pc, #84]	@ (800118c <COMMS_Handler_Init+0x60>)
 8001138:	f00a fbcf 	bl	800b8da <lwjson_init>

  /* Initialize serial with callback */
  VAL_Status status = VAL_Serial_Init(COMMS_SerialRxCallback);
 800113c:	4814      	ldr	r0, [pc, #80]	@ (8001190 <COMMS_Handler_Init+0x64>)
 800113e:	f007 f94f 	bl	80083e0 <VAL_Serial_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	77fb      	strb	r3, [r7, #31]
  if (status != VAL_OK) {
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <COMMS_Handler_Init+0x24>
    return status;
 800114c:	7ffb      	ldrb	r3, [r7, #31]
 800114e:	e017      	b.n	8001180 <COMMS_Handler_Init+0x54>
  }

  /* Create communications handler task */
  osThreadDef(COMSHandlerTask, COMMS_Handler_Task, COMMS_HANDLER_PRIORITY, 0, COMMS_HANDLER_STACK_SIZE);
 8001150:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <COMMS_Handler_Init+0x68>)
 8001152:	463c      	mov	r4, r7
 8001154:	461d      	mov	r5, r3
 8001156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  commsHandlerTaskHandle = osThreadCreate(osThread(COMSHandlerTask), NULL);
 8001162:	463b      	mov	r3, r7
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f007 fa4a 	bl	8008600 <osThreadCreate>
 800116c:	4603      	mov	r3, r0
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <COMMS_Handler_Init+0x6c>)
 8001170:	6013      	str	r3, [r2, #0]

  if (commsHandlerTaskHandle == NULL) {
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <COMMS_Handler_Init+0x6c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <COMMS_Handler_Init+0x52>
    return VAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <COMMS_Handler_Init+0x54>
  }

  return VAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	20000430 	.word	0x20000430
 800118c:	20000400 	.word	0x20000400
 8001190:	080013a9 	.word	0x080013a9
 8001194:	0800ec80 	.word	0x0800ec80
 8001198:	200001f4 	.word	0x200001f4

0800119c <COMMS_Handler_Task>:
/**
  * @brief  Communications handler task
  * @param  argument: Task argument
  * @retval None
  */
static void COMMS_Handler_Task(void const *argument) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Initialize */

  /* Task main loop */
  for (;;) {
    /* Wait for events, task is primarily driven by the Serial RX callback */
    osDelay(100);
 80011a4:	2064      	movs	r0, #100	@ 0x64
 80011a6:	f007 fa77 	bl	8008698 <osDelay>
 80011aa:	e7fb      	b.n	80011a4 <COMMS_Handler_Task+0x8>

080011ac <COMMS_ProcessJsonCommand>:
/**
  * @brief  Process a received JSON command string
  * @param  jsonStr: JSON command string
  * @retval None
  */
static void COMMS_ProcessJsonCommand(const char* jsonStr) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	@ 0x38
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Parse JSON message */
  lwjson_parse(&jsonParser, jsonStr);
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4864      	ldr	r0, [pc, #400]	@ (8001348 <COMMS_ProcessJsonCommand+0x19c>)
 80011b8:	f00a fe14 	bl	800bde4 <lwjson_parse>

  /* Get first token - this is the root object */
  const lwjson_token_t* root = lwjson_get_first_token(&jsonParser);
 80011bc:	4b63      	ldr	r3, [pc, #396]	@ (800134c <COMMS_ProcessJsonCommand+0x1a0>)
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (root == NULL || root->type != LWJSON_TYPE_OBJECT) {
 80011c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <COMMS_ProcessJsonCommand+0x22>
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d003      	beq.n	80011d6 <COMMS_ProcessJsonCommand+0x2a>
    lwjson_free(&jsonParser);
 80011ce:	485e      	ldr	r0, [pc, #376]	@ (8001348 <COMMS_ProcessJsonCommand+0x19c>)
 80011d0:	f00a fe1b 	bl	800be0a <lwjson_free>
 80011d4:	e0b4      	b.n	8001340 <COMMS_ProcessJsonCommand+0x194>
    return;
  }

  /* Iterate through all tokens in the root object */
  const lwjson_token_t* token = root->u.first_child;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Look for type field */
  while (token != NULL) {
 80011dc:	e028      	b.n	8001230 <COMMS_ProcessJsonCommand+0x84>
    /* Check if token is "type" */
    if (token->token_name != NULL &&
 80011de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d021      	beq.n	800122a <COMMS_ProcessJsonCommand+0x7e>
        strncmp(token->token_name, "type", token->token_name_len) == 0 &&
 80011e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e8:	6898      	ldr	r0, [r3, #8]
 80011ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4957      	ldr	r1, [pc, #348]	@ (8001350 <COMMS_ProcessJsonCommand+0x1a4>)
 80011f2:	f00b fbfb 	bl	800c9ec <strncmp>
 80011f6:	4603      	mov	r3, r0
    if (token->token_name != NULL &&
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d116      	bne.n	800122a <COMMS_ProcessJsonCommand+0x7e>
        token->type == LWJSON_TYPE_STRING) {
 80011fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fe:	791b      	ldrb	r3, [r3, #4]
        strncmp(token->token_name, "type", token->token_name_len) == 0 &&
 8001200:	2b00      	cmp	r3, #0
 8001202:	d112      	bne.n	800122a <COMMS_ProcessJsonCommand+0x7e>

      size_t type_len;
      const char* type_str = lwjson_get_val_string(token, &type_len);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800120c:	f7ff ff70 	bl	80010f0 <lwjson_get_val_string>
 8001210:	6238      	str	r0, [r7, #32]

      /* If type is not "cmd", skip */
      if (type_str == NULL || strncmp(type_str, MSG_TYPE_CMD, type_len) != 0) {
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00e      	beq.n	8001236 <COMMS_ProcessJsonCommand+0x8a>
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	461a      	mov	r2, r3
 800121c:	494d      	ldr	r1, [pc, #308]	@ (8001354 <COMMS_ProcessJsonCommand+0x1a8>)
 800121e:	6a38      	ldr	r0, [r7, #32]
 8001220:	f00b fbe4 	bl	800c9ec <strncmp>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <COMMS_ProcessJsonCommand+0x8a>
        break;
      }
    }
    token = token->next;
 800122a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  while (token != NULL) {
 8001230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1d3      	bne.n	80011de <COMMS_ProcessJsonCommand+0x32>
  }

  /* Get message ID, topic, and action */
  const char* msgId = "unknown";
 8001236:	4b48      	ldr	r3, [pc, #288]	@ (8001358 <COMMS_ProcessJsonCommand+0x1ac>)
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
  const char* topic = NULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const char* action = NULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  size_t topic_len = 0, action_len = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]

  token = root->u.first_child;
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	637b      	str	r3, [r7, #52]	@ 0x34
  while (token != NULL) {
 8001250:	e051      	b.n	80012f6 <COMMS_ProcessJsonCommand+0x14a>
    if (token->token_name != NULL) {
 8001252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d04a      	beq.n	80012f0 <COMMS_ProcessJsonCommand+0x144>
      if (strncmp(token->token_name, "id", token->token_name_len) == 0 &&
 800125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125c:	6898      	ldr	r0, [r3, #8]
 800125e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	461a      	mov	r2, r3
 8001264:	493d      	ldr	r1, [pc, #244]	@ (800135c <COMMS_ProcessJsonCommand+0x1b0>)
 8001266:	f00b fbc1 	bl	800c9ec <strncmp>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d110      	bne.n	8001292 <COMMS_ProcessJsonCommand+0xe6>
          token->type == LWJSON_TYPE_STRING) {
 8001270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001272:	791b      	ldrb	r3, [r3, #4]
      if (strncmp(token->token_name, "id", token->token_name_len) == 0 &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10c      	bne.n	8001292 <COMMS_ProcessJsonCommand+0xe6>
        size_t id_len;
        const char* tmp = lwjson_get_val_string(token, &id_len);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001280:	f7ff ff36 	bl	80010f0 <lwjson_get_val_string>
 8001284:	61f8      	str	r0, [r7, #28]
        if (tmp != NULL) {
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d030      	beq.n	80012ee <COMMS_ProcessJsonCommand+0x142>
          msgId = tmp;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	633b      	str	r3, [r7, #48]	@ 0x30
          token->type == LWJSON_TYPE_STRING) {
 8001290:	e02d      	b.n	80012ee <COMMS_ProcessJsonCommand+0x142>
        }
      } else if (strncmp(token->token_name, "topic", token->token_name_len) == 0 &&
 8001292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001294:	6898      	ldr	r0, [r3, #8]
 8001296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	461a      	mov	r2, r3
 800129c:	4930      	ldr	r1, [pc, #192]	@ (8001360 <COMMS_ProcessJsonCommand+0x1b4>)
 800129e:	f00b fba5 	bl	800c9ec <strncmp>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10b      	bne.n	80012c0 <COMMS_ProcessJsonCommand+0x114>
                 token->type == LWJSON_TYPE_STRING) {
 80012a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012aa:	791b      	ldrb	r3, [r3, #4]
      } else if (strncmp(token->token_name, "topic", token->token_name_len) == 0 &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d107      	bne.n	80012c0 <COMMS_ProcessJsonCommand+0x114>
        topic = lwjson_get_val_string(token, &topic_len);
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4619      	mov	r1, r3
 80012b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012b8:	f7ff ff1a 	bl	80010f0 <lwjson_get_val_string>
 80012bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80012be:	e017      	b.n	80012f0 <COMMS_ProcessJsonCommand+0x144>
      } else if (strncmp(token->token_name, "action", token->token_name_len) == 0 &&
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	6898      	ldr	r0, [r3, #8]
 80012c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4926      	ldr	r1, [pc, #152]	@ (8001364 <COMMS_ProcessJsonCommand+0x1b8>)
 80012cc:	f00b fb8e 	bl	800c9ec <strncmp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10c      	bne.n	80012f0 <COMMS_ProcessJsonCommand+0x144>
                 token->type == LWJSON_TYPE_STRING) {
 80012d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d8:	791b      	ldrb	r3, [r3, #4]
      } else if (strncmp(token->token_name, "action", token->token_name_len) == 0 &&
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <COMMS_ProcessJsonCommand+0x144>
        action = lwjson_get_val_string(token, &action_len);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012e6:	f7ff ff03 	bl	80010f0 <lwjson_get_val_string>
 80012ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 80012ec:	e000      	b.n	80012f0 <COMMS_ProcessJsonCommand+0x144>
          token->type == LWJSON_TYPE_STRING) {
 80012ee:	bf00      	nop
      }
    }
    token = token->next;
 80012f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  while (token != NULL) {
 80012f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1aa      	bne.n	8001252 <COMMS_ProcessJsonCommand+0xa6>
  }

  /* Check if this is a system ping command */
  if (topic != NULL && action != NULL &&
 80012fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01b      	beq.n	800133a <COMMS_ProcessJsonCommand+0x18e>
 8001302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001304:	2b00      	cmp	r3, #0
 8001306:	d018      	beq.n	800133a <COMMS_ProcessJsonCommand+0x18e>
      topic_len == 6 && strncmp(topic, "system", 6) == 0 &&
 8001308:	69bb      	ldr	r3, [r7, #24]
  if (topic != NULL && action != NULL &&
 800130a:	2b06      	cmp	r3, #6
 800130c:	d115      	bne.n	800133a <COMMS_ProcessJsonCommand+0x18e>
      topic_len == 6 && strncmp(topic, "system", 6) == 0 &&
 800130e:	2206      	movs	r2, #6
 8001310:	4915      	ldr	r1, [pc, #84]	@ (8001368 <COMMS_ProcessJsonCommand+0x1bc>)
 8001312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001314:	f00b fb6a 	bl	800c9ec <strncmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10d      	bne.n	800133a <COMMS_ProcessJsonCommand+0x18e>
      action_len == 4 && strncmp(action, "ping", 4) == 0) {
 800131e:	697b      	ldr	r3, [r7, #20]
      topic_len == 6 && strncmp(topic, "system", 6) == 0 &&
 8001320:	2b04      	cmp	r3, #4
 8001322:	d10a      	bne.n	800133a <COMMS_ProcessJsonCommand+0x18e>
      action_len == 4 && strncmp(action, "ping", 4) == 0) {
 8001324:	2204      	movs	r2, #4
 8001326:	4911      	ldr	r1, [pc, #68]	@ (800136c <COMMS_ProcessJsonCommand+0x1c0>)
 8001328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800132a:	f00b fb5f 	bl	800c9ec <strncmp>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <COMMS_ProcessJsonCommand+0x18e>
    /* Send ping response */
    COMMS_SendPingResponse(msgId);
 8001334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001336:	f000 f81b 	bl	8001370 <COMMS_SendPingResponse>
  }

  /* Cleanup parser */
  lwjson_free(&jsonParser);
 800133a:	4803      	ldr	r0, [pc, #12]	@ (8001348 <COMMS_ProcessJsonCommand+0x19c>)
 800133c:	f00a fd65 	bl	800be0a <lwjson_free>
}
 8001340:	3738      	adds	r7, #56	@ 0x38
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000400 	.word	0x20000400
 800134c:	20000410 	.word	0x20000410
 8001350:	0800ec9c 	.word	0x0800ec9c
 8001354:	0800eca4 	.word	0x0800eca4
 8001358:	0800eca8 	.word	0x0800eca8
 800135c:	0800ecb0 	.word	0x0800ecb0
 8001360:	0800ecb4 	.word	0x0800ecb4
 8001364:	0800ecbc 	.word	0x0800ecbc
 8001368:	0800ecc4 	.word	0x0800ecc4
 800136c:	0800eccc 	.word	0x0800eccc

08001370 <COMMS_SendPingResponse>:
/**
  * @brief  Send ping response
  * @param  msgId: Message ID to respond to
  * @retval None
  */
static void COMMS_SendPingResponse(const char* msgId) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Format ping response */
  int length = snprintf(txBuffer, TX_BUFFER_SIZE,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <COMMS_SendPingResponse+0x30>)
 800137c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <COMMS_SendPingResponse+0x34>)
 8001382:	f00b fa75 	bl	800c870 <sniprintf>
 8001386:	60f8      	str	r0, [r7, #12]
      "}"
    "}\r\n",
    msgId);

  /* Send response */
  VAL_Serial_Send((uint8_t*)txBuffer, length, 1000);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	b29b      	uxth	r3, r3
 800138c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001390:	4619      	mov	r1, r3
 8001392:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <COMMS_SendPingResponse+0x34>)
 8001394:	f007 f83a 	bl	800840c <VAL_Serial_Send>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800ecd4 	.word	0x0800ecd4
 80013a4:	200002f8 	.word	0x200002f8

080013a8 <COMMS_SerialRxCallback>:
/**
  * @brief  Serial RX callback - Called for each byte received
  * @param  byte: Received byte
  * @retval None
  */
static void COMMS_SerialRxCallback(uint8_t byte) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Add byte to buffer */
  if (rxIndex < RX_BUFFER_SIZE - 1) {
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <COMMS_SerialRxCallback+0x5c>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80013b8:	d809      	bhi.n	80013ce <COMMS_SerialRxCallback+0x26>
    rxBuffer[rxIndex++] = byte;
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <COMMS_SerialRxCallback+0x5c>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	b291      	uxth	r1, r2
 80013c2:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <COMMS_SerialRxCallback+0x5c>)
 80013c4:	8011      	strh	r1, [r2, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <COMMS_SerialRxCallback+0x60>)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	5453      	strb	r3, [r2, r1]
  }

  /* Check for end of message */
  if (byte == '\n' || byte == '\r') {
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b0a      	cmp	r3, #10
 80013d2:	d002      	beq.n	80013da <COMMS_SerialRxCallback+0x32>
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b0d      	cmp	r3, #13
 80013d8:	d10f      	bne.n	80013fa <COMMS_SerialRxCallback+0x52>
    /* Null-terminate the string */
    rxBuffer[rxIndex] = '\0';
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <COMMS_SerialRxCallback+0x5c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <COMMS_SerialRxCallback+0x60>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	5499      	strb	r1, [r3, r2]

    /* Check if we have a non-empty message */
    if (rxIndex > 0) {
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <COMMS_SerialRxCallback+0x5c>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <COMMS_SerialRxCallback+0x4c>
      //VAL_Serial_Printf("RX Callback: Full message received: %s\r\n", rxBuffer);

      /* Process the received message */
      COMMS_ProcessJsonCommand(rxBuffer);
 80013ee:	4806      	ldr	r0, [pc, #24]	@ (8001408 <COMMS_SerialRxCallback+0x60>)
 80013f0:	f7ff fedc 	bl	80011ac <COMMS_ProcessJsonCommand>
    }

    /* Reset index for next message */
    rxIndex = 0;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <COMMS_SerialRxCallback+0x5c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	801a      	strh	r2, [r3, #0]
  }
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200003f8 	.word	0x200003f8
 8001408:	200001f8 	.word	0x200001f8

0800140c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <vApplicationGetIdleTaskMemory+0x2c>)
 800141c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4a06      	ldr	r2, [pc, #24]	@ (800143c <vApplicationGetIdleTaskMemory+0x30>)
 8001422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000734 	.word	0x20000734
 800143c:	200007d4 	.word	0x200007d4

08001440 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a07      	ldr	r2, [pc, #28]	@ (800146c <vApplicationGetTimerTaskMemory+0x2c>)
 8001450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <vApplicationGetTimerTaskMemory+0x30>)
 8001456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800145e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	200009d4 	.word	0x200009d4
 8001470:	20000a74 	.word	0x20000a74

08001474 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <MX_FREERTOS_Init+0x30>)
 800147c:	1d3c      	adds	r4, r7, #4
 800147e:	461d      	mov	r5, r3
 8001480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001484:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f007 f8b5 	bl	8008600 <osThreadCreate>
 8001496:	4603      	mov	r3, r0
 8001498:	4a03      	ldr	r2, [pc, #12]	@ (80014a8 <MX_FREERTOS_Init+0x34>)
 800149a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdb0      	pop	{r4, r5, r7, pc}
 80014a4:	0800ed48 	.word	0x0800ed48
 80014a8:	20000730 	.word	0x20000730

080014ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f007 f8ef 	bl	8008698 <osDelay>
 80014ba:	e7fb      	b.n	80014b4 <StartDefaultTask+0x8>

080014bc <VAL_Init>:
/* Exported functions prototypes ---------------------------------------------*/
/**
  * @brief  Initialize all VAL modules
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
static inline VAL_Status VAL_Init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  VAL_Status status;
  
  /* Initialize system clock first */
  status = VAL_SysClock_Init();
 80014c2:	f007 f877 	bl	80085b4 <VAL_SysClock_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <VAL_Init+0x18>
    return status;
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	e01b      	b.n	800150c <VAL_Init+0x50>
  }
  
  /* Initialize GPIO pins */
  status = VAL_Pins_Init();
 80014d4:	f006 fed8 	bl	8008288 <VAL_Pins_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <VAL_Init+0x2a>
    return status;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	e012      	b.n	800150c <VAL_Init+0x50>
//  if (status != VAL_OK) {
//    return status;
//  }
  
  /* Initialize PWM */
  status = VAL_PWM_Init();
 80014e6:	f006 fed7 	bl	8008298 <VAL_PWM_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <VAL_Init+0x3c>
    return status;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	e009      	b.n	800150c <VAL_Init+0x50>
  }
  
  /* Initialize analog inputs */
  status = VAL_Analog_Init();
 80014f8:	f006 fe92 	bl	8008220 <VAL_Analog_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  if (status != VAL_OK) {
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <VAL_Init+0x4e>
    return status;
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	e000      	b.n	800150c <VAL_Init+0x50>
//  status = VAL_DataStore_Init();
//  if (status != VAL_OK) {
//    return status;
//  }
  
  return VAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <System_Init>:

/**
  * @brief Initialize system components
  * @retval None
  */
static void System_Init(void) {
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
  VAL_Status status;

  /* Initialize all Vendor Abstraction Layer modules */
  status = VAL_Init();
 800151a:	f7ff ffcf 	bl	80014bc <VAL_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	77fb      	strb	r3, [r7, #31]
  if (status != VAL_OK) {
 8001522:	7ffb      	ldrb	r3, [r7, #31]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <System_Init+0x18>
    System_Error();
 8001528:	f000 f83a 	bl	80015a0 <System_Error>
  }

  /* Create initialization task to complete initialization after FreeRTOS starts */
  osThreadDef(InitTask, Init_Task, osPriorityHigh, 0, 256);
 800152c:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <System_Init+0x50>)
 800152e:	463c      	mov	r4, r7
 8001530:	461d      	mov	r5, r3
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800153a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  initTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 800153e:	463b      	mov	r3, r7
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f007 f85c 	bl	8008600 <osThreadCreate>
 8001548:	4603      	mov	r3, r0
 800154a:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <System_Init+0x54>)
 800154c:	6013      	str	r3, [r2, #0]

  if (initTaskHandle == NULL) {
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <System_Init+0x54>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <System_Init+0x46>
    System_Error();
 8001556:	f000 f823 	bl	80015a0 <System_Error>
  }
}
 800155a:	bf00      	nop
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bdb0      	pop	{r4, r5, r7, pc}
 8001562:	bf00      	nop
 8001564:	0800ed70 	.word	0x0800ed70
 8001568:	20000e74 	.word	0x20000e74

0800156c <Init_Task>:
/**
  * @brief Application initialization task
  * @param  argument: Not used
  * @retval None
  */
static void Init_Task(void *argument) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  VAL_Status status;

  /* Initialize communications handler */
  status = COMMS_Handler_Init();
 8001574:	f7ff fdda 	bl	800112c <COMMS_Handler_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
  if (status != VAL_OK) {
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <Init_Task+0x1a>
    System_Error();
 8001582:	f000 f80d 	bl	80015a0 <System_Error>
  }

  /* Send system ready message */
  VAL_Serial_Printf("Wiseled_LBR System ready!\r\n");
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <Init_Task+0x30>)
 8001588:	f006 ff6a 	bl	8008460 <VAL_Serial_Printf>

  /* Delete the init task as it's no longer needed */
  vTaskDelete(NULL);
 800158c:	2000      	movs	r0, #0
 800158e:	f007 fff1 	bl	8009574 <vTaskDelete>

}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	0800ed8c 	.word	0x0800ed8c

080015a0 <System_Error>:

/**
  * @brief Handle system initialization error
  * @retval None
  */
static void System_Error(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Initialization error occurred */
  while (1) {
    /* Toggle LED rapidly to indicate error */
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015a4:	2108      	movs	r1, #8
 80015a6:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <System_Error+0x18>)
 80015a8:	f002 feca 	bl	8004340 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80015ac:	2064      	movs	r0, #100	@ 0x64
 80015ae:	f000 fe17 	bl	80021e0 <HAL_Delay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015b2:	bf00      	nop
 80015b4:	e7f6      	b.n	80015a4 <System_Error+0x4>
 80015b6:	bf00      	nop
 80015b8:	48000400 	.word	0x48000400

080015bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80015ce:	f000 fde7 	bl	80021a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40001400 	.word	0x40001400

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <Error_Handler+0x8>

080015ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f0:	f000 fdbe 	bl	8002170 <HAL_Init>

  /* Initialize all configured peripherals through VAL */
  System_Init();
 80015f4:	f7ff ff8e 	bl	8001514 <System_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015f8:	f7ff ff3c 	bl	8001474 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015fc:	f006 fff9 	bl	80085f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <main+0x14>

08001604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800163c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f000 fbf4 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	@ (8001640 <LoopForever+0x6>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	@ (8001644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <LoopForever+0xe>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	@ (8001650 <LoopForever+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f00b fa9b 	bl	800cb6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001636:	f7ff ffd9 	bl	80015ec <main>

0800163a <LoopForever>:

LoopForever:
    b LoopForever
 800163a:	e7fe      	b.n	800163a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800163c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001648:	0800f26c 	.word	0x0800f26c
  ldr r2, =_sbss
 800164c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001650:	20003550 	.word	0x20003550

08001654 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <CAN1_RX0_IRQHandler>
	...

08001658 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	463b      	mov	r3, r7
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800166e:	4b4d      	ldr	r3, [pc, #308]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001670:	4a4d      	ldr	r2, [pc, #308]	@ (80017a8 <MX_ADC1_Init+0x150>)
 8001672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001674:	4b4b      	ldr	r3, [pc, #300]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001676:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800167a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	4b49      	ldr	r3, [pc, #292]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001682:	4b48      	ldr	r3, [pc, #288]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001688:	4b46      	ldr	r3, [pc, #280]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 800168a:	2201      	movs	r2, #1
 800168c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800168e:	4b45      	ldr	r3, [pc, #276]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001690:	2208      	movs	r2, #8
 8001692:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001694:	4b43      	ldr	r3, [pc, #268]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001696:	2200      	movs	r2, #0
 8001698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169a:	4b42      	ldr	r3, [pc, #264]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 800169c:	2200      	movs	r2, #0
 800169e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80016a0:	4b40      	ldr	r3, [pc, #256]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016a2:	2206      	movs	r2, #6
 80016a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a6:	4b3f      	ldr	r3, [pc, #252]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ae:	4b3d      	ldr	r3, [pc, #244]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b4:	4b3b      	ldr	r3, [pc, #236]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ba:	4b3a      	ldr	r3, [pc, #232]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016c2:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016c8:	4b36      	ldr	r3, [pc, #216]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d0:	4834      	ldr	r0, [pc, #208]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016d2:	f000 ffa9 	bl	8002628 <HAL_ADC_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80016dc:	f7ff ff80 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <MX_ADC1_Init+0x154>)
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e4:	2306      	movs	r3, #6
 80016e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ec:	237f      	movs	r3, #127	@ 0x7f
 80016ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f0:	2304      	movs	r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4619      	mov	r1, r3
 80016fc:	4829      	ldr	r0, [pc, #164]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 80016fe:	f001 fb2b 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001708:	f7ff ff6a 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800170c:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <MX_ADC1_Init+0x158>)
 800170e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001710:	230c      	movs	r3, #12
 8001712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	4619      	mov	r1, r3
 8001718:	4822      	ldr	r0, [pc, #136]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 800171a:	f001 fb1d 	bl	8002d58 <HAL_ADC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001724:	f7ff ff5c 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <MX_ADC1_Init+0x15c>)
 800172a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800172c:	2312      	movs	r3, #18
 800172e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	4619      	mov	r1, r3
 8001734:	481b      	ldr	r0, [pc, #108]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001736:	f001 fb0f 	bl	8002d58 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001740:	f7ff ff4e 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001744:	4b1c      	ldr	r3, [pc, #112]	@ (80017b8 <MX_ADC1_Init+0x160>)
 8001746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001748:	2318      	movs	r3, #24
 800174a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	463b      	mov	r3, r7
 800174e:	4619      	mov	r1, r3
 8001750:	4814      	ldr	r0, [pc, #80]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001752:	f001 fb01 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800175c:	f7ff ff40 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001760:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <MX_ADC1_Init+0x164>)
 8001762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001768:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 8001770:	f001 faf2 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800177a:	f7ff ff31 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <MX_ADC1_Init+0x168>)
 8001780:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001782:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_ADC1_Init+0x14c>)
 800178e:	f001 fae3 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8001798:	f7ff ff22 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000e78 	.word	0x20000e78
 80017a8:	50040000 	.word	0x50040000
 80017ac:	19200040 	.word	0x19200040
 80017b0:	21800100 	.word	0x21800100
 80017b4:	25b00200 	.word	0x25b00200
 80017b8:	2a000400 	.word	0x2a000400
 80017bc:	2e300800 	.word	0x2e300800
 80017c0:	32601000 	.word	0x32601000

080017c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09e      	sub	sp, #120	@ 0x78
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2254      	movs	r2, #84	@ 0x54
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00b f8f9 	bl	800c9dc <memset>
  if(adcHandle->Instance==ADC1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a3f      	ldr	r2, [pc, #252]	@ (80018ec <HAL_ADC_MspInit+0x128>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d177      	bne.n	80018e4 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80017fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001800:	2301      	movs	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001808:	2310      	movs	r3, #16
 800180a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800180c:	2307      	movs	r3, #7
 800180e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001818:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800181c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fc84 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800182e:	f7ff fed7 	bl	80015e0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001832:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_ADC_MspInit+0x12c>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a2e      	ldr	r2, [pc, #184]	@ (80018f0 <HAL_ADC_MspInit+0x12c>)
 8001838:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <HAL_ADC_MspInit+0x12c>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <HAL_ADC_MspInit+0x12c>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <HAL_ADC_MspInit+0x12c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <HAL_ADC_MspInit+0x12c>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = LED1_ADC_Current_Pin|LED2_ADC_Current_Pin|LED3_ADC_Current_Pin|LED1_ADC_Temperature_Pin
 8001862:	23fa      	movs	r3, #250	@ 0xfa
 8001864:	667b      	str	r3, [r7, #100]	@ 0x64
                          |LED2_ADC_Temperature_Pin|LED3_ADC_Temperature_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001866:	230b      	movs	r3, #11
 8001868:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001878:	f002 fbe0 	bl	800403c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800187c:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_ADC_MspInit+0x134>)
 8001880:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 800189c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018a2:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 80018a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 80018ac:	2220      	movs	r2, #32
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 80018b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018b8:	480e      	ldr	r0, [pc, #56]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 80018ba:	f002 f949 	bl	8003b50 <HAL_DMA_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 80018c4:	f7ff fe8c 	bl	80015e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 80018cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_ADC_MspInit+0x130>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2105      	movs	r1, #5
 80018d8:	2012      	movs	r0, #18
 80018da:	f002 f90f 	bl	8003afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80018de:	2012      	movs	r0, #18
 80018e0:	f002 f928 	bl	8003b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018e4:	bf00      	nop
 80018e6:	3778      	adds	r7, #120	@ 0x78
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	50040000 	.word	0x50040000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	20000edc 	.word	0x20000edc
 80018f8:	40020008 	.word	0x40020008

080018fc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a2e      	ldr	r2, [pc, #184]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a22      	ldr	r2, [pc, #136]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <MX_GPIO_Init+0xd4>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2108      	movs	r1, #8
 800195e:	481d      	ldr	r0, [pc, #116]	@ (80019d4 <MX_GPIO_Init+0xd8>)
 8001960:	f002 fcd6 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001964:	2304      	movs	r3, #4
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001974:	2307      	movs	r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001982:	f002 fb5b 	bl	800403c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001998:	2303      	movs	r3, #3
 800199a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a6:	f002 fb49 	bl	800403c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80019aa:	2308      	movs	r3, #8
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <MX_GPIO_Init+0xd8>)
 80019c2:	f002 fb3b 	bl	800403c <HAL_GPIO_Init>

}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000400 	.word	0x48000400

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b096      	sub	sp, #88	@ 0x58
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2244      	movs	r2, #68	@ 0x44
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00a fff8 	bl	800c9dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019fe:	f002 fcd7 	bl	80043b0 <HAL_PWREx_ControlVoltageScaling>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a08:	f7ff fdea 	bl	80015e0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a0c:	f002 fcb2 	bl	8004374 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <SystemClock_Config+0xc0>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a16:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <SystemClock_Config+0xc0>)
 8001a18:	f023 0318 	bic.w	r3, r3, #24
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a20:	2314      	movs	r3, #20
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a30:	2360      	movs	r3, #96	@ 0x60
 8001a32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a40:	2310      	movs	r3, #16
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a44:	2307      	movs	r3, #7
 8001a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fd01 	bl	800445c <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a60:	f7ff fdbe 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 f901 	bl	8004c84 <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a88:	f7ff fdaa 	bl	80015e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a8c:	f003 fd46 	bl	800551c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a90:	bf00      	nop
 8001a92:	3758      	adds	r7, #88	@ 0x58
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_MspInit+0x4c>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	f06f 0001 	mvn.w	r0, #1
 8001ada:	f002 f80f 	bl	8003afc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	@ 0x38
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001afa:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_InitTick+0xe0>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afe:	4a33      	ldr	r2, [pc, #204]	@ (8001bcc <HAL_InitTick+0xe0>)
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b06:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_InitTick+0xe0>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b12:	f107 0210 	add.w	r2, r7, #16
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fa75 	bl	800500c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b2c:	f003 fa42 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8001b30:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b32:	e004      	b.n	8001b3e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b34:	f003 fa3e 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b40:	4a23      	ldr	r2, [pc, #140]	@ (8001bd0 <HAL_InitTick+0xe4>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0c9b      	lsrs	r3, r3, #18
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b4e:	4a22      	ldr	r2, [pc, #136]	@ (8001bd8 <HAL_InitTick+0xec>)
 8001b50:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b58:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001b72:	4818      	ldr	r0, [pc, #96]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b74:	f003 fdd4 	bl	8005720 <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11b      	bne.n	8001bbe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001b86:	4813      	ldr	r0, [pc, #76]	@ (8001bd4 <HAL_InitTick+0xe8>)
 8001b88:	f003 fe22 	bl	80057d0 <HAL_TIM_Base_Start_IT>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d111      	bne.n	8001bbe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b9a:	2037      	movs	r0, #55	@ 0x37
 8001b9c:	f001 ffca 	bl	8003b34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	d808      	bhi.n	8001bb8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	2037      	movs	r0, #55	@ 0x37
 8001bac:	f001 ffa6 	bl	8003afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_InitTick+0xf0>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e002      	b.n	8001bbe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3738      	adds	r7, #56	@ 0x38
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	20000f24 	.word	0x20000f24
 8001bd8:	40001400 	.word	0x40001400
 8001bdc:	20000004 	.word	0x20000004

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <NMI_Handler+0x4>

08001be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA1_Channel1_IRQHandler+0x10>)
 8001c1e:	f002 f92e 	bl	8003e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000edc 	.word	0x20000edc

08001c2c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <ADC1_IRQHandler+0x10>)
 8001c32:	f000 febf 	bl	80029b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000e78 	.word	0x20000e78

08001c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <USART1_IRQHandler+0x10>)
 8001c46:	f005 f8bb 	bl	8006dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000fc0 	.word	0x20000fc0

08001c54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <TIM7_IRQHandler+0x10>)
 8001c5a:	f003 ffd5 	bl	8005c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000f24 	.word	0x20000f24

08001c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return 1;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_kill>:

int _kill(int pid, int sig)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c82:	f00a ff6d 	bl	800cb60 <__errno>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2216      	movs	r2, #22
 8001c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_exit>:

void _exit (int status)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffe7 	bl	8001c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001caa:	bf00      	nop
 8001cac:	e7fd      	b.n	8001caa <_exit+0x12>

08001cae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e00a      	b.n	8001cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc0:	f3af 8000 	nop.w
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbf0      	blt.n	8001cc0 <_read+0x12>
  }

  return len;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e009      	b.n	8001d0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	60ba      	str	r2, [r7, #8]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbf1      	blt.n	8001cfa <_write+0x12>
  }
  return len;
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_close>:

int _close(int file)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d48:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_isatty>:

int _isatty(int file)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f00a fed2 	bl	800cb60 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000c000 	.word	0x2000c000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	20000f70 	.word	0x20000f70
 8001df0:	20003550 	.word	0x20003550

08001df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b09a      	sub	sp, #104	@ 0x68
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
 8001e4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	222c      	movs	r2, #44	@ 0x2c
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00a fdc2 	bl	800c9dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e58:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e5a:	4a50      	ldr	r2, [pc, #320]	@ (8001f9c <MX_TIM1_Init+0x184>)
 8001e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e60:	224f      	movs	r2, #79	@ 0x4f
 8001e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b4c      	ldr	r3, [pc, #304]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e6c:	2263      	movs	r2, #99	@ 0x63
 8001e6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b49      	ldr	r3, [pc, #292]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e76:	4b48      	ldr	r3, [pc, #288]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7c:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e82:	4845      	ldr	r0, [pc, #276]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001e84:	f003 fc4c 	bl	8005720 <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e8e:	f7ff fba7 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e96:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e98:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	483e      	ldr	r0, [pc, #248]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001ea0:	f004 f8ce 	bl	8006040 <HAL_TIM_ConfigClockSource>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001eaa:	f7ff fb99 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eae:	483a      	ldr	r0, [pc, #232]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001eb0:	f003 fce2 	bl	8005878 <HAL_TIM_PWM_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001eba:	f7ff fb91 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4831      	ldr	r0, [pc, #196]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001ed2:	f004 fd55 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001edc:	f7ff fb80 	bl	80015e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee0:	2360      	movs	r3, #96	@ 0x60
 8001ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4824      	ldr	r0, [pc, #144]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001f06:	f003 ff87 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001f10:	f7ff fb66 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f18:	2204      	movs	r2, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481e      	ldr	r0, [pc, #120]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001f1e:	f003 ff7b 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001f28:	f7ff fb5a 	bl	80015e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f30:	2208      	movs	r2, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001f36:	f003 ff6f 	bl	8005e18 <HAL_TIM_PWM_ConfigChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001f40:	f7ff fb4e 	bl	80015e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001f7a:	f004 fd67 	bl	8006a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001f84:	f7ff fb2c 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f88:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <MX_TIM1_Init+0x180>)
 8001f8a:	f000 f829 	bl	8001fe0 <HAL_TIM_MspPostInit>

}
 8001f8e:	bf00      	nop
 8001f90:	3768      	adds	r7, #104	@ 0x68
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000f74 	.word	0x20000f74
 8001f9c:	40012c00 	.word	0x40012c00

08001fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x38>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10b      	bne.n	8001fca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_TIM_Base_MspInit+0x3c>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <HAL_TIM_Base_MspInit+0x3c>)
 8001fb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <HAL_TIM_Base_MspInit+0x3c>)
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <HAL_TIM_MspPostInit+0x68>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d11d      	bne.n	800203e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_TIM_MspPostInit+0x6c>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_TIM_MspPostInit+0x6c>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <HAL_TIM_MspPostInit+0x6c>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED1_PWM_White_Pin|LED2_PWM_Green_Pin|LED3_PWM_Red_Pin;
 800201a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800201e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002028:	2302      	movs	r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800202c:	2301      	movs	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203a:	f001 ffff 	bl	800403c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40021000 	.word	0x40021000

08002050 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 8002056:	4a15      	ldr	r2, [pc, #84]	@ (80020ac <MX_USART1_UART_Init+0x5c>)
 8002058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800205a:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_USART1_UART_Init+0x58>)
 8002094:	f004 fd70 	bl	8006b78 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800209e:	f7ff fa9f 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000fc0 	.word	0x20000fc0
 80020ac:	40013800 	.word	0x40013800

080020b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b09e      	sub	sp, #120	@ 0x78
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	2254      	movs	r2, #84	@ 0x54
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f00a fc83 	bl	800c9dc <memset>
  if(uartHandle->Instance==USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a22      	ldr	r2, [pc, #136]	@ (8002164 <HAL_UART_MspInit+0xb4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d13d      	bne.n	800215c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020e4:	2300      	movs	r3, #0
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 f81f 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f8:	f7ff fa72 	bl	80015e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_UART_MspInit+0xb8>)
 80020fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_UART_MspInit+0xb8>)
 8002102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002106:	6613      	str	r3, [r2, #96]	@ 0x60
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_UART_MspInit+0xb8>)
 800210a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <HAL_UART_MspInit+0xb8>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002118:	4a13      	ldr	r2, [pc, #76]	@ (8002168 <HAL_UART_MspInit+0xb8>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <HAL_UART_MspInit+0xb8>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800212c:	23c0      	movs	r3, #192	@ 0xc0
 800212e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800213c:	2307      	movs	r3, #7
 800213e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002144:	4619      	mov	r1, r3
 8002146:	4809      	ldr	r0, [pc, #36]	@ (800216c <HAL_UART_MspInit+0xbc>)
 8002148:	f001 ff78 	bl	800403c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2105      	movs	r1, #5
 8002150:	2025      	movs	r0, #37	@ 0x25
 8002152:	f001 fcd3 	bl	8003afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002156:	2025      	movs	r0, #37	@ 0x25
 8002158:	f001 fcec 	bl	8003b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800215c:	bf00      	nop
 800215e:	3778      	adds	r7, #120	@ 0x78
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40013800 	.word	0x40013800
 8002168:	40021000 	.word	0x40021000
 800216c:	48000400 	.word	0x48000400

08002170 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217a:	2003      	movs	r0, #3
 800217c:	f001 fcb3 	bl	8003ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002180:	200f      	movs	r0, #15
 8002182:	f7ff fcb3 	bl	8001aec <HAL_InitTick>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	e001      	b.n	8002196 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002192:	f7ff fc83 	bl	8001a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002196:	79fb      	ldrb	r3, [r7, #7]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20001048 	.word	0x20001048

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20001048 	.word	0x20001048

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff ffee 	bl	80021c8 <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffde 	bl	80021c8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000008 	.word	0x20000008

08002228 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	609a      	str	r2, [r3, #8]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3360      	adds	r3, #96	@ 0x60
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <LL_ADC_SetOffset+0x44>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	4313      	orrs	r3, r2
 80022c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	03fff000 	.word	0x03fff000

080022d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3360      	adds	r3, #96	@ 0x60
 80022e6:	461a      	mov	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3360      	adds	r3, #96	@ 0x60
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	431a      	orrs	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3330      	adds	r3, #48	@ 0x30
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	4413      	add	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	211f      	movs	r1, #31
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 011f 	and.w	r1, r3, #31
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	431a      	orrs	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3314      	adds	r3, #20
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	0e5b      	lsrs	r3, r3, #25
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0d1b      	lsrs	r3, r3, #20
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2107      	movs	r1, #7
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0d1b      	lsrs	r3, r3, #20
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	431a      	orrs	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0318 	and.w	r3, r3, #24
 8002456:	4908      	ldr	r1, [pc, #32]	@ (8002478 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002458:	40d9      	lsrs	r1, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	400b      	ands	r3, r1
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	0007ffff 	.word	0x0007ffff

0800247c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800248c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6093      	str	r3, [r2, #8]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024b4:	d101      	bne.n	80024ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002504:	d101      	bne.n	800250a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002528:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002550:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002554:	f043 0202 	orr.w	r2, r3, #2
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <LL_ADC_IsEnabled+0x18>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <LL_ADC_IsEnabled+0x1a>
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d101      	bne.n	80025a6 <LL_ADC_IsDisableOngoing+0x18>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LL_ADC_IsDisableOngoing+0x1a>
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d101      	bne.n	80025f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b08      	cmp	r3, #8
 8002614:	d101      	bne.n	800261a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e126      	b.n	8002890 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff f8b7 	bl	80017c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff19 	bl	80024a0 <LL_ADC_IsDeepPowerDownEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff feff 	bl	800247c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff34 	bl	80024f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d115      	bne.n	80026ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff18 	bl	80024c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002698:	4b7f      	ldr	r3, [pc, #508]	@ (8002898 <HAL_ADC_Init+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	4a7f      	ldr	r2, [pc, #508]	@ (800289c <HAL_ADC_Init+0x274>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff16 	bl	80024f0 <LL_ADC_IsInternalRegulatorEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff76 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 80026f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 80bf 	bne.w	800287e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80bb 	bne.w	800287e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002710:	f043 0202 	orr.w	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff23 	bl	8002568 <LL_ADC_IsEnabled>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002728:	485d      	ldr	r0, [pc, #372]	@ (80028a0 <HAL_ADC_Init+0x278>)
 800272a:	f7ff ff1d 	bl	8002568 <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4619      	mov	r1, r3
 800273a:	485a      	ldr	r0, [pc, #360]	@ (80028a4 <HAL_ADC_Init+0x27c>)
 800273c:	f7ff fd74 	bl	8002228 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7e5b      	ldrb	r3, [r3, #25]
 8002744:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800274a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002750:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002756:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800275e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d106      	bne.n	800277c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	3b01      	subs	r3, #1
 8002774:	045b      	lsls	r3, r3, #17
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <HAL_ADC_Init+0x280>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff26 	bl	8002602 <LL_ADC_INJ_IsConversionOngoing>
 80027b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d13d      	bne.n	800283a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d13a      	bne.n	800283a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027e0:	f023 0302 	bic.w	r3, r3, #2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	69b9      	ldr	r1, [r7, #24]
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d118      	bne.n	800282a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800281a:	430a      	orrs	r2, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	e007      	b.n	800283a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10c      	bne.n	800285c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f023 010f 	bic.w	r1, r3, #15
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
 800285a:	e007      	b.n	800286c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 020f 	bic.w	r2, r2, #15
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
 800287c:	e007      	b.n	800288e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800288e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000000 	.word	0x20000000
 800289c:	053e2d63 	.word	0x053e2d63
 80028a0:	50040000 	.word	0x50040000
 80028a4:	50040300 	.word	0x50040300
 80028a8:	fff0c007 	.word	0xfff0c007

080028ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe8d 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d167      	bne.n	8002998 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Start_DMA+0x2a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e063      	b.n	800299e <HAL_ADC_Start_DMA+0xf2>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fe1c 	bl	800351c <ADC_Enable>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d14f      	bne.n	800298e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	f023 0206 	bic.w	r2, r3, #6
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	659a      	str	r2, [r3, #88]	@ 0x58
 800291a:	e002      	b.n	8002922 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	4a20      	ldr	r2, [pc, #128]	@ (80029a8 <HAL_ADC_Start_DMA+0xfc>)
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <HAL_ADC_Start_DMA+0x100>)
 8002930:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002936:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <HAL_ADC_Start_DMA+0x104>)
 8002938:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	221c      	movs	r2, #28
 8002940:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0210 	orr.w	r2, r2, #16
 8002958:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3340      	adds	r3, #64	@ 0x40
 8002974:	4619      	mov	r1, r3
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f001 f9a1 	bl	8003cc0 <HAL_DMA_Start_IT>
 800297e:	4603      	mov	r3, r0
 8002980:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fe14 	bl	80025b4 <LL_ADC_REG_StartConversion>
 800298c:	e006      	b.n	800299c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002996:	e001      	b.n	800299c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002998:	2302      	movs	r3, #2
 800299a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800299c:	7dfb      	ldrb	r3, [r7, #23]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	080036e7 	.word	0x080036e7
 80029ac:	080037bf 	.word	0x080037bf
 80029b0:	080037db 	.word	0x080037db

080029b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d017      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x56>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d012      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 ffbb 	bl	8003978 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2202      	movs	r2, #2
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_ADC_IRQHandler+0x6a>
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d05e      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d059      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fc73 	bl	800233a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d03e      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d135      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d12e      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fdac 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11a      	bne.n	8002ac0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 020c 	bic.w	r2, r2, #12
 8002a98:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d112      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002abe:	e00b      	b.n	8002ad8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f005 fbbf 	bl	800825c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_ADC_IRQHandler+0x146>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d072      	beq.n	8002bea <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d06d      	beq.n	8002bea <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fc44 	bl	80023b8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b30:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fbff 	bl	800233a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b3c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d047      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_ADC_IRQHandler+0x1b2>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d03f      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d13a      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b70:	2b40      	cmp	r3, #64	@ 0x40
 8002b72:	d133      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d12e      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fd3d 	bl	8002602 <LL_ADC_INJ_IsConversionOngoing>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b9c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d112      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bc2:	e00b      	b.n	8002bdc <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fea3 	bl	8003928 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2260      	movs	r2, #96	@ 0x60
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d011      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x264>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f890 	bl	8002d30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x294>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c30:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fe89 	bl	8003950 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <HAL_ADC_IRQHandler+0x2c4>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fe7b 	bl	8003964 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d02a      	beq.n	8002cd8 <HAL_ADC_IRQHandler+0x324>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d025      	beq.n	8002cd8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	e008      	b.n	8002cac <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	f043 0202 	orr.w	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f83a 	bl	8002d44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <HAL_ADC_IRQHandler+0x360>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f043 0208 	orr.w	r2, r3, #8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fe14 	bl	800393c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d14:	bf00      	nop
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b0b6      	sub	sp, #216	@ 0xd8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x22>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e3bb      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x79a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fc28 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 83a0 	bne.w	80034d4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d824      	bhi.n	8002dee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	3b02      	subs	r3, #2
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d81b      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x8e>
 8002dae:	a201      	add	r2, pc, #4	@ (adr r2, 8002db4 <HAL_ADC_ConfigChannel+0x5c>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dcd 	.word	0x08002dcd
 8002dbc:	08002dd5 	.word	0x08002dd5
 8002dc0:	08002ddd 	.word	0x08002ddd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002dc4:	230c      	movs	r3, #12
 8002dc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dca:	e010      	b.n	8002dee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002dcc:	2312      	movs	r3, #18
 8002dce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dd2:	e00c      	b.n	8002dee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002dd4:	2318      	movs	r3, #24
 8002dd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dda:	e008      	b.n	8002dee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002de4:	e003      	b.n	8002dee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002de6:	2306      	movs	r3, #6
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002dfc:	f7ff fab0 	bl	8002360 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fbe9 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 8002e0a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fbf5 	bl	8002602 <LL_ADC_INJ_IsConversionOngoing>
 8002e18:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 81a4 	bne.w	800316e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 819f 	bne.w	800316e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f7ff face 	bl	80023de <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	08db      	lsrs	r3, r3, #3
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00a      	beq.n	8002e7a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6919      	ldr	r1, [r3, #16]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e74:	f7ff fa0c 	bl	8002290 <LL_ADC_SetOffset>
 8002e78:	e179      	b.n	800316e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fa29 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x14e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fa1e 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	0e9b      	lsrs	r3, r3, #26
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	e01e      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x18c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fa13 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ec4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ecc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e004      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1a4>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	e018      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x1d6>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e004      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d106      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f9e2 	bl	8002304 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff f9c6 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x214>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff f9bb 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002f62:	4603      	mov	r3, r0
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	e01e      	b.n	8002faa <HAL_ADC_ConfigChannel+0x252>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f9b0 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e004      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x26a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	e018      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x29c>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e004      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d106      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f97f 	bl	8002304 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2102      	movs	r1, #2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff f963 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x2da>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f958 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	e01e      	b.n	8003070 <HAL_ADC_ConfigChannel+0x318>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2102      	movs	r1, #2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f94d 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003050:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003054:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003058:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e004      	b.n	800306e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x330>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	e014      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x35a>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800309c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e004      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80030a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d106      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f920 	bl	8002304 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2103      	movs	r1, #3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f904 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x398>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2103      	movs	r1, #3
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff f8f9 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 021f 	and.w	r2, r3, #31
 80030ee:	e017      	b.n	8003120 <HAL_ADC_ConfigChannel+0x3c8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2103      	movs	r1, #3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f8ee 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800310a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800310c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003112:	2320      	movs	r3, #32
 8003114:	e003      	b.n	800311e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x3e0>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	e011      	b.n	800315c <HAL_ADC_ConfigChannel+0x404>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003148:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800314a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003154:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800315c:	429a      	cmp	r2, r3
 800315e:	d106      	bne.n	800316e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	2103      	movs	r1, #3
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff f8cb 	bl	8002304 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f9f8 	bl	8002568 <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 8140 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	461a      	mov	r2, r3
 800318e:	f7ff f951 	bl	8002434 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4a8f      	ldr	r2, [pc, #572]	@ (80033d4 <HAL_ADC_ConfigChannel+0x67c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	f040 8131 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x46e>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	0e9b      	lsrs	r3, r3, #26
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	bf94      	ite	ls
 80031be:	2301      	movls	r3, #1
 80031c0:	2300      	movhi	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	e019      	b.n	80031fa <HAL_ADC_ConfigChannel+0x4a2>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e003      	b.n	80031ea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	bf94      	ite	ls
 80031f4:	2301      	movls	r3, #1
 80031f6:	2300      	movhi	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d079      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d107      	bne.n	800321a <HAL_ADC_ConfigChannel+0x4c2>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	3301      	adds	r3, #1
 8003212:	069b      	lsls	r3, r3, #26
 8003214:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003218:	e015      	b.n	8003246 <HAL_ADC_ConfigChannel+0x4ee>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800322a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800322c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3301      	adds	r3, #1
 8003240:	069b      	lsls	r3, r3, #26
 8003242:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x50e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	3301      	adds	r3, #1
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	e017      	b.n	8003296 <HAL_ADC_ConfigChannel+0x53e>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003276:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e003      	b.n	800328a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3301      	adds	r3, #1
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	ea42 0103 	orr.w	r1, r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x564>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 021f 	and.w	r2, r3, #31
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	051b      	lsls	r3, r3, #20
 80032ba:	e018      	b.n	80032ee <HAL_ADC_ConfigChannel+0x596>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80032d4:	2320      	movs	r3, #32
 80032d6:	e003      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 021f 	and.w	r2, r3, #31
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ee:	430b      	orrs	r3, r1
 80032f0:	e081      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_ADC_ConfigChannel+0x5b6>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	3301      	adds	r3, #1
 8003306:	069b      	lsls	r3, r3, #26
 8003308:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800330c:	e015      	b.n	800333a <HAL_ADC_ConfigChannel+0x5e2>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e003      	b.n	8003332 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800332a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	3301      	adds	r3, #1
 8003334:	069b      	lsls	r3, r3, #26
 8003336:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_ADC_ConfigChannel+0x602>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	e017      	b.n	800338a <HAL_ADC_ConfigChannel+0x632>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	61bb      	str	r3, [r7, #24]
  return result;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003372:	2320      	movs	r3, #32
 8003374:	e003      	b.n	800337e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	ea42 0103 	orr.w	r1, r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x65e>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	3b1e      	subs	r3, #30
 80033ae:	051b      	lsls	r3, r3, #20
 80033b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033b4:	e01e      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x69c>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	60fb      	str	r3, [r7, #12]
  return result;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e006      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x688>
 80033d2:	bf00      	nop
 80033d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f003 021f 	and.w	r2, r3, #31
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	3b1e      	subs	r3, #30
 80033ee:	051b      	lsls	r3, r3, #20
 80033f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7fe ffef 	bl	80023de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <HAL_ADC_ConfigChannel+0x7a4>)
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d06c      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340c:	483c      	ldr	r0, [pc, #240]	@ (8003500 <HAL_ADC_ConfigChannel+0x7a8>)
 800340e:	f7fe ff31 	bl	8002274 <LL_ADC_GetCommonPathInternalCh>
 8003412:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a3a      	ldr	r2, [pc, #232]	@ (8003504 <HAL_ADC_ConfigChannel+0x7ac>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d127      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d121      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a35      	ldr	r2, [pc, #212]	@ (8003508 <HAL_ADC_ConfigChannel+0x7b0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d157      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800343a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800343e:	4619      	mov	r1, r3
 8003440:	482f      	ldr	r0, [pc, #188]	@ (8003500 <HAL_ADC_ConfigChannel+0x7a8>)
 8003442:	f7fe ff04 	bl	800224e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003446:	4b31      	ldr	r3, [pc, #196]	@ (800350c <HAL_ADC_ConfigChannel+0x7b4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	4a30      	ldr	r2, [pc, #192]	@ (8003510 <HAL_ADC_ConfigChannel+0x7b8>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003460:	e002      	b.n	8003468 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3b01      	subs	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800346e:	e03a      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a27      	ldr	r2, [pc, #156]	@ (8003514 <HAL_ADC_ConfigChannel+0x7bc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d113      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800347a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800347e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <HAL_ADC_ConfigChannel+0x7b0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d12a      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003494:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003498:	4619      	mov	r1, r3
 800349a:	4819      	ldr	r0, [pc, #100]	@ (8003500 <HAL_ADC_ConfigChannel+0x7a8>)
 800349c:	f7fe fed7 	bl	800224e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a0:	e021      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <HAL_ADC_ConfigChannel+0x7c0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d11c      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a12      	ldr	r2, [pc, #72]	@ (8003508 <HAL_ADC_ConfigChannel+0x7b0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ca:	4619      	mov	r1, r3
 80034cc:	480c      	ldr	r0, [pc, #48]	@ (8003500 <HAL_ADC_ConfigChannel+0x7a8>)
 80034ce:	f7fe febe 	bl	800224e <LL_ADC_SetCommonPathInternalCh>
 80034d2:	e008      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	37d8      	adds	r7, #216	@ 0xd8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	80080000 	.word	0x80080000
 8003500:	50040300 	.word	0x50040300
 8003504:	c7520000 	.word	0xc7520000
 8003508:	50040000 	.word	0x50040000
 800350c:	20000000 	.word	0x20000000
 8003510:	053e2d63 	.word	0x053e2d63
 8003514:	cb840000 	.word	0xcb840000
 8003518:	80000001 	.word	0x80000001

0800351c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff f81b 	bl	8002568 <LL_ADC_IsEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d169      	bne.n	800360c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <ADC_Enable+0xfc>)
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e055      	b.n	800360e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe ffd6 	bl	8002518 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800356c:	482b      	ldr	r0, [pc, #172]	@ (800361c <ADC_Enable+0x100>)
 800356e:	f7fe fe81 	bl	8002274 <LL_ADC_GetCommonPathInternalCh>
 8003572:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003574:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800357c:	4b28      	ldr	r3, [pc, #160]	@ (8003620 <ADC_Enable+0x104>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	4a28      	ldr	r2, [pc, #160]	@ (8003624 <ADC_Enable+0x108>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003596:	e002      	b.n	800359e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3b01      	subs	r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f9      	bne.n	8003598 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035a4:	f7fe fe10 	bl	80021c8 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035aa:	e028      	b.n	80035fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe ffd9 	bl	8002568 <LL_ADC_IsEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe ffa9 	bl	8002518 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035c6:	f7fe fdff 	bl	80021c8 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d914      	bls.n	80035fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d00d      	beq.n	80035fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e007      	b.n	800360e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d1cf      	bne.n	80035ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	8000003f 	.word	0x8000003f
 800361c:	50040300 	.word	0x50040300
 8003620:	20000000 	.word	0x20000000
 8003624:	053e2d63 	.word	0x053e2d63

08003628 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe ffaa 	bl	800258e <LL_ADC_IsDisableOngoing>
 800363a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe ff91 	bl	8002568 <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d047      	beq.n	80036dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d144      	bne.n	80036dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030d 	and.w	r3, r3, #13
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10c      	bne.n	800367a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe ff6b 	bl	8002540 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2203      	movs	r2, #3
 8003670:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003672:	f7fe fda9 	bl	80021c8 <HAL_GetTick>
 8003676:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003678:	e029      	b.n	80036ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e023      	b.n	80036de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003696:	f7fe fd97 	bl	80021c8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d914      	bls.n	80036ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b6:	f043 0210 	orr.w	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1dc      	bne.n	8003696 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d14b      	bne.n	8003798 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d021      	beq.n	800375e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fe0b 	bl	800233a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d032      	beq.n	8003790 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d12b      	bne.n	8003790 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11f      	bne.n	8003790 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54
 800375c:	e018      	b.n	8003790 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d111      	bne.n	8003790 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f004 fd63 	bl	800825c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003796:	e00e      	b.n	80037b6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff facd 	bl	8002d44 <HAL_ADC_ErrorCallback>
}
 80037aa:	e004      	b.n	80037b6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff faa5 	bl	8002d1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fa9f 	bl	8002d44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <LL_ADC_StartCalibration>:
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003820:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800382a:	4313      	orrs	r3, r2
 800382c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_IsCalibrationOnGoing>:
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003854:	d101      	bne.n	800385a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_ADCEx_Calibration_Start+0x1c>
 8003880:	2302      	movs	r3, #2
 8003882:	e04d      	b.n	8003920 <HAL_ADCEx_Calibration_Start+0xb8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fecb 	bl	8003628 <ADC_Disable>
 8003892:	4603      	mov	r3, r0
 8003894:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d136      	bne.n	800390a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038a4:	f023 0302 	bic.w	r3, r3, #2
 80038a8:	f043 0202 	orr.w	r2, r3, #2
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ffa9 	bl	800380e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038bc:	e014      	b.n	80038e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80038ca:	d30d      	bcc.n	80038e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f023 0312 	bic.w	r3, r3, #18
 80038d4:	f043 0210 	orr.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e01b      	b.n	8003920 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ffa7 	bl	8003840 <LL_ADC_IsCalibrationOnGoing>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e2      	bne.n	80038be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fc:	f023 0303 	bic.w	r3, r3, #3
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54
 8003908:	e005      	b.n	8003916 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f043 0210 	orr.w	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800399c:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <__NVIC_SetPriorityGrouping+0x44>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039a8:	4013      	ands	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039be:	4a04      	ldr	r2, [pc, #16]	@ (80039d0 <__NVIC_SetPriorityGrouping+0x44>)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	60d3      	str	r3, [r2, #12]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <__NVIC_GetPriorityGrouping+0x18>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	f003 0307 	and.w	r3, r3, #7
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	db0b      	blt.n	8003a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	f003 021f 	and.w	r2, r3, #31
 8003a08:	4907      	ldr	r1, [pc, #28]	@ (8003a28 <__NVIC_EnableIRQ+0x38>)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2001      	movs	r0, #1
 8003a12:	fa00 f202 	lsl.w	r2, r0, r2
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000e100 	.word	0xe000e100

08003a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db0a      	blt.n	8003a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	@ (8003a78 <__NVIC_SetPriority+0x4c>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a54:	e00a      	b.n	8003a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4908      	ldr	r1, [pc, #32]	@ (8003a7c <__NVIC_SetPriority+0x50>)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3b04      	subs	r3, #4
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	440b      	add	r3, r1
 8003a6a:	761a      	strb	r2, [r3, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	bf28      	it	cs
 8003a9e:	2304      	movcs	r3, #4
 8003aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d902      	bls.n	8003ab0 <NVIC_EncodePriority+0x30>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3b03      	subs	r3, #3
 8003aae:	e000      	b.n	8003ab2 <NVIC_EncodePriority+0x32>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43d9      	mvns	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	4313      	orrs	r3, r2
         );
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3724      	adds	r7, #36	@ 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ff4c 	bl	800398c <__NVIC_SetPriorityGrouping>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b0e:	f7ff ff61 	bl	80039d4 <__NVIC_GetPriorityGrouping>
 8003b12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	6978      	ldr	r0, [r7, #20]
 8003b1a:	f7ff ffb1 	bl	8003a80 <NVIC_EncodePriority>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ff80 	bl	8003a2c <__NVIC_SetPriority>
}
 8003b2c:	bf00      	nop
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff54 	bl	80039f0 <__NVIC_EnableIRQ>
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e098      	b.n	8003c94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca0 <HAL_DMA_Init+0x150>)
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d80f      	bhi.n	8003b8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b4b      	ldr	r3, [pc, #300]	@ (8003ca4 <HAL_DMA_Init+0x154>)
 8003b76:	4413      	add	r3, r2
 8003b78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca8 <HAL_DMA_Init+0x158>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	009a      	lsls	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a48      	ldr	r2, [pc, #288]	@ (8003cac <HAL_DMA_Init+0x15c>)
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b8c:	e00e      	b.n	8003bac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b46      	ldr	r3, [pc, #280]	@ (8003cb0 <HAL_DMA_Init+0x160>)
 8003b96:	4413      	add	r3, r2
 8003b98:	4a43      	ldr	r2, [pc, #268]	@ (8003ca8 <HAL_DMA_Init+0x158>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	009a      	lsls	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a42      	ldr	r2, [pc, #264]	@ (8003cb4 <HAL_DMA_Init+0x164>)
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c06:	d039      	beq.n	8003c7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	4a27      	ldr	r2, [pc, #156]	@ (8003cac <HAL_DMA_Init+0x15c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d11a      	bne.n	8003c48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c12:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <HAL_DMA_Init+0x168>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f003 031c 	and.w	r3, r3, #28
 8003c1e:	210f      	movs	r1, #15
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	4924      	ldr	r1, [pc, #144]	@ (8003cb8 <HAL_DMA_Init+0x168>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c2c:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <HAL_DMA_Init+0x168>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c38:	f003 031c 	and.w	r3, r3, #28
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	491d      	ldr	r1, [pc, #116]	@ (8003cb8 <HAL_DMA_Init+0x168>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
 8003c46:	e019      	b.n	8003c7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c48:	4b1c      	ldr	r3, [pc, #112]	@ (8003cbc <HAL_DMA_Init+0x16c>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c50:	f003 031c 	and.w	r3, r3, #28
 8003c54:	210f      	movs	r1, #15
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	4917      	ldr	r1, [pc, #92]	@ (8003cbc <HAL_DMA_Init+0x16c>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c62:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <HAL_DMA_Init+0x16c>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f003 031c 	and.w	r3, r3, #28
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	4911      	ldr	r1, [pc, #68]	@ (8003cbc <HAL_DMA_Init+0x16c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40020407 	.word	0x40020407
 8003ca4:	bffdfff8 	.word	0xbffdfff8
 8003ca8:	cccccccd 	.word	0xcccccccd
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	bffdfbf8 	.word	0xbffdfbf8
 8003cb4:	40020400 	.word	0x40020400
 8003cb8:	400200a8 	.word	0x400200a8
 8003cbc:	400204a8 	.word	0x400204a8

08003cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_DMA_Start_IT+0x20>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e04b      	b.n	8003d78 <HAL_DMA_Start_IT+0xb8>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d13a      	bne.n	8003d6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68b9      	ldr	r1, [r7, #8]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f95f 	bl	8003fdc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 020e 	orr.w	r2, r2, #14
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e00f      	b.n	8003d58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 020a 	orr.w	r2, r2, #10
 8003d56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e005      	b.n	8003d76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
 8003d74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d008      	beq.n	8003daa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020e 	bic.w	r2, r2, #14
 8003db8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f003 021c 	and.w	r2, r3, #28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d005      	beq.n	8003e20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2204      	movs	r2, #4
 8003e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	e029      	b.n	8003e74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 020e 	bic.w	r2, r2, #14
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e44:	f003 021c 	and.w	r2, r3, #28
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
    }
  }
  return status;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	f003 031c 	and.w	r3, r3, #28
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d026      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x7a>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d021      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0204 	bic.w	r2, r2, #4
 8003ed0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	f003 021c 	and.w	r2, r3, #28
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2104      	movs	r1, #4
 8003ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d071      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ef6:	e06c      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efc:	f003 031c 	and.w	r3, r3, #28
 8003f00:	2202      	movs	r2, #2
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02e      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xec>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d029      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 020a 	bic.w	r2, r2, #10
 8003f32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	f003 021c 	and.w	r2, r3, #28
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	2102      	movs	r1, #2
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d038      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f68:	e033      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f003 031c 	and.w	r3, r3, #28
 8003f72:	2208      	movs	r2, #8
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d02a      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x156>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d025      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 020e 	bic.w	r2, r2, #14
 8003f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9c:	f003 021c 	and.w	r2, r3, #28
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003faa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
}
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f003 021c 	and.w	r2, r3, #28
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b10      	cmp	r3, #16
 800400c:	d108      	bne.n	8004020 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800401e:	e007      	b.n	8004030 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404a:	e148      	b.n	80042de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 813a 	beq.w	80042d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d005      	beq.n	800407c <HAL_GPIO_Init+0x40>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d130      	bne.n	80040de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040b2:	2201      	movs	r2, #1
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 0201 	and.w	r2, r3, #1
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d017      	beq.n	800411a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2203      	movs	r2, #3
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d123      	bne.n	800416e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	08da      	lsrs	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3208      	adds	r2, #8
 800412e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	220f      	movs	r2, #15
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	08da      	lsrs	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3208      	adds	r2, #8
 8004168:	6939      	ldr	r1, [r7, #16]
 800416a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	2203      	movs	r2, #3
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0203 	and.w	r2, r3, #3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8094 	beq.w	80042d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b0:	4b52      	ldr	r3, [pc, #328]	@ (80042fc <HAL_GPIO_Init+0x2c0>)
 80041b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b4:	4a51      	ldr	r2, [pc, #324]	@ (80042fc <HAL_GPIO_Init+0x2c0>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80041bc:	4b4f      	ldr	r3, [pc, #316]	@ (80042fc <HAL_GPIO_Init+0x2c0>)
 80041be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041c8:	4a4d      	ldr	r2, [pc, #308]	@ (8004300 <HAL_GPIO_Init+0x2c4>)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	3302      	adds	r3, #2
 80041d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	220f      	movs	r2, #15
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041f2:	d00d      	beq.n	8004210 <HAL_GPIO_Init+0x1d4>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a43      	ldr	r2, [pc, #268]	@ (8004304 <HAL_GPIO_Init+0x2c8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <HAL_GPIO_Init+0x1d0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a42      	ldr	r2, [pc, #264]	@ (8004308 <HAL_GPIO_Init+0x2cc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_GPIO_Init+0x1cc>
 8004204:	2302      	movs	r3, #2
 8004206:	e004      	b.n	8004212 <HAL_GPIO_Init+0x1d6>
 8004208:	2307      	movs	r3, #7
 800420a:	e002      	b.n	8004212 <HAL_GPIO_Init+0x1d6>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <HAL_GPIO_Init+0x1d6>
 8004210:	2300      	movs	r3, #0
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	f002 0203 	and.w	r2, r2, #3
 8004218:	0092      	lsls	r2, r2, #2
 800421a:	4093      	lsls	r3, r2
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004222:	4937      	ldr	r1, [pc, #220]	@ (8004300 <HAL_GPIO_Init+0x2c4>)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	089b      	lsrs	r3, r3, #2
 8004228:	3302      	adds	r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004230:	4b36      	ldr	r3, [pc, #216]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43db      	mvns	r3, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4013      	ands	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004254:	4a2d      	ldr	r2, [pc, #180]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800425a:	4b2c      	ldr	r3, [pc, #176]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43db      	mvns	r3, r3
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800427e:	4a23      	ldr	r2, [pc, #140]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004284:	4b21      	ldr	r3, [pc, #132]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43db      	mvns	r3, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042a8:	4a18      	ldr	r2, [pc, #96]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80042ae:	4b17      	ldr	r3, [pc, #92]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042d2:	4a0e      	ldr	r2, [pc, #56]	@ (800430c <HAL_GPIO_Init+0x2d0>)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3301      	adds	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f aeaf 	bne.w	800404c <HAL_GPIO_Init+0x10>
  }
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40021000 	.word	0x40021000
 8004300:	40010000 	.word	0x40010000
 8004304:	48000400 	.word	0x48000400
 8004308:	48000800 	.word	0x48000800
 800430c:	40010400 	.word	0x40010400

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	4613      	mov	r3, r2
 800431e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004320:	787b      	ldrb	r3, [r7, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800432c:	e002      	b.n	8004334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4013      	ands	r3, r2
 8004358:	041a      	lsls	r2, r3, #16
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43d9      	mvns	r1, r3
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	400b      	ands	r3, r1
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004398:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <HAL_PWREx_GetVoltageRange+0x18>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40007000 	.word	0x40007000

080043b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043be:	d130      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c0:	4b23      	ldr	r3, [pc, #140]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043cc:	d038      	beq.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ce:	4b20      	ldr	r3, [pc, #128]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043de:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2232      	movs	r2, #50	@ 0x32
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004458 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f4:	e002      	b.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fc:	4b14      	ldr	r3, [pc, #80]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004408:	d102      	bne.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x60>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f2      	bne.n	80043f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004410:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441c:	d110      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00f      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004422:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442e:	d007      	beq.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004430:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004438:	4a05      	ldr	r2, [pc, #20]	@ (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800443e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40007000 	.word	0x40007000
 8004454:	20000000 	.word	0x20000000
 8004458:	431bde83 	.word	0x431bde83

0800445c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f000 bc02 	b.w	8004c74 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004470:	4b96      	ldr	r3, [pc, #600]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447a:	4b94      	ldr	r3, [pc, #592]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80e4 	beq.w	800465a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_RCC_OscConfig+0x4c>
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b0c      	cmp	r3, #12
 800449c:	f040 808b 	bne.w	80045b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	f040 8087 	bne.w	80045b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044a8:	4b88      	ldr	r3, [pc, #544]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x64>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e3d9      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	4b81      	ldr	r3, [pc, #516]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_RCC_OscConfig+0x7e>
 80044d0:	4b7e      	ldr	r3, [pc, #504]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d8:	e005      	b.n	80044e6 <HAL_RCC_OscConfig+0x8a>
 80044da:	4b7c      	ldr	r3, [pc, #496]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80044dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d223      	bcs.n	8004532 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fdbe 	bl	8005070 <RCC_SetFlashLatencyFromMSIRange>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e3ba      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fe:	4b73      	ldr	r3, [pc, #460]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a72      	ldr	r2, [pc, #456]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b70      	ldr	r3, [pc, #448]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	496d      	ldr	r1, [pc, #436]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800451c:	4b6b      	ldr	r3, [pc, #428]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	4968      	ldr	r1, [pc, #416]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	e025      	b.n	800457e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004532:	4b66      	ldr	r3, [pc, #408]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a65      	ldr	r2, [pc, #404]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004538:	f043 0308 	orr.w	r3, r3, #8
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b63      	ldr	r3, [pc, #396]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4960      	ldr	r1, [pc, #384]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800454c:	4313      	orrs	r3, r2
 800454e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004550:	4b5e      	ldr	r3, [pc, #376]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	495b      	ldr	r1, [pc, #364]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fd7e 	bl	8005070 <RCC_SetFlashLatencyFromMSIRange>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e37a      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800457e:	f000 fc81 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b51      	ldr	r3, [pc, #324]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	4950      	ldr	r1, [pc, #320]	@ (80046d0 <HAL_RCC_OscConfig+0x274>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	4a4e      	ldr	r2, [pc, #312]	@ (80046d4 <HAL_RCC_OscConfig+0x278>)
 800459c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800459e:	4b4e      	ldr	r3, [pc, #312]	@ (80046d8 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd faa2 	bl	8001aec <HAL_InitTick>
 80045a8:	4603      	mov	r3, r0
 80045aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d052      	beq.n	8004658 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	e35e      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d032      	beq.n	8004624 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045be:	4b43      	ldr	r3, [pc, #268]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a42      	ldr	r2, [pc, #264]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ca:	f7fd fdfd 	bl	80021c8 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d2:	f7fd fdf9 	bl	80021c8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e347      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e4:	4b39      	ldr	r3, [pc, #228]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f0:	4b36      	ldr	r3, [pc, #216]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a35      	ldr	r2, [pc, #212]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b33      	ldr	r3, [pc, #204]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4930      	ldr	r1, [pc, #192]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460e:	4b2f      	ldr	r3, [pc, #188]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	492b      	ldr	r1, [pc, #172]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e01a      	b.n	800465a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004624:	4b29      	ldr	r3, [pc, #164]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a28      	ldr	r2, [pc, #160]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004630:	f7fd fdca 	bl	80021c8 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004638:	f7fd fdc6 	bl	80021c8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e314      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800464a:	4b20      	ldr	r3, [pc, #128]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x1dc>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d073      	beq.n	800474e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d005      	beq.n	8004678 <HAL_RCC_OscConfig+0x21c>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d10e      	bne.n	8004690 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d10b      	bne.n	8004690 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	4b14      	ldr	r3, [pc, #80]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d063      	beq.n	800474c <HAL_RCC_OscConfig+0x2f0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d15f      	bne.n	800474c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e2f1      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d106      	bne.n	80046a8 <HAL_RCC_OscConfig+0x24c>
 800469a:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0b      	ldr	r2, [pc, #44]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e025      	b.n	80046f4 <HAL_RCC_OscConfig+0x298>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046b0:	d114      	bne.n	80046dc <HAL_RCC_OscConfig+0x280>
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a05      	ldr	r2, [pc, #20]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b03      	ldr	r3, [pc, #12]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a02      	ldr	r2, [pc, #8]	@ (80046cc <HAL_RCC_OscConfig+0x270>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e013      	b.n	80046f4 <HAL_RCC_OscConfig+0x298>
 80046cc:	40021000 	.word	0x40021000
 80046d0:	0800ee90 	.word	0x0800ee90
 80046d4:	20000000 	.word	0x20000000
 80046d8:	20000004 	.word	0x20000004
 80046dc:	4ba0      	ldr	r3, [pc, #640]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a9f      	ldr	r2, [pc, #636]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b9d      	ldr	r3, [pc, #628]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a9c      	ldr	r2, [pc, #624]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fd fd64 	bl	80021c8 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd fd60 	bl	80021c8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e2ae      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004716:	4b92      	ldr	r3, [pc, #584]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x2a8>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fd50 	bl	80021c8 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd fd4c 	bl	80021c8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e29a      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800473e:	4b88      	ldr	r3, [pc, #544]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x2d0>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d060      	beq.n	800481c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d005      	beq.n	800476c <HAL_RCC_OscConfig+0x310>
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b0c      	cmp	r3, #12
 8004764:	d119      	bne.n	800479a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d116      	bne.n	800479a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476c:	4b7c      	ldr	r3, [pc, #496]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_OscConfig+0x328>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e277      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004784:	4b76      	ldr	r3, [pc, #472]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	4973      	ldr	r1, [pc, #460]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004794:	4313      	orrs	r3, r2
 8004796:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004798:	e040      	b.n	800481c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d023      	beq.n	80047ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a2:	4b6f      	ldr	r3, [pc, #444]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6e      	ldr	r2, [pc, #440]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fd fd0b 	bl	80021c8 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b6:	f7fd fd07 	bl	80021c8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e255      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c8:	4b65      	ldr	r3, [pc, #404]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d4:	4b62      	ldr	r3, [pc, #392]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	495f      	ldr	r1, [pc, #380]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
 80047e8:	e018      	b.n	800481c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80047f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fce7 	bl	80021c8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fd fce3 	bl	80021c8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e231      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004810:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d03c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01c      	beq.n	800486a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004830:	4b4b      	ldr	r3, [pc, #300]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004836:	4a4a      	ldr	r2, [pc, #296]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd fcc2 	bl	80021c8 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004848:	f7fd fcbe 	bl	80021c8 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e20c      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485a:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 800485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ef      	beq.n	8004848 <HAL_RCC_OscConfig+0x3ec>
 8004868:	e01b      	b.n	80048a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486a:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 800486c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004870:	4a3b      	ldr	r2, [pc, #236]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fd fca5 	bl	80021c8 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004882:	f7fd fca1 	bl	80021c8 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1ef      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004894:	4b32      	ldr	r3, [pc, #200]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1ef      	bne.n	8004882 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80a6 	beq.w	80049fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b0:	2300      	movs	r3, #0
 80048b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c0:	4b27      	ldr	r3, [pc, #156]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c4:	4a26      	ldr	r2, [pc, #152]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80048c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80048cc:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d8:	2301      	movs	r3, #1
 80048da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048dc:	4b21      	ldr	r3, [pc, #132]	@ (8004964 <HAL_RCC_OscConfig+0x508>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d118      	bne.n	800491a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004964 <HAL_RCC_OscConfig+0x508>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004964 <HAL_RCC_OscConfig+0x508>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f4:	f7fd fc68 	bl	80021c8 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fc:	f7fd fc64 	bl	80021c8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1b2      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <HAL_RCC_OscConfig+0x508>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d108      	bne.n	8004934 <HAL_RCC_OscConfig+0x4d8>
 8004922:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004928:	4a0d      	ldr	r2, [pc, #52]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004932:	e029      	b.n	8004988 <HAL_RCC_OscConfig+0x52c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b05      	cmp	r3, #5
 800493a:	d115      	bne.n	8004968 <HAL_RCC_OscConfig+0x50c>
 800493c:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004942:	4a07      	ldr	r2, [pc, #28]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	4a03      	ldr	r2, [pc, #12]	@ (8004960 <HAL_RCC_OscConfig+0x504>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800495c:	e014      	b.n	8004988 <HAL_RCC_OscConfig+0x52c>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	4b9a      	ldr	r3, [pc, #616]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	4a99      	ldr	r2, [pc, #612]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004978:	4b96      	ldr	r3, [pc, #600]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	4a95      	ldr	r2, [pc, #596]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d016      	beq.n	80049be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004990:	f7fd fc1a 	bl	80021c8 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004996:	e00a      	b.n	80049ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004998:	f7fd fc16 	bl	80021c8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e162      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ae:	4b89      	ldr	r3, [pc, #548]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ed      	beq.n	8004998 <HAL_RCC_OscConfig+0x53c>
 80049bc:	e015      	b.n	80049ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049be:	f7fd fc03 	bl	80021c8 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c6:	f7fd fbff 	bl	80021c8 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e14b      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049dc:	4b7d      	ldr	r3, [pc, #500]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ed      	bne.n	80049c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f0:	4b78      	ldr	r3, [pc, #480]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f4:	4a77      	ldr	r2, [pc, #476]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 80049f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d03c      	beq.n	8004a82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01c      	beq.n	8004a4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a10:	4b70      	ldr	r3, [pc, #448]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a16:	4a6f      	ldr	r2, [pc, #444]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd fbd2 	bl	80021c8 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a28:	f7fd fbce 	bl	80021c8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e11c      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a3a:	4b66      	ldr	r3, [pc, #408]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ef      	beq.n	8004a28 <HAL_RCC_OscConfig+0x5cc>
 8004a48:	e01b      	b.n	8004a82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a4a:	4b62      	ldr	r3, [pc, #392]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a50:	4a60      	ldr	r2, [pc, #384]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd fbb5 	bl	80021c8 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fd fbb1 	bl	80021c8 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0ff      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a74:	4b57      	ldr	r3, [pc, #348]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ef      	bne.n	8004a62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80f3 	beq.w	8004c72 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	f040 80c9 	bne.w	8004c28 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a96:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 0203 	and.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d12c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d123      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d11b      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d113      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d109      	bne.n	8004b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	3b01      	subs	r3, #1
 8004afe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d06b      	beq.n	8004bdc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d062      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b0a:	4b32      	ldr	r3, [pc, #200]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e0ac      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b26:	f7fd fb4f 	bl	80021c8 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fd fb4b 	bl	80021c8 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e099      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b40:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f0      	bne.n	8004b2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b4c:	4b21      	ldr	r3, [pc, #132]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <HAL_RCC_OscConfig+0x77c>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b5c:	3a01      	subs	r2, #1
 8004b5e:	0112      	lsls	r2, r2, #4
 8004b60:	4311      	orrs	r1, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b66:	0212      	lsls	r2, r2, #8
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b6e:	0852      	lsrs	r2, r2, #1
 8004b70:	3a01      	subs	r2, #1
 8004b72:	0552      	lsls	r2, r2, #21
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b7a:	0852      	lsrs	r2, r2, #1
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	0652      	lsls	r2, r2, #25
 8004b80:	4311      	orrs	r1, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b86:	06d2      	lsls	r2, r2, #27
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	4912      	ldr	r1, [pc, #72]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b90:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0f      	ldr	r2, [pc, #60]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba8:	f7fd fb0e 	bl	80021c8 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd fb0a 	bl	80021c8 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e058      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc2:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <HAL_RCC_OscConfig+0x778>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bce:	e050      	b.n	8004c72 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e04f      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bdc:	4b27      	ldr	r3, [pc, #156]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d144      	bne.n	8004c72 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004be8:	4b24      	ldr	r3, [pc, #144]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a23      	ldr	r2, [pc, #140]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf4:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a20      	ldr	r2, [pc, #128]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c00:	f7fd fae2 	bl	80021c8 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c08:	f7fd fade 	bl	80021c8 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e02c      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	4b18      	ldr	r3, [pc, #96]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x7ac>
 8004c26:	e024      	b.n	8004c72 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d01f      	beq.n	8004c6e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a12      	ldr	r2, [pc, #72]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fac5 	bl	80021c8 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd fac1 	bl	80021c8 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e00f      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c54:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004c60:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	4905      	ldr	r1, [pc, #20]	@ (8004c7c <HAL_RCC_OscConfig+0x820>)
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_OscConfig+0x824>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60cb      	str	r3, [r1, #12]
 8004c6c:	e001      	b.n	8004c72 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	feeefffc 	.word	0xfeeefffc

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0e7      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b75      	ldr	r3, [pc, #468]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d910      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b72      	ldr	r3, [pc, #456]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 0207 	bic.w	r2, r3, #7
 8004cae:	4970      	ldr	r1, [pc, #448]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0cf      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	4b66      	ldr	r3, [pc, #408]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d908      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce4:	4b63      	ldr	r3, [pc, #396]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4960      	ldr	r1, [pc, #384]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04c      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d121      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0a6      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d22:	4b54      	ldr	r3, [pc, #336]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d115      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e09a      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e08e      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e086      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d5a:	4b46      	ldr	r3, [pc, #280]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 0203 	bic.w	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4943      	ldr	r1, [pc, #268]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6c:	f7fd fa2c 	bl	80021c8 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d74:	f7fd fa28 	bl	80021c8 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e06e      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 020c 	and.w	r2, r3, #12
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d1eb      	bne.n	8004d74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d010      	beq.n	8004dca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	4b31      	ldr	r3, [pc, #196]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d208      	bcs.n	8004dca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	492b      	ldr	r1, [pc, #172]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dca:	4b29      	ldr	r3, [pc, #164]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d210      	bcs.n	8004dfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd8:	4b25      	ldr	r3, [pc, #148]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 0207 	bic.w	r2, r3, #7
 8004de0:	4923      	ldr	r1, [pc, #140]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de8:	4b21      	ldr	r3, [pc, #132]	@ (8004e70 <HAL_RCC_ClockConfig+0x1ec>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e036      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e06:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	4918      	ldr	r1, [pc, #96]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4910      	ldr	r1, [pc, #64]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e38:	f000 f824 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	490b      	ldr	r1, [pc, #44]	@ (8004e78 <HAL_RCC_ClockConfig+0x1f4>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
 8004e54:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <HAL_RCC_ClockConfig+0x1f8>)
 8004e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_ClockConfig+0x1fc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fc fe45 	bl	8001aec <HAL_InitTick>
 8004e62:	4603      	mov	r3, r0
 8004e64:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e66:	7afb      	ldrb	r3, [r7, #11]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40022000 	.word	0x40022000
 8004e74:	40021000 	.word	0x40021000
 8004e78:	0800ee90 	.word	0x0800ee90
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	20000004 	.word	0x20000004

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	@ 0x24
 8004e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e92:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d121      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d11e      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eb8:	4b34      	ldr	r3, [pc, #208]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ec4:	4b31      	ldr	r3, [pc, #196]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d102      	bne.n	8004f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	e004      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f08:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d134      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f12:	4b1e      	ldr	r3, [pc, #120]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d003      	beq.n	8004f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d003      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0xac>
 8004f28:	e005      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f2c:	617b      	str	r3, [r7, #20]
      break;
 8004f2e:	e005      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f30:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f32:	617b      	str	r3, [r7, #20]
      break;
 8004f34:	e002      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	617b      	str	r3, [r7, #20]
      break;
 8004f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f3c:	4b13      	ldr	r3, [pc, #76]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	3301      	adds	r3, #1
 8004f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	fb03 f202 	mul.w	r2, r3, r2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	0e5b      	lsrs	r3, r3, #25
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3724      	adds	r7, #36	@ 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	0800eea8 	.word	0x0800eea8
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	007a1200 	.word	0x007a1200

08004f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000000 	.word	0x20000000

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4904      	ldr	r1, [pc, #16]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	0800eea0 	.word	0x0800eea0

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fe4:	f7ff ffda 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0adb      	lsrs	r3, r3, #11
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4904      	ldr	r1, [pc, #16]	@ (8005008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000
 8005008:	0800eea0 	.word	0x0800eea0

0800500c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	220f      	movs	r2, #15
 800501a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800501c:	4b12      	ldr	r3, [pc, #72]	@ (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0203 	and.w	r2, r3, #3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005028:	4b0f      	ldr	r3, [pc, #60]	@ (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005034:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005040:	4b09      	ldr	r3, [pc, #36]	@ (8005068 <HAL_RCC_GetClockConfig+0x5c>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	08db      	lsrs	r3, r3, #3
 8005046:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800504e:	4b07      	ldr	r3, [pc, #28]	@ (800506c <HAL_RCC_GetClockConfig+0x60>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0207 	and.w	r2, r3, #7
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	601a      	str	r2, [r3, #0]
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000
 800506c:	40022000 	.word	0x40022000

08005070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800507c:	4b2a      	ldr	r3, [pc, #168]	@ (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005088:	f7ff f984 	bl	8004394 <HAL_PWREx_GetVoltageRange>
 800508c:	6178      	str	r0, [r7, #20]
 800508e:	e014      	b.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b25      	ldr	r3, [pc, #148]	@ (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005094:	4a24      	ldr	r2, [pc, #144]	@ (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509a:	6593      	str	r3, [r2, #88]	@ 0x58
 800509c:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a8:	f7ff f974 	bl	8004394 <HAL_PWREx_GetVoltageRange>
 80050ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c0:	d10b      	bne.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b80      	cmp	r3, #128	@ 0x80
 80050c6:	d919      	bls.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80050cc:	d902      	bls.n	80050d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ce:	2302      	movs	r3, #2
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e013      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d4:	2301      	movs	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e010      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b80      	cmp	r3, #128	@ 0x80
 80050de:	d902      	bls.n	80050e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050e0:	2303      	movs	r3, #3
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e00a      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b80      	cmp	r3, #128	@ 0x80
 80050ea:	d102      	bne.n	80050f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ec:	2302      	movs	r3, #2
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e004      	b.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b70      	cmp	r3, #112	@ 0x70
 80050f6:	d101      	bne.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f8:	2301      	movs	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050fc:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 0207 	bic.w	r2, r3, #7
 8005104:	4909      	ldr	r1, [pc, #36]	@ (800512c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800510c:	4b07      	ldr	r3, [pc, #28]	@ (800512c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000
 800512c:	40022000 	.word	0x40022000

08005130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005138:	2300      	movs	r3, #0
 800513a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800513c:	2300      	movs	r3, #0
 800513e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005148:	2b00      	cmp	r3, #0
 800514a:	d031      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005154:	d01a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005156:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800515a:	d814      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005160:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005164:	d10f      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005166:	4b5d      	ldr	r3, [pc, #372]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	4a5c      	ldr	r2, [pc, #368]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005170:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005172:	e00c      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f9de 	bl	800553c <RCCEx_PLLSAI1_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	74fb      	strb	r3, [r7, #19]
      break;
 800518a:	e000      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800518c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005194:	4b51      	ldr	r3, [pc, #324]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a2:	494e      	ldr	r1, [pc, #312]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051aa:	e001      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 809e 	beq.w	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051be:	2300      	movs	r3, #0
 80051c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051c2:	4b46      	ldr	r3, [pc, #280]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00d      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d8:	4b40      	ldr	r3, [pc, #256]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051dc:	4a3f      	ldr	r2, [pc, #252]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e4:	4b3d      	ldr	r3, [pc, #244]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f0:	2301      	movs	r3, #1
 80051f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f4:	4b3a      	ldr	r3, [pc, #232]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a39      	ldr	r2, [pc, #228]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005200:	f7fc ffe2 	bl	80021c8 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fc ffde 	bl	80021c8 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d902      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	74fb      	strb	r3, [r7, #19]
        break;
 800521a:	e005      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800521c:	4b30      	ldr	r3, [pc, #192]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d15a      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800522e:	4b2b      	ldr	r3, [pc, #172]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005238:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01e      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	429a      	cmp	r2, r3
 8005248:	d019      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800524a:	4b24      	ldr	r3, [pc, #144]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005254:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005256:	4b21      	ldr	r3, [pc, #132]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525c:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800525e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005266:	4b1d      	ldr	r3, [pc, #116]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526c:	4a1b      	ldr	r2, [pc, #108]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800526e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005276:	4a19      	ldr	r2, [pc, #100]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d016      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fc ff9e 	bl	80021c8 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528e:	e00b      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005290:	f7fc ff9a 	bl	80021c8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d902      	bls.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	74fb      	strb	r3, [r7, #19]
            break;
 80052a6:	e006      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a8:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ec      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052bc:	4b07      	ldr	r3, [pc, #28]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ca:	4904      	ldr	r1, [pc, #16]	@ (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052d2:	e009      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
 80052d8:	e006      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052e8:	7c7b      	ldrb	r3, [r7, #17]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d105      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	4a89      	ldr	r2, [pc, #548]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005306:	4b84      	ldr	r3, [pc, #528]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	f023 0203 	bic.w	r2, r3, #3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	4980      	ldr	r1, [pc, #512]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005328:	4b7b      	ldr	r3, [pc, #492]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f023 020c 	bic.w	r2, r3, #12
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	4978      	ldr	r1, [pc, #480]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800534a:	4b73      	ldr	r3, [pc, #460]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	496f      	ldr	r1, [pc, #444]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800536c:	4b6a      	ldr	r3, [pc, #424]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537a:	4967      	ldr	r1, [pc, #412]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800538e:	4b62      	ldr	r3, [pc, #392]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	495e      	ldr	r1, [pc, #376]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053b0:	4b59      	ldr	r3, [pc, #356]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	4956      	ldr	r1, [pc, #344]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053d2:	4b51      	ldr	r3, [pc, #324]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e0:	494d      	ldr	r1, [pc, #308]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d028      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f4:	4b48      	ldr	r3, [pc, #288]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	4945      	ldr	r1, [pc, #276]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005412:	d106      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005414:	4b40      	ldr	r3, [pc, #256]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4a3f      	ldr	r2, [pc, #252]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800541a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800541e:	60d3      	str	r3, [r2, #12]
 8005420:	e011      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005426:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800542a:	d10c      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	2101      	movs	r1, #1
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f882 	bl	800553c <RCCEx_PLLSAI1_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d028      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005452:	4b31      	ldr	r3, [pc, #196]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005458:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005460:	492d      	ldr	r1, [pc, #180]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005470:	d106      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005472:	4b29      	ldr	r3, [pc, #164]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4a28      	ldr	r2, [pc, #160]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005478:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800547c:	60d3      	str	r3, [r2, #12]
 800547e:	e011      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	2101      	movs	r1, #1
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f853 	bl	800553c <RCCEx_PLLSAI1_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01c      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b0:	4b19      	ldr	r3, [pc, #100]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054be:	4916      	ldr	r1, [pc, #88]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ce:	d10c      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	2102      	movs	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f830 	bl	800553c <RCCEx_PLLSAI1_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80054e6:	7cfb      	ldrb	r3, [r7, #19]
 80054e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054f6:	4b08      	ldr	r3, [pc, #32]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005504:	4904      	ldr	r1, [pc, #16]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800550c:	7cbb      	ldrb	r3, [r7, #18]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000

0800551c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a04      	ldr	r2, [pc, #16]	@ (8005538 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005526:	f043 0304 	orr.w	r3, r3, #4
 800552a:	6013      	str	r3, [r2, #0]
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000

0800553c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800554a:	4b74      	ldr	r3, [pc, #464]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d018      	beq.n	8005588 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005556:	4b71      	ldr	r3, [pc, #452]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0203 	and.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d10d      	bne.n	8005582 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
       ||
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800556e:	4b6b      	ldr	r3, [pc, #428]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
       ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d047      	beq.n	8005612 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
 8005586:	e044      	b.n	8005612 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b03      	cmp	r3, #3
 800558e:	d018      	beq.n	80055c2 <RCCEx_PLLSAI1_Config+0x86>
 8005590:	2b03      	cmp	r3, #3
 8005592:	d825      	bhi.n	80055e0 <RCCEx_PLLSAI1_Config+0xa4>
 8005594:	2b01      	cmp	r3, #1
 8005596:	d002      	beq.n	800559e <RCCEx_PLLSAI1_Config+0x62>
 8005598:	2b02      	cmp	r3, #2
 800559a:	d009      	beq.n	80055b0 <RCCEx_PLLSAI1_Config+0x74>
 800559c:	e020      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800559e:	4b5f      	ldr	r3, [pc, #380]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d11d      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ae:	e01a      	b.n	80055e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055b0:	4b5a      	ldr	r3, [pc, #360]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d116      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c0:	e013      	b.n	80055ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055c2:	4b56      	ldr	r3, [pc, #344]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10f      	bne.n	80055ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055ce:	4b53      	ldr	r3, [pc, #332]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055de:	e006      	b.n	80055ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
      break;
 80055e4:	e004      	b.n	80055f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055f6:	4b49      	ldr	r3, [pc, #292]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6819      	ldr	r1, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	3b01      	subs	r3, #1
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	430b      	orrs	r3, r1
 800560c:	4943      	ldr	r1, [pc, #268]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d17c      	bne.n	8005712 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005618:	4b40      	ldr	r3, [pc, #256]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3f      	ldr	r2, [pc, #252]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 800561e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005624:	f7fc fdd0 	bl	80021c8 <HAL_GetTick>
 8005628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800562a:	e009      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800562c:	f7fc fdcc 	bl	80021c8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d902      	bls.n	8005640 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	73fb      	strb	r3, [r7, #15]
        break;
 800563e:	e005      	b.n	800564c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005640:	4b36      	ldr	r3, [pc, #216]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1ef      	bne.n	800562c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d15f      	bne.n	8005712 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d110      	bne.n	800567a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005658:	4b30      	ldr	r3, [pc, #192]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005660:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6892      	ldr	r2, [r2, #8]
 8005668:	0211      	lsls	r1, r2, #8
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68d2      	ldr	r2, [r2, #12]
 800566e:	06d2      	lsls	r2, r2, #27
 8005670:	430a      	orrs	r2, r1
 8005672:	492a      	ldr	r1, [pc, #168]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005674:	4313      	orrs	r3, r2
 8005676:	610b      	str	r3, [r1, #16]
 8005678:	e027      	b.n	80056ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d112      	bne.n	80056a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005680:	4b26      	ldr	r3, [pc, #152]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005688:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6892      	ldr	r2, [r2, #8]
 8005690:	0211      	lsls	r1, r2, #8
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6912      	ldr	r2, [r2, #16]
 8005696:	0852      	lsrs	r2, r2, #1
 8005698:	3a01      	subs	r2, #1
 800569a:	0552      	lsls	r2, r2, #21
 800569c:	430a      	orrs	r2, r1
 800569e:	491f      	ldr	r1, [pc, #124]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	610b      	str	r3, [r1, #16]
 80056a4:	e011      	b.n	80056ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a6:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6892      	ldr	r2, [r2, #8]
 80056b6:	0211      	lsls	r1, r2, #8
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6952      	ldr	r2, [r2, #20]
 80056bc:	0852      	lsrs	r2, r2, #1
 80056be:	3a01      	subs	r2, #1
 80056c0:	0652      	lsls	r2, r2, #25
 80056c2:	430a      	orrs	r2, r1
 80056c4:	4915      	ldr	r1, [pc, #84]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056ca:	4b14      	ldr	r3, [pc, #80]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a13      	ldr	r2, [pc, #76]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d6:	f7fc fd77 	bl	80021c8 <HAL_GetTick>
 80056da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056dc:	e009      	b.n	80056f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056de:	f7fc fd73 	bl	80021c8 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d902      	bls.n	80056f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	73fb      	strb	r3, [r7, #15]
          break;
 80056f0:	e005      	b.n	80056fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056f2:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ef      	beq.n	80056de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	4903      	ldr	r1, [pc, #12]	@ (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40021000 	.word	0x40021000

08005720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e049      	b.n	80057c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fc2a 	bl	8001fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f000 fd60 	bl	8006224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e03b      	b.n	8005860 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	@ (800586c <HAL_TIM_Base_Start_IT+0x9c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x4e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005812:	d004      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x4e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a15      	ldr	r2, [pc, #84]	@ (8005870 <HAL_TIM_Base_Start_IT+0xa0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d115      	bne.n	800584a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <HAL_TIM_Base_Start_IT+0xa4>)
 8005826:	4013      	ands	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d015      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x8c>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005836:	d011      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	e008      	b.n	800585c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e000      	b.n	800585e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40014000 	.word	0x40014000
 8005874:	00010007 	.word	0x00010007

08005878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e049      	b.n	800591e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f841 	bl	8005926 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 fcb4 	bl	8006224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <HAL_TIM_PWM_Start+0x24>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e03c      	b.n	80059da <HAL_TIM_PWM_Start+0x9e>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b04      	cmp	r3, #4
 8005964:	d109      	bne.n	800597a <HAL_TIM_PWM_Start+0x3e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	bf14      	ite	ne
 8005972:	2301      	movne	r3, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	e02f      	b.n	80059da <HAL_TIM_PWM_Start+0x9e>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b08      	cmp	r3, #8
 800597e:	d109      	bne.n	8005994 <HAL_TIM_PWM_Start+0x58>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	e022      	b.n	80059da <HAL_TIM_PWM_Start+0x9e>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b0c      	cmp	r3, #12
 8005998:	d109      	bne.n	80059ae <HAL_TIM_PWM_Start+0x72>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	bf14      	ite	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	2300      	moveq	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	e015      	b.n	80059da <HAL_TIM_PWM_Start+0x9e>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d109      	bne.n	80059c8 <HAL_TIM_PWM_Start+0x8c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e008      	b.n	80059da <HAL_TIM_PWM_Start+0x9e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	bf14      	ite	ne
 80059d4:	2301      	movne	r3, #1
 80059d6:	2300      	moveq	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e07e      	b.n	8005ae0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0xb6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059f0:	e023      	b.n	8005a3a <HAL_TIM_PWM_Start+0xfe>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_PWM_Start+0xc6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a00:	e01b      	b.n	8005a3a <HAL_TIM_PWM_Start+0xfe>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0xd6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a10:	e013      	b.n	8005a3a <HAL_TIM_PWM_Start+0xfe>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Start+0xe6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a20:	e00b      	b.n	8005a3a <HAL_TIM_PWM_Start+0xfe>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0xf6>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a30:	e003      	b.n	8005a3a <HAL_TIM_PWM_Start+0xfe>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 ff76 	bl	8006934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ae8 <HAL_TIM_PWM_Start+0x1ac>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_TIM_PWM_Start+0x12a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a25      	ldr	r2, [pc, #148]	@ (8005aec <HAL_TIM_PWM_Start+0x1b0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d004      	beq.n	8005a66 <HAL_TIM_PWM_Start+0x12a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <HAL_TIM_PWM_Start+0x1b4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_PWM_Start+0x12e>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_PWM_Start+0x130>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a18      	ldr	r2, [pc, #96]	@ (8005ae8 <HAL_TIM_PWM_Start+0x1ac>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x162>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a92:	d004      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x162>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a14      	ldr	r2, [pc, #80]	@ (8005aec <HAL_TIM_PWM_Start+0x1b0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d115      	bne.n	8005aca <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <HAL_TIM_PWM_Start+0x1b8>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b06      	cmp	r3, #6
 8005aae:	d015      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a0>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab6:	d011      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac8:	e008      	b.n	8005adc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e000      	b.n	8005ade <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	00010007 	.word	0x00010007

08005af8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 ff12 	bl	8006934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a39      	ldr	r2, [pc, #228]	@ (8005bfc <HAL_TIM_PWM_Stop+0x104>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_TIM_PWM_Stop+0x36>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a38      	ldr	r2, [pc, #224]	@ (8005c00 <HAL_TIM_PWM_Stop+0x108>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_TIM_PWM_Stop+0x36>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a36      	ldr	r2, [pc, #216]	@ (8005c04 <HAL_TIM_PWM_Stop+0x10c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_PWM_Stop+0x3a>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <HAL_TIM_PWM_Stop+0x3c>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d017      	beq.n	8005b68 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6a1a      	ldr	r2, [r3, #32]
 8005b3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <HAL_TIM_PWM_Stop+0x70>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6a1a      	ldr	r2, [r3, #32]
 8005b4e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_PWM_Stop+0x70>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10f      	bne.n	8005b98 <HAL_TIM_PWM_Stop+0xa0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a1a      	ldr	r2, [r3, #32]
 8005b7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_PWM_Stop+0xa0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d104      	bne.n	8005ba8 <HAL_TIM_PWM_Stop+0xb0>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba6:	e023      	b.n	8005bf0 <HAL_TIM_PWM_Stop+0xf8>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d104      	bne.n	8005bb8 <HAL_TIM_PWM_Stop+0xc0>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bb6:	e01b      	b.n	8005bf0 <HAL_TIM_PWM_Stop+0xf8>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d104      	bne.n	8005bc8 <HAL_TIM_PWM_Stop+0xd0>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc6:	e013      	b.n	8005bf0 <HAL_TIM_PWM_Stop+0xf8>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d104      	bne.n	8005bd8 <HAL_TIM_PWM_Stop+0xe0>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bd6:	e00b      	b.n	8005bf0 <HAL_TIM_PWM_Stop+0xf8>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d104      	bne.n	8005be8 <HAL_TIM_PWM_Stop+0xf0>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005be6:	e003      	b.n	8005bf0 <HAL_TIM_PWM_Stop+0xf8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	40014000 	.word	0x40014000
 8005c04:	40014400 	.word	0x40014400

08005c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d020      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01b      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0202 	mvn.w	r2, #2
 8005c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fac7 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fab9 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 faca 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d020      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01b      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0204 	mvn.w	r2, #4
 8005c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 faa1 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005ca4:	e005      	b.n	8005cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa93 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 faa4 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d020      	beq.n	8005d04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01b      	beq.n	8005d04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0208 	mvn.w	r2, #8
 8005cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa7b 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa6d 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fa7e 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d020      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01b      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0210 	mvn.w	r2, #16
 8005d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2208      	movs	r2, #8
 8005d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa55 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa47 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa58 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0201 	mvn.w	r2, #1
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fb fc24 	bl	80015bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00c      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fed7 	bl	8006b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00c      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fecf 	bl	8006b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00c      	beq.n	8005dea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fa12 	bl	800620e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00c      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f06f 0220 	mvn.w	r2, #32
 8005e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fe97 	bl	8006b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0ff      	b.n	8006036 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b14      	cmp	r3, #20
 8005e42:	f200 80f0 	bhi.w	8006026 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e46:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08006027 	.word	0x08006027
 8005e54:	08006027 	.word	0x08006027
 8005e58:	08006027 	.word	0x08006027
 8005e5c:	08005ee1 	.word	0x08005ee1
 8005e60:	08006027 	.word	0x08006027
 8005e64:	08006027 	.word	0x08006027
 8005e68:	08006027 	.word	0x08006027
 8005e6c:	08005f23 	.word	0x08005f23
 8005e70:	08006027 	.word	0x08006027
 8005e74:	08006027 	.word	0x08006027
 8005e78:	08006027 	.word	0x08006027
 8005e7c:	08005f63 	.word	0x08005f63
 8005e80:	08006027 	.word	0x08006027
 8005e84:	08006027 	.word	0x08006027
 8005e88:	08006027 	.word	0x08006027
 8005e8c:	08005fa5 	.word	0x08005fa5
 8005e90:	08006027 	.word	0x08006027
 8005e94:	08006027 	.word	0x08006027
 8005e98:	08006027 	.word	0x08006027
 8005e9c:	08005fe5 	.word	0x08005fe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fa2c 	bl	8006304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0208 	orr.w	r2, r2, #8
 8005eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0204 	bic.w	r2, r2, #4
 8005eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6999      	ldr	r1, [r3, #24]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	619a      	str	r2, [r3, #24]
      break;
 8005ede:	e0a5      	b.n	800602c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fa88 	bl	80063fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	021a      	lsls	r2, r3, #8
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	619a      	str	r2, [r3, #24]
      break;
 8005f20:	e084      	b.n	800602c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fae1 	bl	80064f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0208 	orr.w	r2, r2, #8
 8005f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0204 	bic.w	r2, r2, #4
 8005f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69d9      	ldr	r1, [r3, #28]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	61da      	str	r2, [r3, #28]
      break;
 8005f60:	e064      	b.n	800602c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fb39 	bl	80065e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	021a      	lsls	r2, r3, #8
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	61da      	str	r2, [r3, #28]
      break;
 8005fa2:	e043      	b.n	800602c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fb76 	bl	800669c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0204 	bic.w	r2, r2, #4
 8005fce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005fe2:	e023      	b.n	800602c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fbae 	bl	800674c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ffe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800600e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006024:	e002      	b.n	800602c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
      break;
 800602a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop

08006040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIM_ConfigClockSource+0x1c>
 8006058:	2302      	movs	r3, #2
 800605a:	e0b6      	b.n	80061ca <HAL_TIM_ConfigClockSource+0x18a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800607e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006098:	d03e      	beq.n	8006118 <HAL_TIM_ConfigClockSource+0xd8>
 800609a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800609e:	f200 8087 	bhi.w	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060a6:	f000 8086 	beq.w	80061b6 <HAL_TIM_ConfigClockSource+0x176>
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ae:	d87f      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060b0:	2b70      	cmp	r3, #112	@ 0x70
 80060b2:	d01a      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0xaa>
 80060b4:	2b70      	cmp	r3, #112	@ 0x70
 80060b6:	d87b      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060b8:	2b60      	cmp	r3, #96	@ 0x60
 80060ba:	d050      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x11e>
 80060bc:	2b60      	cmp	r3, #96	@ 0x60
 80060be:	d877      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060c0:	2b50      	cmp	r3, #80	@ 0x50
 80060c2:	d03c      	beq.n	800613e <HAL_TIM_ConfigClockSource+0xfe>
 80060c4:	2b50      	cmp	r3, #80	@ 0x50
 80060c6:	d873      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060c8:	2b40      	cmp	r3, #64	@ 0x40
 80060ca:	d058      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x13e>
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	d86f      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060d0:	2b30      	cmp	r3, #48	@ 0x30
 80060d2:	d064      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060d4:	2b30      	cmp	r3, #48	@ 0x30
 80060d6:	d86b      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d060      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d867      	bhi.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d05c      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d05a      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x15e>
 80060e8:	e062      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060fa:	f000 fbfb 	bl	80068f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800610c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	609a      	str	r2, [r3, #8]
      break;
 8006116:	e04f      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006128:	f000 fbe4 	bl	80068f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800613a:	609a      	str	r2, [r3, #8]
      break;
 800613c:	e03c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614a:	461a      	mov	r2, r3
 800614c:	f000 fb58 	bl	8006800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2150      	movs	r1, #80	@ 0x50
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fbb1 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 800615c:	e02c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800616a:	461a      	mov	r2, r3
 800616c:	f000 fb77 	bl	800685e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2160      	movs	r1, #96	@ 0x60
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fba1 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 800617c:	e01c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	461a      	mov	r2, r3
 800618c:	f000 fb38 	bl	8006800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2140      	movs	r1, #64	@ 0x40
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fb91 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 800619c:	e00c      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4619      	mov	r1, r3
 80061a8:	4610      	mov	r0, r2
 80061aa:	f000 fb88 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 80061ae:	e003      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
      break;
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80061b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a30      	ldr	r2, [pc, #192]	@ (80062f8 <TIM_Base_SetConfig+0xd4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0x20>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d108      	bne.n	8006256 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a27      	ldr	r2, [pc, #156]	@ (80062f8 <TIM_Base_SetConfig+0xd4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00b      	beq.n	8006276 <TIM_Base_SetConfig+0x52>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006264:	d007      	beq.n	8006276 <TIM_Base_SetConfig+0x52>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a24      	ldr	r2, [pc, #144]	@ (80062fc <TIM_Base_SetConfig+0xd8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_Base_SetConfig+0x52>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a23      	ldr	r2, [pc, #140]	@ (8006300 <TIM_Base_SetConfig+0xdc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d108      	bne.n	8006288 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800627c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a12      	ldr	r2, [pc, #72]	@ (80062f8 <TIM_Base_SetConfig+0xd4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_Base_SetConfig+0xa0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a11      	ldr	r2, [pc, #68]	@ (80062fc <TIM_Base_SetConfig+0xd8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_Base_SetConfig+0xa0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a10      	ldr	r2, [pc, #64]	@ (8006300 <TIM_Base_SetConfig+0xdc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d103      	bne.n	80062cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d105      	bne.n	80062ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	611a      	str	r2, [r3, #16]
  }
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400

08006304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f023 0201 	bic.w	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 0302 	bic.w	r3, r3, #2
 8006350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a24      	ldr	r2, [pc, #144]	@ (80063f0 <TIM_OC1_SetConfig+0xec>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_OC1_SetConfig+0x70>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a23      	ldr	r2, [pc, #140]	@ (80063f4 <TIM_OC1_SetConfig+0xf0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC1_SetConfig+0x70>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a22      	ldr	r2, [pc, #136]	@ (80063f8 <TIM_OC1_SetConfig+0xf4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d10c      	bne.n	800638e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0308 	bic.w	r3, r3, #8
 800637a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a17      	ldr	r2, [pc, #92]	@ (80063f0 <TIM_OC1_SetConfig+0xec>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d007      	beq.n	80063a6 <TIM_OC1_SetConfig+0xa2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a16      	ldr	r2, [pc, #88]	@ (80063f4 <TIM_OC1_SetConfig+0xf0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d003      	beq.n	80063a6 <TIM_OC1_SetConfig+0xa2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a15      	ldr	r2, [pc, #84]	@ (80063f8 <TIM_OC1_SetConfig+0xf4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d111      	bne.n	80063ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	621a      	str	r2, [r3, #32]
}
 80063e4:	bf00      	nop
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	40012c00 	.word	0x40012c00
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400

080063fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f023 0210 	bic.w	r2, r3, #16
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <TIM_OC2_SetConfig+0xe8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10d      	bne.n	800647c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a19      	ldr	r2, [pc, #100]	@ (80064e4 <TIM_OC2_SetConfig+0xe8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_OC2_SetConfig+0x98>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a18      	ldr	r2, [pc, #96]	@ (80064e8 <TIM_OC2_SetConfig+0xec>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC2_SetConfig+0x98>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a17      	ldr	r2, [pc, #92]	@ (80064ec <TIM_OC2_SetConfig+0xf0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d113      	bne.n	80064bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800649a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40014400 	.word	0x40014400

080064f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800653c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a21      	ldr	r2, [pc, #132]	@ (80065d4 <TIM_OC3_SetConfig+0xe4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10d      	bne.n	800656e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a18      	ldr	r2, [pc, #96]	@ (80065d4 <TIM_OC3_SetConfig+0xe4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_OC3_SetConfig+0x96>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a17      	ldr	r2, [pc, #92]	@ (80065d8 <TIM_OC3_SetConfig+0xe8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_OC3_SetConfig+0x96>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a16      	ldr	r2, [pc, #88]	@ (80065dc <TIM_OC3_SetConfig+0xec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d113      	bne.n	80065ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800658c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	621a      	str	r2, [r3, #32]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40014000 	.word	0x40014000
 80065dc:	40014400 	.word	0x40014400

080065e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800662e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	031b      	lsls	r3, r3, #12
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a14      	ldr	r2, [pc, #80]	@ (8006690 <TIM_OC4_SetConfig+0xb0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_OC4_SetConfig+0x74>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a13      	ldr	r2, [pc, #76]	@ (8006694 <TIM_OC4_SetConfig+0xb4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_OC4_SetConfig+0x74>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a12      	ldr	r2, [pc, #72]	@ (8006698 <TIM_OC4_SetConfig+0xb8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d109      	bne.n	8006668 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800665a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	019b      	lsls	r3, r3, #6
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400

0800669c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80066e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a13      	ldr	r2, [pc, #76]	@ (8006740 <TIM_OC5_SetConfig+0xa4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d007      	beq.n	8006706 <TIM_OC5_SetConfig+0x6a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a12      	ldr	r2, [pc, #72]	@ (8006744 <TIM_OC5_SetConfig+0xa8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d003      	beq.n	8006706 <TIM_OC5_SetConfig+0x6a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a11      	ldr	r2, [pc, #68]	@ (8006748 <TIM_OC5_SetConfig+0xac>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d109      	bne.n	800671a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800670c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	621a      	str	r2, [r3, #32]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40012c00 	.word	0x40012c00
 8006744:	40014000 	.word	0x40014000
 8006748:	40014400 	.word	0x40014400

0800674c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	051b      	lsls	r3, r3, #20
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a14      	ldr	r2, [pc, #80]	@ (80067f4 <TIM_OC6_SetConfig+0xa8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_OC6_SetConfig+0x6c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a13      	ldr	r2, [pc, #76]	@ (80067f8 <TIM_OC6_SetConfig+0xac>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_OC6_SetConfig+0x6c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a12      	ldr	r2, [pc, #72]	@ (80067fc <TIM_OC6_SetConfig+0xb0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d109      	bne.n	80067cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	029b      	lsls	r3, r3, #10
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400

08006800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0201 	bic.w	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800682a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f023 030a 	bic.w	r3, r3, #10
 800683c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800685e:	b480      	push	{r7}
 8006860:	b087      	sub	sp, #28
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f023 0210 	bic.w	r2, r3, #16
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	031b      	lsls	r3, r3, #12
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800689a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	f043 0307 	orr.w	r3, r3, #7
 80068e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800690e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	021a      	lsls	r2, r3, #8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	431a      	orrs	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2201      	movs	r2, #1
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1a      	ldr	r2, [r3, #32]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	43db      	mvns	r3, r3
 8006956:	401a      	ands	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	fa01 f303 	lsl.w	r3, r1, r3
 800696c:	431a      	orrs	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006994:	2302      	movs	r3, #2
 8006996:	e04f      	b.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a21      	ldr	r2, [pc, #132]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d108      	bne.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a14      	ldr	r2, [pc, #80]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a00:	d004      	beq.n	8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a10      	ldr	r2, [pc, #64]	@ (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d10c      	bne.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40014000 	.word	0x40014000

08006a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e060      	b.n	8006b2a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a14      	ldr	r2, [pc, #80]	@ (8006b38 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d115      	bne.n	8006b18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af6:	051b      	lsls	r3, r3, #20
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40012c00 	.word	0x40012c00

08006b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e040      	b.n	8006c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fb fa88 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	@ 0x24
 8006ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0201 	bic.w	r2, r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fe46 	bl	8007850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc17 	bl	80073f8 <UART_SetConfig>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e01b      	b.n	8006c0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fec5 	bl	8007994 <UART_CheckIdleState>
 8006c0a:	4603      	mov	r3, r0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	@ 0x28
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d177      	bne.n	8006d1c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_UART_Transmit+0x24>
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e070      	b.n	8006d1e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2221      	movs	r2, #33	@ 0x21
 8006c48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c4a:	f7fb fabd 	bl	80021c8 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c68:	d108      	bne.n	8006c7c <HAL_UART_Transmit+0x68>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e003      	b.n	8006c84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c84:	e02f      	b.n	8006ce6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2180      	movs	r1, #128	@ 0x80
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 ff27 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e03b      	b.n	8006d1e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	881a      	ldrh	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb8:	b292      	uxth	r2, r2
 8006cba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	e007      	b.n	8006cd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1c9      	bne.n	8006c86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2140      	movs	r1, #64	@ 0x40
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fef1 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e005      	b.n	8006d1e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	@ 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d137      	bne.n	8006db0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_UART_Receive_IT+0x24>
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e030      	b.n	8006db2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a18      	ldr	r2, [pc, #96]	@ (8006dbc <HAL_UART_Receive_IT+0x94>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d01f      	beq.n	8006da0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d018      	beq.n	8006da0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	69f9      	ldr	r1, [r7, #28]
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	461a      	mov	r2, r3
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 ff0a 	bl	8007bc0 <UART_Start_Receive_IT>
 8006dac:	4603      	mov	r3, r0
 8006dae:	e000      	b.n	8006db2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006db0:	2302      	movs	r3, #2
  }
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3728      	adds	r7, #40	@ 0x28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	40008000 	.word	0x40008000

08006dc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b0ba      	sub	sp, #232	@ 0xe8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006dea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006dee:	4013      	ands	r3, r2
 8006df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d115      	bne.n	8006e28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00f      	beq.n	8006e28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 82ca 	beq.w	80073b2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
      }
      return;
 8006e26:	e2c4      	b.n	80073b2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8117 	beq.w	8007060 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e42:	4b85      	ldr	r3, [pc, #532]	@ (8007058 <HAL_UART_IRQHandler+0x298>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 810a 	beq.w	8007060 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d011      	beq.n	8006e7c <HAL_UART_IRQHandler+0xbc>
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e72:	f043 0201 	orr.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d011      	beq.n	8006eac <HAL_UART_IRQHandler+0xec>
 8006e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ea2:	f043 0204 	orr.w	r2, r3, #4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d011      	beq.n	8006edc <HAL_UART_IRQHandler+0x11c>
 8006eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ed2:	f043 0202 	orr.w	r2, r3, #2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d017      	beq.n	8006f18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2208      	movs	r2, #8
 8006f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f0e:	f043 0208 	orr.w	r2, r3, #8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d012      	beq.n	8006f4a <HAL_UART_IRQHandler+0x18a>
 8006f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00c      	beq.n	8006f4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f40:	f043 0220 	orr.w	r2, r3, #32
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8230 	beq.w	80073b6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00d      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d007      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d005      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04f      	beq.n	8007042 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fed2 	bl	8007d4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb2:	2b40      	cmp	r3, #64	@ 0x40
 8006fb4:	d141      	bne.n	800703a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3308      	adds	r3, #8
 8006fbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fe2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1d9      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007006:	2b00      	cmp	r3, #0
 8007008:	d013      	beq.n	8007032 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700e:	4a13      	ldr	r2, [pc, #76]	@ (800705c <HAL_UART_IRQHandler+0x29c>)
 8007010:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007016:	4618      	mov	r0, r3
 8007018:	f7fc fef0 	bl	8003dfc <HAL_DMA_Abort_IT>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d017      	beq.n	8007052 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	e00f      	b.n	8007052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 faa6 	bl	8008584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007038:	e00b      	b.n	8007052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 faa2 	bl	8008584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007040:	e007      	b.n	8007052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fa9e 	bl	8008584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007050:	e1b1      	b.n	80073b6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007052:	bf00      	nop
    return;
 8007054:	e1af      	b.n	80073b6 <HAL_UART_IRQHandler+0x5f6>
 8007056:	bf00      	nop
 8007058:	04000120 	.word	0x04000120
 800705c:	08007e15 	.word	0x08007e15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007064:	2b01      	cmp	r3, #1
 8007066:	f040 816a 	bne.w	800733e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800706a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706e:	f003 0310 	and.w	r3, r3, #16
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8163 	beq.w	800733e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 815c 	beq.w	800733e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2210      	movs	r2, #16
 800708c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007098:	2b40      	cmp	r3, #64	@ 0x40
 800709a:	f040 80d4 	bne.w	8007246 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80ad 	beq.w	800720e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070be:	429a      	cmp	r2, r3
 80070c0:	f080 80a5 	bcs.w	800720e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 8086 	bne.w	80071ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800710a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800710e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1da      	bne.n	80070e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3308      	adds	r3, #8
 8007130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800713a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800714e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e1      	bne.n	800712a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800717c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800718a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800718c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e3      	bne.n	8007166 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071bc:	f023 0310 	bic.w	r3, r3, #16
 80071c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e4      	bne.n	80071ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fc fdca 	bl	8003d80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071fe:	b29b      	uxth	r3, r3
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	b29b      	uxth	r3, r3
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f8ea 	bl	80073e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800720c:	e0d5      	b.n	80073ba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007218:	429a      	cmp	r2, r3
 800721a:	f040 80ce 	bne.w	80073ba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b20      	cmp	r3, #32
 800722c:	f040 80c5 	bne.w	80073ba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8ce 	bl	80073e0 <HAL_UARTEx_RxEventCallback>
      return;
 8007244:	e0b9      	b.n	80073ba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007252:	b29b      	uxth	r3, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80ab 	beq.w	80073be <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80a6 	beq.w	80073be <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007294:	647b      	str	r3, [r7, #68]	@ 0x44
 8007296:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800729a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e4      	bne.n	8007272 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	623b      	str	r3, [r7, #32]
   return(result);
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e3      	bne.n	80072a8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	60fb      	str	r3, [r7, #12]
   return(result);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f023 0310 	bic.w	r3, r3, #16
 8007308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	461a      	mov	r2, r3
 8007312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007316:	61fb      	str	r3, [r7, #28]
 8007318:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	69b9      	ldr	r1, [r7, #24]
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	617b      	str	r3, [r7, #20]
   return(result);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e4      	bne.n	80072f4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f852 	bl	80073e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800733c:	e03f      	b.n	80073be <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <HAL_UART_IRQHandler+0x5a8>
 800734a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800734e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800735e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 ff53 	bl	800820c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007366:	e02d      	b.n	80073c4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800736c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737c:	2b00      	cmp	r3, #0
 800737e:	d008      	beq.n	8007392 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01c      	beq.n	80073c2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
    }
    return;
 8007390:	e017      	b.n	80073c2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	d012      	beq.n	80073c4 <HAL_UART_IRQHandler+0x604>
 800739e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00c      	beq.n	80073c4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fd48 	bl	8007e40 <UART_EndTransmit_IT>
    return;
 80073b0:	e008      	b.n	80073c4 <HAL_UART_IRQHandler+0x604>
      return;
 80073b2:	bf00      	nop
 80073b4:	e006      	b.n	80073c4 <HAL_UART_IRQHandler+0x604>
    return;
 80073b6:	bf00      	nop
 80073b8:	e004      	b.n	80073c4 <HAL_UART_IRQHandler+0x604>
      return;
 80073ba:	bf00      	nop
 80073bc:	e002      	b.n	80073c4 <HAL_UART_IRQHandler+0x604>
      return;
 80073be:	bf00      	nop
 80073c0:	e000      	b.n	80073c4 <HAL_UART_IRQHandler+0x604>
    return;
 80073c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80073c4:	37e8      	adds	r7, #232	@ 0xe8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop

080073cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073fc:	b08a      	sub	sp, #40	@ 0x28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	431a      	orrs	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	431a      	orrs	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	4313      	orrs	r3, r2
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4bb4      	ldr	r3, [pc, #720]	@ (80076f8 <UART_SetConfig+0x300>)
 8007428:	4013      	ands	r3, r2
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007430:	430b      	orrs	r3, r1
 8007432:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4aa9      	ldr	r2, [pc, #676]	@ (80076fc <UART_SetConfig+0x304>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007460:	4313      	orrs	r3, r2
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007474:	430a      	orrs	r2, r1
 8007476:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4aa0      	ldr	r2, [pc, #640]	@ (8007700 <UART_SetConfig+0x308>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d126      	bne.n	80074d0 <UART_SetConfig+0xd8>
 8007482:	4ba0      	ldr	r3, [pc, #640]	@ (8007704 <UART_SetConfig+0x30c>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	2b03      	cmp	r3, #3
 800748e:	d81b      	bhi.n	80074c8 <UART_SetConfig+0xd0>
 8007490:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <UART_SetConfig+0xa0>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074c1 	.word	0x080074c1
 80074a8:	2301      	movs	r3, #1
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ae:	e080      	b.n	80075b2 <UART_SetConfig+0x1ba>
 80074b0:	2302      	movs	r3, #2
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074b6:	e07c      	b.n	80075b2 <UART_SetConfig+0x1ba>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074be:	e078      	b.n	80075b2 <UART_SetConfig+0x1ba>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c6:	e074      	b.n	80075b2 <UART_SetConfig+0x1ba>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ce:	e070      	b.n	80075b2 <UART_SetConfig+0x1ba>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a8c      	ldr	r2, [pc, #560]	@ (8007708 <UART_SetConfig+0x310>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d138      	bne.n	800754c <UART_SetConfig+0x154>
 80074da:	4b8a      	ldr	r3, [pc, #552]	@ (8007704 <UART_SetConfig+0x30c>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e0:	f003 030c 	and.w	r3, r3, #12
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d82d      	bhi.n	8007544 <UART_SetConfig+0x14c>
 80074e8:	a201      	add	r2, pc, #4	@ (adr r2, 80074f0 <UART_SetConfig+0xf8>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007525 	.word	0x08007525
 80074f4:	08007545 	.word	0x08007545
 80074f8:	08007545 	.word	0x08007545
 80074fc:	08007545 	.word	0x08007545
 8007500:	08007535 	.word	0x08007535
 8007504:	08007545 	.word	0x08007545
 8007508:	08007545 	.word	0x08007545
 800750c:	08007545 	.word	0x08007545
 8007510:	0800752d 	.word	0x0800752d
 8007514:	08007545 	.word	0x08007545
 8007518:	08007545 	.word	0x08007545
 800751c:	08007545 	.word	0x08007545
 8007520:	0800753d 	.word	0x0800753d
 8007524:	2300      	movs	r3, #0
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752a:	e042      	b.n	80075b2 <UART_SetConfig+0x1ba>
 800752c:	2302      	movs	r3, #2
 800752e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007532:	e03e      	b.n	80075b2 <UART_SetConfig+0x1ba>
 8007534:	2304      	movs	r3, #4
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753a:	e03a      	b.n	80075b2 <UART_SetConfig+0x1ba>
 800753c:	2308      	movs	r3, #8
 800753e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007542:	e036      	b.n	80075b2 <UART_SetConfig+0x1ba>
 8007544:	2310      	movs	r3, #16
 8007546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754a:	e032      	b.n	80075b2 <UART_SetConfig+0x1ba>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a6a      	ldr	r2, [pc, #424]	@ (80076fc <UART_SetConfig+0x304>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d12a      	bne.n	80075ac <UART_SetConfig+0x1b4>
 8007556:	4b6b      	ldr	r3, [pc, #428]	@ (8007704 <UART_SetConfig+0x30c>)
 8007558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007560:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007564:	d01a      	beq.n	800759c <UART_SetConfig+0x1a4>
 8007566:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800756a:	d81b      	bhi.n	80075a4 <UART_SetConfig+0x1ac>
 800756c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007570:	d00c      	beq.n	800758c <UART_SetConfig+0x194>
 8007572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007576:	d815      	bhi.n	80075a4 <UART_SetConfig+0x1ac>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <UART_SetConfig+0x18c>
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007580:	d008      	beq.n	8007594 <UART_SetConfig+0x19c>
 8007582:	e00f      	b.n	80075a4 <UART_SetConfig+0x1ac>
 8007584:	2300      	movs	r3, #0
 8007586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758a:	e012      	b.n	80075b2 <UART_SetConfig+0x1ba>
 800758c:	2302      	movs	r3, #2
 800758e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007592:	e00e      	b.n	80075b2 <UART_SetConfig+0x1ba>
 8007594:	2304      	movs	r3, #4
 8007596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759a:	e00a      	b.n	80075b2 <UART_SetConfig+0x1ba>
 800759c:	2308      	movs	r3, #8
 800759e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a2:	e006      	b.n	80075b2 <UART_SetConfig+0x1ba>
 80075a4:	2310      	movs	r3, #16
 80075a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075aa:	e002      	b.n	80075b2 <UART_SetConfig+0x1ba>
 80075ac:	2310      	movs	r3, #16
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a51      	ldr	r2, [pc, #324]	@ (80076fc <UART_SetConfig+0x304>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d17a      	bne.n	80076b2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d824      	bhi.n	800760e <UART_SetConfig+0x216>
 80075c4:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <UART_SetConfig+0x1d4>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	0800760f 	.word	0x0800760f
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	0800760f 	.word	0x0800760f
 80075dc:	080075ff 	.word	0x080075ff
 80075e0:	0800760f 	.word	0x0800760f
 80075e4:	0800760f 	.word	0x0800760f
 80075e8:	0800760f 	.word	0x0800760f
 80075ec:	08007607 	.word	0x08007607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f0:	f7fd fce0 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80075f4:	61f8      	str	r0, [r7, #28]
        break;
 80075f6:	e010      	b.n	800761a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f8:	4b44      	ldr	r3, [pc, #272]	@ (800770c <UART_SetConfig+0x314>)
 80075fa:	61fb      	str	r3, [r7, #28]
        break;
 80075fc:	e00d      	b.n	800761a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fe:	f7fd fc41 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007602:	61f8      	str	r0, [r7, #28]
        break;
 8007604:	e009      	b.n	800761a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800760a:	61fb      	str	r3, [r7, #28]
        break;
 800760c:	e005      	b.n	800761a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007618:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8107 	beq.w	8007830 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	429a      	cmp	r2, r3
 8007630:	d305      	bcc.n	800763e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	429a      	cmp	r2, r3
 800763c:	d903      	bls.n	8007646 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007644:	e0f4      	b.n	8007830 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2200      	movs	r2, #0
 800764a:	461c      	mov	r4, r3
 800764c:	4615      	mov	r5, r2
 800764e:	f04f 0200 	mov.w	r2, #0
 8007652:	f04f 0300 	mov.w	r3, #0
 8007656:	022b      	lsls	r3, r5, #8
 8007658:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800765c:	0222      	lsls	r2, r4, #8
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	6849      	ldr	r1, [r1, #4]
 8007662:	0849      	lsrs	r1, r1, #1
 8007664:	2000      	movs	r0, #0
 8007666:	4688      	mov	r8, r1
 8007668:	4681      	mov	r9, r0
 800766a:	eb12 0a08 	adds.w	sl, r2, r8
 800766e:	eb43 0b09 	adc.w	fp, r3, r9
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	603b      	str	r3, [r7, #0]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007680:	4650      	mov	r0, sl
 8007682:	4659      	mov	r1, fp
 8007684:	f7f9 fb9e 	bl	8000dc4 <__aeabi_uldivmod>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4613      	mov	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007696:	d308      	bcc.n	80076aa <UART_SetConfig+0x2b2>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800769e:	d204      	bcs.n	80076aa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	60da      	str	r2, [r3, #12]
 80076a8:	e0c2      	b.n	8007830 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076b0:	e0be      	b.n	8007830 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076ba:	d16a      	bne.n	8007792 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80076bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d834      	bhi.n	800772e <UART_SetConfig+0x336>
 80076c4:	a201      	add	r2, pc, #4	@ (adr r2, 80076cc <UART_SetConfig+0x2d4>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007719 	.word	0x08007719
 80076d8:	0800772f 	.word	0x0800772f
 80076dc:	0800771f 	.word	0x0800771f
 80076e0:	0800772f 	.word	0x0800772f
 80076e4:	0800772f 	.word	0x0800772f
 80076e8:	0800772f 	.word	0x0800772f
 80076ec:	08007727 	.word	0x08007727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f0:	f7fd fc60 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80076f4:	61f8      	str	r0, [r7, #28]
        break;
 80076f6:	e020      	b.n	800773a <UART_SetConfig+0x342>
 80076f8:	efff69f3 	.word	0xefff69f3
 80076fc:	40008000 	.word	0x40008000
 8007700:	40013800 	.word	0x40013800
 8007704:	40021000 	.word	0x40021000
 8007708:	40004400 	.word	0x40004400
 800770c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007710:	f7fd fc66 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8007714:	61f8      	str	r0, [r7, #28]
        break;
 8007716:	e010      	b.n	800773a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007718:	4b4c      	ldr	r3, [pc, #304]	@ (800784c <UART_SetConfig+0x454>)
 800771a:	61fb      	str	r3, [r7, #28]
        break;
 800771c:	e00d      	b.n	800773a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771e:	f7fd fbb1 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007722:	61f8      	str	r0, [r7, #28]
        break;
 8007724:	e009      	b.n	800773a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800772a:	61fb      	str	r3, [r7, #28]
        break;
 800772c:	e005      	b.n	800773a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d077      	beq.n	8007830 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	005a      	lsls	r2, r3, #1
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	441a      	add	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b0f      	cmp	r3, #15
 800775a:	d916      	bls.n	800778a <UART_SetConfig+0x392>
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007762:	d212      	bcs.n	800778a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f023 030f 	bic.w	r3, r3, #15
 800776c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	b29b      	uxth	r3, r3
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	b29a      	uxth	r2, r3
 800777a:	8afb      	ldrh	r3, [r7, #22]
 800777c:	4313      	orrs	r3, r2
 800777e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	8afa      	ldrh	r2, [r7, #22]
 8007786:	60da      	str	r2, [r3, #12]
 8007788:	e052      	b.n	8007830 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007790:	e04e      	b.n	8007830 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007792:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007796:	2b08      	cmp	r3, #8
 8007798:	d827      	bhi.n	80077ea <UART_SetConfig+0x3f2>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <UART_SetConfig+0x3a8>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077c5 	.word	0x080077c5
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	080077eb 	.word	0x080077eb
 80077b0:	080077db 	.word	0x080077db
 80077b4:	080077eb 	.word	0x080077eb
 80077b8:	080077eb 	.word	0x080077eb
 80077bc:	080077eb 	.word	0x080077eb
 80077c0:	080077e3 	.word	0x080077e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c4:	f7fd fbf6 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80077c8:	61f8      	str	r0, [r7, #28]
        break;
 80077ca:	e014      	b.n	80077f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077cc:	f7fd fc08 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 80077d0:	61f8      	str	r0, [r7, #28]
        break;
 80077d2:	e010      	b.n	80077f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d4:	4b1d      	ldr	r3, [pc, #116]	@ (800784c <UART_SetConfig+0x454>)
 80077d6:	61fb      	str	r3, [r7, #28]
        break;
 80077d8:	e00d      	b.n	80077f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077da:	f7fd fb53 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 80077de:	61f8      	str	r0, [r7, #28]
        break;
 80077e0:	e009      	b.n	80077f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077e6:	61fb      	str	r3, [r7, #28]
        break;
 80077e8:	e005      	b.n	80077f6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077f4:	bf00      	nop
    }

    if (pclk != 0U)
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d019      	beq.n	8007830 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	085a      	lsrs	r2, r3, #1
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	441a      	add	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	fbb2 f3f3 	udiv	r3, r2, r3
 800780e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d909      	bls.n	800782a <UART_SetConfig+0x432>
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800781c:	d205      	bcs.n	800782a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60da      	str	r2, [r3, #12]
 8007828:	e002      	b.n	8007830 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800783c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007840:	4618      	mov	r0, r3
 8007842:	3728      	adds	r7, #40	@ 0x28
 8007844:	46bd      	mov	sp, r7
 8007846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800784a:	bf00      	nop
 800784c:	00f42400 	.word	0x00f42400

08007850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00a      	beq.n	800787a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01a      	beq.n	8007966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800794e:	d10a      	bne.n	8007966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	605a      	str	r2, [r3, #4]
  }
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b098      	sub	sp, #96	@ 0x60
 8007998:	af02      	add	r7, sp, #8
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a4:	f7fa fc10 	bl	80021c8 <HAL_GetTick>
 80079a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d12e      	bne.n	8007a16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c0:	2200      	movs	r2, #0
 80079c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f88c 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d021      	beq.n	8007a16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e6      	bne.n	80079d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e062      	b.n	8007adc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d149      	bne.n	8007ab8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f856 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d03c      	beq.n	8007ab8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a90:	61fa      	str	r2, [r7, #28]
 8007a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	69b9      	ldr	r1, [r7, #24]
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e011      	b.n	8007adc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3758      	adds	r7, #88	@ 0x58
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af4:	e04f      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d04b      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afe:	f7fa fb63 	bl	80021c8 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d302      	bcc.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e04e      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d037      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b80      	cmp	r3, #128	@ 0x80
 8007b2a:	d034      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b40      	cmp	r3, #64	@ 0x40
 8007b30:	d031      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d110      	bne.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2208      	movs	r2, #8
 8007b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f8ff 	bl	8007d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2208      	movs	r2, #8
 8007b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e029      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b70:	d111      	bne.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f8e5 	bl	8007d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e00f      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69da      	ldr	r2, [r3, #28]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	bf0c      	ite	eq
 8007ba6:	2301      	moveq	r3, #1
 8007ba8:	2300      	movne	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d0a0      	beq.n	8007af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b097      	sub	sp, #92	@ 0x5c
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	88fa      	ldrh	r2, [r7, #6]
 8007bd8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	88fa      	ldrh	r2, [r7, #6]
 8007be0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf2:	d10e      	bne.n	8007c12 <UART_Start_Receive_IT+0x52>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d105      	bne.n	8007c08 <UART_Start_Receive_IT+0x48>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c06:	e02d      	b.n	8007c64 <UART_Start_Receive_IT+0xa4>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	22ff      	movs	r2, #255	@ 0xff
 8007c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c10:	e028      	b.n	8007c64 <UART_Start_Receive_IT+0xa4>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10d      	bne.n	8007c36 <UART_Start_Receive_IT+0x76>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <UART_Start_Receive_IT+0x6c>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	22ff      	movs	r2, #255	@ 0xff
 8007c26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c2a:	e01b      	b.n	8007c64 <UART_Start_Receive_IT+0xa4>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	227f      	movs	r2, #127	@ 0x7f
 8007c30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c34:	e016      	b.n	8007c64 <UART_Start_Receive_IT+0xa4>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c3e:	d10d      	bne.n	8007c5c <UART_Start_Receive_IT+0x9c>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <UART_Start_Receive_IT+0x92>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	227f      	movs	r2, #127	@ 0x7f
 8007c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c50:	e008      	b.n	8007c64 <UART_Start_Receive_IT+0xa4>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	223f      	movs	r2, #63	@ 0x3f
 8007c56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c5a:	e003      	b.n	8007c64 <UART_Start_Receive_IT+0xa4>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2222      	movs	r2, #34	@ 0x22
 8007c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	f043 0301 	orr.w	r3, r3, #1
 8007c8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c94:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007c96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cb0:	d107      	bne.n	8007cc2 <UART_Start_Receive_IT+0x102>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d103      	bne.n	8007cc2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4a21      	ldr	r2, [pc, #132]	@ (8007d44 <UART_Start_Receive_IT+0x184>)
 8007cbe:	669a      	str	r2, [r3, #104]	@ 0x68
 8007cc0:	e002      	b.n	8007cc8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4a20      	ldr	r2, [pc, #128]	@ (8007d48 <UART_Start_Receive_IT+0x188>)
 8007cc6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d019      	beq.n	8007d04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e6      	bne.n	8007cd0 <UART_Start_Receive_IT+0x110>
 8007d02:	e018      	b.n	8007d36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	613b      	str	r3, [r7, #16]
   return(result);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f043 0320 	orr.w	r3, r3, #32
 8007d18:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d22:	623b      	str	r3, [r7, #32]
 8007d24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	69f9      	ldr	r1, [r7, #28]
 8007d28:	6a3a      	ldr	r2, [r7, #32]
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	375c      	adds	r7, #92	@ 0x5c
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	08008051 	.word	0x08008051
 8007d48:	08007e95 	.word	0x08007e95

08007d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b095      	sub	sp, #84	@ 0x54
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e6      	bne.n	8007d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e5      	bne.n	8007d86 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d118      	bne.n	8007df4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f023 0310 	bic.w	r3, r3, #16
 8007dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6979      	ldr	r1, [r7, #20]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	613b      	str	r3, [r7, #16]
   return(result);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e6      	bne.n	8007dc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e08:	bf00      	nop
 8007e0a:	3754      	adds	r7, #84	@ 0x54
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fba6 	bl	8008584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	61bb      	str	r3, [r7, #24]
 8007e68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6979      	ldr	r1, [r7, #20]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	613b      	str	r3, [r7, #16]
   return(result);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e6      	bne.n	8007e48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff faa0 	bl	80073cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b09c      	sub	sp, #112	@ 0x70
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ea2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eac:	2b22      	cmp	r3, #34	@ 0x22
 8007eae:	f040 80be 	bne.w	800802e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ebc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ec0:	b2d9      	uxtb	r1, r3
 8007ec2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ecc:	400a      	ands	r2, r1
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f040 80a3 	bne.w	8008042 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e6      	bne.n	8007efc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3308      	adds	r3, #8
 8007f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e5      	bne.n	8007f2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a34      	ldr	r2, [pc, #208]	@ (800804c <UART_RxISR_8BIT+0x1b8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d01f      	beq.n	8007fc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d018      	beq.n	8007fc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e6      	bne.n	8007f8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d12e      	bne.n	8008026 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0310 	bic.w	r3, r3, #16
 8007fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	f003 0310 	and.w	r3, r3, #16
 800800a:	2b10      	cmp	r3, #16
 800800c:	d103      	bne.n	8008016 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2210      	movs	r2, #16
 8008014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff f9de 	bl	80073e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008024:	e00d      	b.n	8008042 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa88 	bl	800853c <HAL_UART_RxCpltCallback>
}
 800802c:	e009      	b.n	8008042 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	8b1b      	ldrh	r3, [r3, #24]
 8008034:	b29a      	uxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0208 	orr.w	r2, r2, #8
 800803e:	b292      	uxth	r2, r2
 8008040:	831a      	strh	r2, [r3, #24]
}
 8008042:	bf00      	nop
 8008044:	3770      	adds	r7, #112	@ 0x70
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	40008000 	.word	0x40008000

08008050 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b09c      	sub	sp, #112	@ 0x70
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800805e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008068:	2b22      	cmp	r3, #34	@ 0x22
 800806a:	f040 80be 	bne.w	80081ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008074:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800807e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008082:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008086:	4013      	ands	r3, r2
 8008088:	b29a      	uxth	r2, r3
 800808a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800808c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008092:	1c9a      	adds	r2, r3, #2
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f040 80a3 	bne.w	80081fe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80080d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80080e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	f023 0301 	bic.w	r3, r3, #1
 8008100:	663b      	str	r3, [r7, #96]	@ 0x60
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800810a:	643a      	str	r2, [r7, #64]	@ 0x40
 800810c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e5      	bne.n	80080ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a34      	ldr	r2, [pc, #208]	@ (8008208 <UART_RxISR_16BIT+0x1b8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d01f      	beq.n	800817c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d018      	beq.n	800817c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	61fb      	str	r3, [r7, #28]
   return(result);
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800815e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800816a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800816e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e6      	bne.n	800814a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008180:	2b01      	cmp	r3, #1
 8008182:	d12e      	bne.n	80081e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	60bb      	str	r3, [r7, #8]
   return(result);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f023 0310 	bic.w	r3, r3, #16
 800819e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6979      	ldr	r1, [r7, #20]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	613b      	str	r3, [r7, #16]
   return(result);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e6      	bne.n	800818a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	2b10      	cmp	r3, #16
 80081c8:	d103      	bne.n	80081d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2210      	movs	r2, #16
 80081d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff f900 	bl	80073e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081e0:	e00d      	b.n	80081fe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f9aa 	bl	800853c <HAL_UART_RxCpltCallback>
}
 80081e8:	e009      	b.n	80081fe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	8b1b      	ldrh	r3, [r3, #24]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0208 	orr.w	r2, r2, #8
 80081fa:	b292      	uxth	r2, r2
 80081fc:	831a      	strh	r2, [r3, #24]
}
 80081fe:	bf00      	nop
 8008200:	3770      	adds	r7, #112	@ 0x70
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40008000 	.word	0x40008000

0800820c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <VAL_Analog_Init>:

/**
  * @brief  Initialize the analog module
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Analog_Init(void) {
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* Initialize ADC */
  MX_ADC1_Init();
 8008224:	f7f9 fa18 	bl	8001658 <MX_ADC1_Init>
  
  /* Calibrate ADC */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8008228:	217f      	movs	r1, #127	@ 0x7f
 800822a:	480a      	ldr	r0, [pc, #40]	@ (8008254 <VAL_Analog_Init+0x34>)
 800822c:	f7fb fb1c 	bl	8003868 <HAL_ADCEx_Calibration_Start>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <VAL_Analog_Init+0x1a>
    return VAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e00a      	b.n	8008250 <VAL_Analog_Init+0x30>
  }
  
  /* Start ADC in DMA mode */
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUFFER_SIZE) != HAL_OK) {
 800823a:	2206      	movs	r2, #6
 800823c:	4906      	ldr	r1, [pc, #24]	@ (8008258 <VAL_Analog_Init+0x38>)
 800823e:	4805      	ldr	r0, [pc, #20]	@ (8008254 <VAL_Analog_Init+0x34>)
 8008240:	f7fa fb34 	bl	80028ac <HAL_ADC_Start_DMA>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <VAL_Analog_Init+0x2e>
    return VAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <VAL_Analog_Init+0x30>
  }
  
  return VAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000e78 	.word	0x20000e78
 8008258:	2000104c 	.word	0x2000104c

0800825c <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  ADC conversion complete callback
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a05      	ldr	r2, [pc, #20]	@ (8008280 <HAL_ADC_ConvCpltCallback+0x24>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d102      	bne.n	8008274 <HAL_ADC_ConvCpltCallback+0x18>
    conversionComplete = 1;
 800826e:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <HAL_ADC_ConvCpltCallback+0x28>)
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]
  }
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	50040000 	.word	0x50040000
 8008284:	20001064 	.word	0x20001064

08008288 <VAL_Pins_Init>:

/**
  * @brief  Initialize the pins module
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Pins_Init(void) {
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* Initialize GPIO */
  MX_GPIO_Init();
 800828c:	f7f9 fb36 	bl	80018fc <MX_GPIO_Init>
  
  return VAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <VAL_PWM_Init>:

/**
  * @brief  Initialize the PWM module
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_PWM_Init(void) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
  /* Initialize PWM timer */
  MX_TIM1_Init();
 800829e:	f7f9 fdbb 	bl	8001e18 <MX_TIM1_Init>
  
  /* Start PWM generation for all channels */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 80082a2:	2100      	movs	r1, #0
 80082a4:	481d      	ldr	r0, [pc, #116]	@ (800831c <VAL_PWM_Init+0x84>)
 80082a6:	f7fd fb49 	bl	800593c <HAL_TIM_PWM_Start>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <VAL_PWM_Init+0x1c>
    return VAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e02e      	b.n	8008312 <VAL_PWM_Init+0x7a>
  }
  
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) {
 80082b4:	2104      	movs	r1, #4
 80082b6:	4819      	ldr	r0, [pc, #100]	@ (800831c <VAL_PWM_Init+0x84>)
 80082b8:	f7fd fb40 	bl	800593c <HAL_TIM_PWM_Start>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <VAL_PWM_Init+0x36>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80082c2:	2100      	movs	r1, #0
 80082c4:	4815      	ldr	r0, [pc, #84]	@ (800831c <VAL_PWM_Init+0x84>)
 80082c6:	f7fd fc17 	bl	8005af8 <HAL_TIM_PWM_Stop>
    return VAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e021      	b.n	8008312 <VAL_PWM_Init+0x7a>
  }
  
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) {
 80082ce:	2108      	movs	r1, #8
 80082d0:	4812      	ldr	r0, [pc, #72]	@ (800831c <VAL_PWM_Init+0x84>)
 80082d2:	f7fd fb33 	bl	800593c <HAL_TIM_PWM_Start>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <VAL_PWM_Init+0x58>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80082dc:	2100      	movs	r1, #0
 80082de:	480f      	ldr	r0, [pc, #60]	@ (800831c <VAL_PWM_Init+0x84>)
 80082e0:	f7fd fc0a 	bl	8005af8 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80082e4:	2104      	movs	r1, #4
 80082e6:	480d      	ldr	r0, [pc, #52]	@ (800831c <VAL_PWM_Init+0x84>)
 80082e8:	f7fd fc06 	bl	8005af8 <HAL_TIM_PWM_Stop>
    return VAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e010      	b.n	8008312 <VAL_PWM_Init+0x7a>
  }
  
  /* Initialize all channels to 0% intensity */
  for (uint8_t i = 0; i < PWM_CHANNEL_COUNT; i++) {
 80082f0:	2300      	movs	r3, #0
 80082f2:	71fb      	strb	r3, [r7, #7]
 80082f4:	e009      	b.n	800830a <VAL_PWM_Init+0x72>
    VAL_PWM_SetIntensity(i + 1, 0);
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	3301      	adds	r3, #1
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2100      	movs	r1, #0
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f80e 	bl	8008320 <VAL_PWM_SetIntensity>
  for (uint8_t i = 0; i < PWM_CHANNEL_COUNT; i++) {
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	3301      	adds	r3, #1
 8008308:	71fb      	strb	r3, [r7, #7]
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d9f2      	bls.n	80082f6 <VAL_PWM_Init+0x5e>
  }
  
  return VAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000f74 	.word	0x20000f74

08008320 <VAL_PWM_SetIntensity>:
  * @brief  Set PWM intensity for a specific channel
  * @param  channel: Channel number (1-3)
  * @param  intensity: Intensity value (0-100)
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_PWM_SetIntensity(uint8_t channel, uint8_t intensity) {
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	460a      	mov	r2, r1
 800832a:	71fb      	strb	r3, [r7, #7]
 800832c:	4613      	mov	r3, r2
 800832e:	71bb      	strb	r3, [r7, #6]
  /* Check parameters */
  if (channel < 1 || channel > PWM_CHANNEL_COUNT) {
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <VAL_PWM_SetIntensity+0x1c>
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2b03      	cmp	r3, #3
 800833a:	d901      	bls.n	8008340 <VAL_PWM_SetIntensity+0x20>
    return VAL_PARAM;
 800833c:	2304      	movs	r3, #4
 800833e:	e045      	b.n	80083cc <VAL_PWM_SetIntensity+0xac>
  }
  
  if (intensity > PWM_MAX_INTENSITY) {
 8008340:	79bb      	ldrb	r3, [r7, #6]
 8008342:	2b64      	cmp	r3, #100	@ 0x64
 8008344:	d901      	bls.n	800834a <VAL_PWM_SetIntensity+0x2a>
    intensity = PWM_MAX_INTENSITY;
 8008346:	2364      	movs	r3, #100	@ 0x64
 8008348:	71bb      	strb	r3, [r7, #6]
  }
  
  /* Set PWM duty cycle */
  __HAL_TIM_SET_COMPARE(&htim1, pwmChannels[channel - 1], intensity);
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	3b01      	subs	r3, #1
 800834e:	4a22      	ldr	r2, [pc, #136]	@ (80083d8 <VAL_PWM_SetIntensity+0xb8>)
 8008350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <VAL_PWM_SetIntensity+0x42>
 8008358:	4b20      	ldr	r3, [pc, #128]	@ (80083dc <VAL_PWM_SetIntensity+0xbc>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	79ba      	ldrb	r2, [r7, #6]
 800835e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008360:	e033      	b.n	80083ca <VAL_PWM_SetIntensity+0xaa>
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	3b01      	subs	r3, #1
 8008366:	4a1c      	ldr	r2, [pc, #112]	@ (80083d8 <VAL_PWM_SetIntensity+0xb8>)
 8008368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800836c:	2b04      	cmp	r3, #4
 800836e:	d104      	bne.n	800837a <VAL_PWM_SetIntensity+0x5a>
 8008370:	4b1a      	ldr	r3, [pc, #104]	@ (80083dc <VAL_PWM_SetIntensity+0xbc>)
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	79bb      	ldrb	r3, [r7, #6]
 8008376:	6393      	str	r3, [r2, #56]	@ 0x38
 8008378:	e027      	b.n	80083ca <VAL_PWM_SetIntensity+0xaa>
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	3b01      	subs	r3, #1
 800837e:	4a16      	ldr	r2, [pc, #88]	@ (80083d8 <VAL_PWM_SetIntensity+0xb8>)
 8008380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d104      	bne.n	8008392 <VAL_PWM_SetIntensity+0x72>
 8008388:	4b14      	ldr	r3, [pc, #80]	@ (80083dc <VAL_PWM_SetIntensity+0xbc>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	79bb      	ldrb	r3, [r7, #6]
 800838e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008390:	e01b      	b.n	80083ca <VAL_PWM_SetIntensity+0xaa>
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	3b01      	subs	r3, #1
 8008396:	4a10      	ldr	r2, [pc, #64]	@ (80083d8 <VAL_PWM_SetIntensity+0xb8>)
 8008398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839c:	2b0c      	cmp	r3, #12
 800839e:	d104      	bne.n	80083aa <VAL_PWM_SetIntensity+0x8a>
 80083a0:	4b0e      	ldr	r3, [pc, #56]	@ (80083dc <VAL_PWM_SetIntensity+0xbc>)
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	79bb      	ldrb	r3, [r7, #6]
 80083a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80083a8:	e00f      	b.n	80083ca <VAL_PWM_SetIntensity+0xaa>
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	4a0a      	ldr	r2, [pc, #40]	@ (80083d8 <VAL_PWM_SetIntensity+0xb8>)
 80083b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d104      	bne.n	80083c2 <VAL_PWM_SetIntensity+0xa2>
 80083b8:	4b08      	ldr	r3, [pc, #32]	@ (80083dc <VAL_PWM_SetIntensity+0xbc>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	79bb      	ldrb	r3, [r7, #6]
 80083be:	6593      	str	r3, [r2, #88]	@ 0x58
 80083c0:	e003      	b.n	80083ca <VAL_PWM_SetIntensity+0xaa>
 80083c2:	4b06      	ldr	r3, [pc, #24]	@ (80083dc <VAL_PWM_SetIntensity+0xbc>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	79bb      	ldrb	r3, [r7, #6]
 80083c8:	65d3      	str	r3, [r2, #92]	@ 0x5c
  
  return VAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	0800eed8 	.word	0x0800eed8
 80083dc:	20000f74 	.word	0x20000f74

080083e0 <VAL_Serial_Init>:
/**
  * @brief  Initialize the serial communication module
  * @param  callback: Optional callback function for received data
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Serial_Init(SerialRxCallback callback) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Initialize UART peripheral */
  MX_USART1_UART_Init();
 80083e8:	f7f9 fe32 	bl	8002050 <MX_USART1_UART_Init>

  /* Store callback function */
  rxCallback = callback;
 80083ec:	4a06      	ldr	r2, [pc, #24]	@ (8008408 <VAL_Serial_Init+0x28>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6013      	str	r3, [r2, #0]

  /* Start continuous reception if callback is provided */
  if (rxCallback != NULL) {
 80083f2:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <VAL_Serial_Init+0x28>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <VAL_Serial_Init+0x1e>
    StartReceive();
 80083fa:	f000 f863 	bl	80084c4 <StartReceive>
  }

  return VAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	2000116c 	.word	0x2000116c

0800840c <VAL_Serial_Send>:
  * @param  data: Pointer to data buffer
  * @param  length: Length of data to send
  * @param  timeout: Timeout in milliseconds
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Serial_Send(const uint8_t* data, uint16_t length, uint32_t timeout) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	460b      	mov	r3, r1
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status;

  /* Check if previous transmission is ongoing */
  if (txBusy) {
 800841a:	4b0f      	ldr	r3, [pc, #60]	@ (8008458 <VAL_Serial_Send+0x4c>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <VAL_Serial_Send+0x1c>
    return VAL_BUSY;
 8008424:	2303      	movs	r3, #3
 8008426:	e013      	b.n	8008450 <VAL_Serial_Send+0x44>
  }

  txBusy = 1;
 8008428:	4b0b      	ldr	r3, [pc, #44]	@ (8008458 <VAL_Serial_Send+0x4c>)
 800842a:	2201      	movs	r2, #1
 800842c:	701a      	strb	r2, [r3, #0]

  /* Send data via UART */
  status = HAL_UART_Transmit(&huart1, (uint8_t*)data, length, timeout);
 800842e:	897a      	ldrh	r2, [r7, #10]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68f9      	ldr	r1, [r7, #12]
 8008434:	4809      	ldr	r0, [pc, #36]	@ (800845c <VAL_Serial_Send+0x50>)
 8008436:	f7fe fbed 	bl	8006c14 <HAL_UART_Transmit>
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]

  txBusy = 0;
 800843e:	4b06      	ldr	r3, [pc, #24]	@ (8008458 <VAL_Serial_Send+0x4c>)
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]

  return (status == HAL_OK) ? VAL_OK : VAL_ERROR;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bf14      	ite	ne
 800844a:	2301      	movne	r3, #1
 800844c:	2300      	moveq	r3, #0
 800844e:	b2db      	uxtb	r3, r3
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20001168 	.word	0x20001168
 800845c:	20000fc0 	.word	0x20000fc0

08008460 <VAL_Serial_Printf>:
  * @brief  Send formatted string over serial interface
  * @param  format: String format (printf style)
  * @param  ...: Variable arguments
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_Serial_Printf(const char* format, ...) {
 8008460:	b40f      	push	{r0, r1, r2, r3}
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
  va_list args;
  int length;

  /* Check if previous transmission is ongoing */
  if (txBusy) {
 8008468:	4b14      	ldr	r3, [pc, #80]	@ (80084bc <VAL_Serial_Printf+0x5c>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <VAL_Serial_Printf+0x16>
    return VAL_BUSY;
 8008472:	2303      	movs	r3, #3
 8008474:	e01b      	b.n	80084ae <VAL_Serial_Printf+0x4e>
  }

  /* Format string */
  va_start(args, format);
 8008476:	f107 0314 	add.w	r3, r7, #20
 800847a:	603b      	str	r3, [r7, #0]
  length = vsnprintf((char*)txBuffer, SERIAL_TX_BUFFER_SIZE, format, args);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008484:	480e      	ldr	r0, [pc, #56]	@ (80084c0 <VAL_Serial_Printf+0x60>)
 8008486:	f004 fa9b 	bl	800c9c0 <vsniprintf>
 800848a:	6078      	str	r0, [r7, #4]
  va_end(args);

  if (length < 0 || length >= SERIAL_TX_BUFFER_SIZE) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	db02      	blt.n	8008498 <VAL_Serial_Printf+0x38>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2bff      	cmp	r3, #255	@ 0xff
 8008496:	dd01      	ble.n	800849c <VAL_Serial_Printf+0x3c>
    return VAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e008      	b.n	80084ae <VAL_Serial_Printf+0x4e>
  }

  /* Send formatted string */
  return VAL_Serial_Send(txBuffer, length, 1000);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084a4:	4619      	mov	r1, r3
 80084a6:	4806      	ldr	r0, [pc, #24]	@ (80084c0 <VAL_Serial_Printf+0x60>)
 80084a8:	f7ff ffb0 	bl	800840c <VAL_Serial_Send>
 80084ac:	4603      	mov	r3, r0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b8:	b004      	add	sp, #16
 80084ba:	4770      	bx	lr
 80084bc:	20001168 	.word	0x20001168
 80084c0:	20001068 	.word	0x20001068

080084c4 <StartReceive>:

/**
  * @brief  Start continuous reception
  * @retval None
  */
static void StartReceive(void) {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
  /* Detailed error checking for receive initialization */
  HAL_StatusTypeDef status = HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 80084ca:	2201      	movs	r2, #1
 80084cc:	4915      	ldr	r1, [pc, #84]	@ (8008524 <StartReceive+0x60>)
 80084ce:	4816      	ldr	r0, [pc, #88]	@ (8008528 <StartReceive+0x64>)
 80084d0:	f7fe fc2a 	bl	8006d28 <HAL_UART_Receive_IT>
 80084d4:	4603      	mov	r3, r0
 80084d6:	71fb      	strb	r3, [r7, #7]

  switch(status) {
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d816      	bhi.n	800850c <StartReceive+0x48>
 80084de:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <StartReceive+0x20>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008519 	.word	0x08008519
 80084e8:	080084f5 	.word	0x080084f5
 80084ec:	080084fd 	.word	0x080084fd
 80084f0:	08008505 	.word	0x08008505
    case HAL_OK:
      //VAL_Serial_Printf("StartReceive: Interrupt receive started successfully\r\n");
      break;
    case HAL_ERROR:
      VAL_Serial_Printf("StartReceive: HAL_ERROR - Receive initialization failed\r\n");
 80084f4:	480d      	ldr	r0, [pc, #52]	@ (800852c <StartReceive+0x68>)
 80084f6:	f7ff ffb3 	bl	8008460 <VAL_Serial_Printf>
      break;
 80084fa:	e00e      	b.n	800851a <StartReceive+0x56>
    case HAL_BUSY:
      VAL_Serial_Printf("StartReceive: HAL_BUSY - UART is busy\r\n");
 80084fc:	480c      	ldr	r0, [pc, #48]	@ (8008530 <StartReceive+0x6c>)
 80084fe:	f7ff ffaf 	bl	8008460 <VAL_Serial_Printf>
      break;
 8008502:	e00a      	b.n	800851a <StartReceive+0x56>
    case HAL_TIMEOUT:
      VAL_Serial_Printf("StartReceive: HAL_TIMEOUT - Receive timeout\r\n");
 8008504:	480b      	ldr	r0, [pc, #44]	@ (8008534 <StartReceive+0x70>)
 8008506:	f7ff ffab 	bl	8008460 <VAL_Serial_Printf>
      break;
 800850a:	e006      	b.n	800851a <StartReceive+0x56>
    default:
      VAL_Serial_Printf("StartReceive: Unknown status %d\r\n", status);
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	4619      	mov	r1, r3
 8008510:	4809      	ldr	r0, [pc, #36]	@ (8008538 <StartReceive+0x74>)
 8008512:	f7ff ffa5 	bl	8008460 <VAL_Serial_Printf>
      break;
 8008516:	e000      	b.n	800851a <StartReceive+0x56>
      break;
 8008518:	bf00      	nop
  }
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20001170 	.word	0x20001170
 8008528:	20000fc0 	.word	0x20000fc0
 800852c:	0800eda8 	.word	0x0800eda8
 8008530:	0800ede4 	.word	0x0800ede4
 8008534:	0800ee0c 	.word	0x0800ee0c
 8008538:	0800ee3c 	.word	0x0800ee3c

0800853c <HAL_UART_RxCpltCallback>:
/**
  * @brief  UART RX complete callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a0a      	ldr	r2, [pc, #40]	@ (8008574 <HAL_UART_RxCpltCallback+0x38>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d10e      	bne.n	800856c <HAL_UART_RxCpltCallback+0x30>
    /* Call user callback with received byte */
    if (rxCallback != NULL) {
 800854e:	4b0a      	ldr	r3, [pc, #40]	@ (8008578 <HAL_UART_RxCpltCallback+0x3c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <HAL_UART_RxCpltCallback+0x26>
      rxCallback(rxBuffer[0]);
 8008556:	4b08      	ldr	r3, [pc, #32]	@ (8008578 <HAL_UART_RxCpltCallback+0x3c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a08      	ldr	r2, [pc, #32]	@ (800857c <HAL_UART_RxCpltCallback+0x40>)
 800855c:	7812      	ldrb	r2, [r2, #0]
 800855e:	4610      	mov	r0, r2
 8008560:	4798      	blx	r3
    }

    /* Restart reception for next byte */
    HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8008562:	2201      	movs	r2, #1
 8008564:	4905      	ldr	r1, [pc, #20]	@ (800857c <HAL_UART_RxCpltCallback+0x40>)
 8008566:	4806      	ldr	r0, [pc, #24]	@ (8008580 <HAL_UART_RxCpltCallback+0x44>)
 8008568:	f7fe fbde 	bl	8006d28 <HAL_UART_Receive_IT>
  }
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40013800 	.word	0x40013800
 8008578:	2000116c 	.word	0x2000116c
 800857c:	20001170 	.word	0x20001170
 8008580:	20000fc0 	.word	0x20000fc0

08008584 <HAL_UART_ErrorCallback>:
/**
  * @brief  UART error callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a05      	ldr	r2, [pc, #20]	@ (80085a8 <HAL_UART_ErrorCallback+0x24>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d104      	bne.n	80085a0 <HAL_UART_ErrorCallback+0x1c>
    /* Restart reception on error */
    HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 8008596:	2201      	movs	r2, #1
 8008598:	4904      	ldr	r1, [pc, #16]	@ (80085ac <HAL_UART_ErrorCallback+0x28>)
 800859a:	4805      	ldr	r0, [pc, #20]	@ (80085b0 <HAL_UART_ErrorCallback+0x2c>)
 800859c:	f7fe fbc4 	bl	8006d28 <HAL_UART_Receive_IT>
  }
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40013800 	.word	0x40013800
 80085ac:	20001170 	.word	0x20001170
 80085b0:	20000fc0 	.word	0x20000fc0

080085b4 <VAL_SysClock_Init>:

/**
  * @brief  Initialize the system clock
  * @retval VAL_Status: VAL_OK if successful, VAL_ERROR otherwise
  */
VAL_Status VAL_SysClock_Init(void) {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 80085b8:	f7f9 fa0e 	bl	80019d8 <SystemClock_Config>
  
  return VAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	4603      	mov	r3, r0
 80085ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80085d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085d4:	2b84      	cmp	r3, #132	@ 0x84
 80085d6:	d005      	beq.n	80085e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80085d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	3303      	adds	r3, #3
 80085e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085e4:	68fb      	ldr	r3, [r7, #12]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085f6:	f001 f883 	bl	8009700 <vTaskStartScheduler>
  
  return osOK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}

08008600 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008602:	b089      	sub	sp, #36	@ 0x24
 8008604:	af04      	add	r7, sp, #16
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d020      	beq.n	8008654 <osThreadCreate+0x54>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d01c      	beq.n	8008654 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685c      	ldr	r4, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691e      	ldr	r6, [r3, #16]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ffc8 	bl	80085c2 <makeFreeRtosPriority>
 8008632:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800863c:	9202      	str	r2, [sp, #8]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	9100      	str	r1, [sp, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	4632      	mov	r2, r6
 8008646:	4629      	mov	r1, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fde3 	bl	8009214 <xTaskCreateStatic>
 800864e:	4603      	mov	r3, r0
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	e01c      	b.n	800868e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685c      	ldr	r4, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008660:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff ffaa 	bl	80085c2 <makeFreeRtosPriority>
 800866e:	4602      	mov	r2, r0
 8008670:	f107 030c 	add.w	r3, r7, #12
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	9200      	str	r2, [sp, #0]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	4632      	mov	r2, r6
 800867c:	4629      	mov	r1, r5
 800867e:	4620      	mov	r0, r4
 8008680:	f000 fe28 	bl	80092d4 <xTaskCreate>
 8008684:	4603      	mov	r3, r0
 8008686:	2b01      	cmp	r3, #1
 8008688:	d001      	beq.n	800868e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	e000      	b.n	8008690 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800868e:	68fb      	ldr	r3, [r7, #12]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008698 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <osDelay+0x16>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	e000      	b.n	80086b0 <osDelay+0x18>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 ffef 	bl	8009694 <vTaskDelay>
  
  return osOK;
 80086b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f103 0208 	add.w	r2, r3, #8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f04f 32ff 	mov.w	r2, #4294967295
 80086d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f103 0208 	add.w	r2, r3, #8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f103 0208 	add.w	r2, r3, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	601a      	str	r2, [r3, #0]
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d103      	bne.n	8008782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	e00c      	b.n	800879c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3308      	adds	r3, #8
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	e002      	b.n	8008790 <vListInsert+0x2e>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d2f6      	bcs.n	800878a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
}
 80087c8:	bf00      	nop
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6892      	ldr	r2, [r2, #8]
 80087ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6852      	ldr	r2, [r2, #4]
 80087f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d103      	bne.n	8008808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	1e5a      	subs	r2, r3, #1
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008854:	f002 f930 	bl	800aab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008860:	68f9      	ldr	r1, [r7, #12]
 8008862:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008864:	fb01 f303 	mul.w	r3, r1, r3
 8008868:	441a      	add	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008884:	3b01      	subs	r3, #1
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800888a:	fb01 f303 	mul.w	r3, r1, r3
 800888e:	441a      	add	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	22ff      	movs	r2, #255	@ 0xff
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	22ff      	movs	r2, #255	@ 0xff
 80088a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d114      	bne.n	80088d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01a      	beq.n	80088e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3310      	adds	r3, #16
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 f9be 	bl	8009c38 <xTaskRemoveFromEventList>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d012      	beq.n	80088e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <xQueueGenericReset+0xd0>)
 80088c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	e009      	b.n	80088e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3310      	adds	r3, #16
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff fef1 	bl	80086c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3324      	adds	r3, #36	@ 0x24
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff feec 	bl	80086c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088e8:	f002 f918 	bl	800ab1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088ec:	2301      	movs	r3, #1
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08e      	sub	sp, #56	@ 0x38
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10b      	bne.n	8008928 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	e7fd      	b.n	8008924 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10b      	bne.n	8008946 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <xQueueGenericCreateStatic+0x56>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <xQueueGenericCreateStatic+0x5a>
 8008952:	2301      	movs	r3, #1
 8008954:	e000      	b.n	8008958 <xQueueGenericCreateStatic+0x5c>
 8008956:	2300      	movs	r3, #0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10b      	bne.n	8008974 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	623b      	str	r3, [r7, #32]
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <xQueueGenericCreateStatic+0x84>
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <xQueueGenericCreateStatic+0x88>
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <xQueueGenericCreateStatic+0x8a>
 8008984:	2300      	movs	r3, #0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	61fb      	str	r3, [r7, #28]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089a2:	2348      	movs	r3, #72	@ 0x48
 80089a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b48      	cmp	r3, #72	@ 0x48
 80089aa:	d00b      	beq.n	80089c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	61bb      	str	r3, [r7, #24]
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	e7fd      	b.n	80089c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80089ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00d      	beq.n	80089ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f805 	bl	80089f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3730      	adds	r7, #48	@ 0x30
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	e002      	b.n	8008a18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a24:	2101      	movs	r1, #1
 8008a26:	69b8      	ldr	r0, [r7, #24]
 8008a28:	f7ff fefe 	bl	8008828 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08e      	sub	sp, #56	@ 0x38
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a42:	2300      	movs	r3, #0
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10b      	bne.n	8008a68 <xQueueGenericSend+0x34>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d103      	bne.n	8008a76 <xQueueGenericSend+0x42>
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <xQueueGenericSend+0x46>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e000      	b.n	8008a7c <xQueueGenericSend+0x48>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10b      	bne.n	8008a98 <xQueueGenericSend+0x64>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d103      	bne.n	8008aa6 <xQueueGenericSend+0x72>
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d101      	bne.n	8008aaa <xQueueGenericSend+0x76>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e000      	b.n	8008aac <xQueueGenericSend+0x78>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <xQueueGenericSend+0x94>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	623b      	str	r3, [r7, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ac8:	f001 fa7c 	bl	8009fc4 <xTaskGetSchedulerState>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <xQueueGenericSend+0xa4>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <xQueueGenericSend+0xa8>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <xQueueGenericSend+0xaa>
 8008adc:	2300      	movs	r3, #0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <xQueueGenericSend+0xc6>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	61fb      	str	r3, [r7, #28]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008afa:	f001 ffdd 	bl	800aab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d302      	bcc.n	8008b10 <xQueueGenericSend+0xdc>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d129      	bne.n	8008b64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b16:	f000 fa0f 	bl	8008f38 <prvCopyDataToQueue>
 8008b1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d010      	beq.n	8008b46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	3324      	adds	r3, #36	@ 0x24
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 f885 	bl	8009c38 <xTaskRemoveFromEventList>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d013      	beq.n	8008b5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b34:	4b3f      	ldr	r3, [pc, #252]	@ (8008c34 <xQueueGenericSend+0x200>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	e00a      	b.n	8008b5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d007      	beq.n	8008b5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b4c:	4b39      	ldr	r3, [pc, #228]	@ (8008c34 <xQueueGenericSend+0x200>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b5c:	f001 ffde 	bl	800ab1c <vPortExitCritical>
				return pdPASS;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e063      	b.n	8008c2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b6a:	f001 ffd7 	bl	800ab1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e05c      	b.n	8008c2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b78:	f107 0314 	add.w	r3, r7, #20
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f001 f8bf 	bl	8009d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b82:	2301      	movs	r3, #1
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b86:	f001 ffc9 	bl	800ab1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b8a:	f000 fe29 	bl	80097e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b8e:	f001 ff93 	bl	800aab8 <vPortEnterCritical>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b98:	b25b      	sxtb	r3, r3
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9e:	d103      	bne.n	8008ba8 <xQueueGenericSend+0x174>
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb4:	d103      	bne.n	8008bbe <xQueueGenericSend+0x18a>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bbe:	f001 ffad 	bl	800ab1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc2:	1d3a      	adds	r2, r7, #4
 8008bc4:	f107 0314 	add.w	r3, r7, #20
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 f8ae 	bl	8009d2c <xTaskCheckForTimeOut>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d124      	bne.n	8008c20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bd8:	f000 faa6 	bl	8009128 <prvIsQueueFull>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d018      	beq.n	8008c14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	3310      	adds	r3, #16
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 ffd2 	bl	8009b94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bf2:	f000 fa31 	bl	8009058 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bf6:	f000 fe01 	bl	80097fc <xTaskResumeAll>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f47f af7c 	bne.w	8008afa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c02:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <xQueueGenericSend+0x200>)
 8008c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	e772      	b.n	8008afa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c16:	f000 fa1f 	bl	8009058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c1a:	f000 fdef 	bl	80097fc <xTaskResumeAll>
 8008c1e:	e76c      	b.n	8008afa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c22:	f000 fa19 	bl	8009058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c26:	f000 fde9 	bl	80097fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3738      	adds	r7, #56	@ 0x38
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b090      	sub	sp, #64	@ 0x40
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	e7fd      	b.n	8008c64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d103      	bne.n	8008c76 <xQueueGenericSendFromISR+0x3e>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <xQueueGenericSendFromISR+0x42>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <xQueueGenericSendFromISR+0x44>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10b      	bne.n	8008c98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d103      	bne.n	8008ca6 <xQueueGenericSendFromISR+0x6e>
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d101      	bne.n	8008caa <xQueueGenericSendFromISR+0x72>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <xQueueGenericSendFromISR+0x74>
 8008caa:	2300      	movs	r3, #0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10b      	bne.n	8008cc8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	623b      	str	r3, [r7, #32]
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cc8:	f001 ffd6 	bl	800ac78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ccc:	f3ef 8211 	mrs	r2, BASEPRI
 8008cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	61fa      	str	r2, [r7, #28]
 8008ce2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <xQueueGenericSendFromISR+0xc2>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d12f      	bne.n	8008d5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d10:	f000 f912 	bl	8008f38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d112      	bne.n	8008d44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d016      	beq.n	8008d54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d28:	3324      	adds	r3, #36	@ 0x24
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 ff84 	bl	8009c38 <xTaskRemoveFromEventList>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00e      	beq.n	8008d54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	e007      	b.n	8008d54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008d48:	3301      	adds	r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	b25a      	sxtb	r2, r3
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d54:	2301      	movs	r3, #1
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008d58:	e001      	b.n	8008d5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3740      	adds	r7, #64	@ 0x40
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08c      	sub	sp, #48	@ 0x30
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d80:	2300      	movs	r3, #0
 8008d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <xQueueReceive+0x32>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	623b      	str	r3, [r7, #32]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <xQueueReceive+0x40>
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <xQueueReceive+0x44>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <xQueueReceive+0x46>
 8008db8:	2300      	movs	r3, #0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <xQueueReceive+0x62>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	61fb      	str	r3, [r7, #28]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dd6:	f001 f8f5 	bl	8009fc4 <xTaskGetSchedulerState>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <xQueueReceive+0x72>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <xQueueReceive+0x76>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <xQueueReceive+0x78>
 8008dea:	2300      	movs	r3, #0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <xQueueReceive+0x94>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	61bb      	str	r3, [r7, #24]
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e08:	f001 fe56 	bl	800aab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01f      	beq.n	8008e58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e1c:	f000 f8f6 	bl	800900c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	1e5a      	subs	r2, r3, #1
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00f      	beq.n	8008e50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	3310      	adds	r3, #16
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 feff 	bl	8009c38 <xTaskRemoveFromEventList>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e40:	4b3c      	ldr	r3, [pc, #240]	@ (8008f34 <xQueueReceive+0x1c0>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e50:	f001 fe64 	bl	800ab1c <vPortExitCritical>
				return pdPASS;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e069      	b.n	8008f2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d103      	bne.n	8008e66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e5e:	f001 fe5d 	bl	800ab1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e062      	b.n	8008f2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 ff45 	bl	8009d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e76:	2301      	movs	r3, #1
 8008e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e7a:	f001 fe4f 	bl	800ab1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e7e:	f000 fcaf 	bl	80097e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e82:	f001 fe19 	bl	800aab8 <vPortEnterCritical>
 8008e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e8c:	b25b      	sxtb	r3, r3
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	d103      	bne.n	8008e9c <xQueueReceive+0x128>
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ea2:	b25b      	sxtb	r3, r3
 8008ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea8:	d103      	bne.n	8008eb2 <xQueueReceive+0x13e>
 8008eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008eb2:	f001 fe33 	bl	800ab1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eb6:	1d3a      	adds	r2, r7, #4
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 ff34 	bl	8009d2c <xTaskCheckForTimeOut>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d123      	bne.n	8008f12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ecc:	f000 f916 	bl	80090fc <prvIsQueueEmpty>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d017      	beq.n	8008f06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed8:	3324      	adds	r3, #36	@ 0x24
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fe58 	bl	8009b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ee6:	f000 f8b7 	bl	8009058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eea:	f000 fc87 	bl	80097fc <xTaskResumeAll>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d189      	bne.n	8008e08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f34 <xQueueReceive+0x1c0>)
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	e780      	b.n	8008e08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f08:	f000 f8a6 	bl	8009058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f0c:	f000 fc76 	bl	80097fc <xTaskResumeAll>
 8008f10:	e77a      	b.n	8008e08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f14:	f000 f8a0 	bl	8009058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f18:	f000 fc70 	bl	80097fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f1e:	f000 f8ed 	bl	80090fc <prvIsQueueEmpty>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f43f af6f 	beq.w	8008e08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3730      	adds	r7, #48	@ 0x30
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d14d      	bne.n	8008ffa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 f84c 	bl	800a000 <xTaskPriorityDisinherit>
 8008f68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	609a      	str	r2, [r3, #8]
 8008f70:	e043      	b.n	8008ffa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d119      	bne.n	8008fac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6858      	ldr	r0, [r3, #4]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f80:	461a      	mov	r2, r3
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	f003 fe19 	bl	800cbba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f90:	441a      	add	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d32b      	bcc.n	8008ffa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	605a      	str	r2, [r3, #4]
 8008faa:	e026      	b.n	8008ffa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68d8      	ldr	r0, [r3, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	f003 fdff 	bl	800cbba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc4:	425b      	negs	r3, r3
 8008fc6:	441a      	add	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d207      	bcs.n	8008fe8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe0:	425b      	negs	r3, r3
 8008fe2:	441a      	add	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d105      	bne.n	8008ffa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009002:	697b      	ldr	r3, [r7, #20]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d018      	beq.n	8009050 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009026:	441a      	add	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	429a      	cmp	r2, r3
 8009036:	d303      	bcc.n	8009040 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68d9      	ldr	r1, [r3, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009048:	461a      	mov	r2, r3
 800904a:	6838      	ldr	r0, [r7, #0]
 800904c:	f003 fdb5 	bl	800cbba <memcpy>
	}
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009060:	f001 fd2a 	bl	800aab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800906a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800906c:	e011      	b.n	8009092 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d012      	beq.n	800909c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3324      	adds	r3, #36	@ 0x24
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fddc 	bl	8009c38 <xTaskRemoveFromEventList>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009086:	f000 feb5 	bl	8009df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	3b01      	subs	r3, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dce9      	bgt.n	800906e <prvUnlockQueue+0x16>
 800909a:	e000      	b.n	800909e <prvUnlockQueue+0x46>
					break;
 800909c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	22ff      	movs	r2, #255	@ 0xff
 80090a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80090a6:	f001 fd39 	bl	800ab1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090aa:	f001 fd05 	bl	800aab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090b6:	e011      	b.n	80090dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d012      	beq.n	80090e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3310      	adds	r3, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fdb7 	bl	8009c38 <xTaskRemoveFromEventList>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090d0:	f000 fe90 	bl	8009df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dce9      	bgt.n	80090b8 <prvUnlockQueue+0x60>
 80090e4:	e000      	b.n	80090e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	22ff      	movs	r2, #255	@ 0xff
 80090ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80090f0:	f001 fd14 	bl	800ab1c <vPortExitCritical>
}
 80090f4:	bf00      	nop
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009104:	f001 fcd8 	bl	800aab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	d102      	bne.n	8009116 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009110:	2301      	movs	r3, #1
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	e001      	b.n	800911a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800911a:	f001 fcff 	bl	800ab1c <vPortExitCritical>

	return xReturn;
 800911e:	68fb      	ldr	r3, [r7, #12]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009130:	f001 fcc2 	bl	800aab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913c:	429a      	cmp	r2, r3
 800913e:	d102      	bne.n	8009146 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009140:	2301      	movs	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	e001      	b.n	800914a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800914a:	f001 fce7 	bl	800ab1c <vPortExitCritical>

	return xReturn;
 800914e:	68fb      	ldr	r3, [r7, #12]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e014      	b.n	8009192 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009168:	4a0f      	ldr	r2, [pc, #60]	@ (80091a8 <vQueueAddToRegistry+0x50>)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10b      	bne.n	800918c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009174:	490c      	ldr	r1, [pc, #48]	@ (80091a8 <vQueueAddToRegistry+0x50>)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800917e:	4a0a      	ldr	r2, [pc, #40]	@ (80091a8 <vQueueAddToRegistry+0x50>)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4413      	add	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800918a:	e006      	b.n	800919a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b07      	cmp	r3, #7
 8009196:	d9e7      	bls.n	8009168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20001174 	.word	0x20001174

080091ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091bc:	f001 fc7c 	bl	800aab8 <vPortEnterCritical>
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091c6:	b25b      	sxtb	r3, r3
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	d103      	bne.n	80091d6 <vQueueWaitForMessageRestricted+0x2a>
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091dc:	b25b      	sxtb	r3, r3
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e2:	d103      	bne.n	80091ec <vQueueWaitForMessageRestricted+0x40>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091ec:	f001 fc96 	bl	800ab1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	3324      	adds	r3, #36	@ 0x24
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fced 	bl	8009be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009206:	6978      	ldr	r0, [r7, #20]
 8009208:	f7ff ff26 	bl	8009058 <prvUnlockQueue>
	}
 800920c:	bf00      	nop
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08e      	sub	sp, #56	@ 0x38
 8009218:	af04      	add	r7, sp, #16
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10b      	bne.n	8009240 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	623b      	str	r3, [r7, #32]
}
 800923a:	bf00      	nop
 800923c:	bf00      	nop
 800923e:	e7fd      	b.n	800923c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	61fb      	str	r3, [r7, #28]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800925e:	23a0      	movs	r3, #160	@ 0xa0
 8009260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2ba0      	cmp	r3, #160	@ 0xa0
 8009266:	d00b      	beq.n	8009280 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	61bb      	str	r3, [r7, #24]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009280:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01e      	beq.n	80092c6 <xTaskCreateStatic+0xb2>
 8009288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928a:	2b00      	cmp	r3, #0
 800928c:	d01b      	beq.n	80092c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800928e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009290:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009296:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929a:	2202      	movs	r2, #2
 800929c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092a0:	2300      	movs	r3, #0
 80092a2:	9303      	str	r3, [sp, #12]
 80092a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a6:	9302      	str	r3, [sp, #8]
 80092a8:	f107 0314 	add.w	r3, r7, #20
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f851 	bl	8009360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092c0:	f000 f8ee 	bl	80094a0 <prvAddNewTaskToReadyList>
 80092c4:	e001      	b.n	80092ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092ca:	697b      	ldr	r3, [r7, #20]
	}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3728      	adds	r7, #40	@ 0x28
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08c      	sub	sp, #48	@ 0x30
 80092d8:	af04      	add	r7, sp, #16
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 fd07 	bl	800acfc <pvPortMalloc>
 80092ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00e      	beq.n	8009314 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092f6:	20a0      	movs	r0, #160	@ 0xa0
 80092f8:	f001 fd00 	bl	800acfc <pvPortMalloc>
 80092fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	631a      	str	r2, [r3, #48]	@ 0x30
 800930a:	e005      	b.n	8009318 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800930c:	6978      	ldr	r0, [r7, #20]
 800930e:	f001 fdc3 	bl	800ae98 <vPortFree>
 8009312:	e001      	b.n	8009318 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d017      	beq.n	800934e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	2300      	movs	r3, #0
 800932a:	9303      	str	r3, [sp, #12]
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f80f 	bl	8009360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009342:	69f8      	ldr	r0, [r7, #28]
 8009344:	f000 f8ac 	bl	80094a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009348:	2301      	movs	r3, #1
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	e002      	b.n	8009354 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800934e:	f04f 33ff 	mov.w	r3, #4294967295
 8009352:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009354:	69bb      	ldr	r3, [r7, #24]
	}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009378:	3b01      	subs	r3, #1
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	f023 0307 	bic.w	r3, r3, #7
 8009386:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	617b      	str	r3, [r7, #20]
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	e7fd      	b.n	80093a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01f      	beq.n	80093f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093b0:	2300      	movs	r3, #0
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	e012      	b.n	80093dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	4413      	add	r3, r2
 80093bc:	7819      	ldrb	r1, [r3, #0]
 80093be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	3334      	adds	r3, #52	@ 0x34
 80093c6:	460a      	mov	r2, r1
 80093c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	4413      	add	r3, r2
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d006      	beq.n	80093e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2b0f      	cmp	r3, #15
 80093e0:	d9e9      	bls.n	80093b6 <prvInitialiseNewTask+0x56>
 80093e2:	e000      	b.n	80093e6 <prvInitialiseNewTask+0x86>
			{
				break;
 80093e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80093ee:	e003      	b.n	80093f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fa:	2b06      	cmp	r3, #6
 80093fc:	d901      	bls.n	8009402 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093fe:	2306      	movs	r3, #6
 8009400:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009406:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800940c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	2200      	movs	r2, #0
 8009412:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	3304      	adds	r3, #4
 8009418:	4618      	mov	r0, r3
 800941a:	f7ff f971 	bl	8008700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	3318      	adds	r3, #24
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff f96c 	bl	8008700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800942c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009430:	f1c3 0207 	rsb	r2, r3, #7
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800943c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	2200      	movs	r2, #0
 8009442:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	2200      	movs	r2, #0
 800944a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	334c      	adds	r3, #76	@ 0x4c
 8009452:	224c      	movs	r2, #76	@ 0x4c
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f003 fac0 	bl	800c9dc <memset>
 800945c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945e:	4a0d      	ldr	r2, [pc, #52]	@ (8009494 <prvInitialiseNewTask+0x134>)
 8009460:	651a      	str	r2, [r3, #80]	@ 0x50
 8009462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009464:	4a0c      	ldr	r2, [pc, #48]	@ (8009498 <prvInitialiseNewTask+0x138>)
 8009466:	655a      	str	r2, [r3, #84]	@ 0x54
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	4a0c      	ldr	r2, [pc, #48]	@ (800949c <prvInitialiseNewTask+0x13c>)
 800946c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	68f9      	ldr	r1, [r7, #12]
 8009472:	69b8      	ldr	r0, [r7, #24]
 8009474:	f001 f9f0 	bl	800a858 <pxPortInitialiseStack>
 8009478:	4602      	mov	r2, r0
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800947e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009488:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800948a:	bf00      	nop
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20003404 	.word	0x20003404
 8009498:	2000346c 	.word	0x2000346c
 800949c:	200034d4 	.word	0x200034d4

080094a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094a8:	f001 fb06 	bl	800aab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009558 <prvAddNewTaskToReadyList+0xb8>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3301      	adds	r3, #1
 80094b2:	4a29      	ldr	r2, [pc, #164]	@ (8009558 <prvAddNewTaskToReadyList+0xb8>)
 80094b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094b6:	4b29      	ldr	r3, [pc, #164]	@ (800955c <prvAddNewTaskToReadyList+0xbc>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d109      	bne.n	80094d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094be:	4a27      	ldr	r2, [pc, #156]	@ (800955c <prvAddNewTaskToReadyList+0xbc>)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094c4:	4b24      	ldr	r3, [pc, #144]	@ (8009558 <prvAddNewTaskToReadyList+0xb8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d110      	bne.n	80094ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094cc:	f000 fcb6 	bl	8009e3c <prvInitialiseTaskLists>
 80094d0:	e00d      	b.n	80094ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094d2:	4b23      	ldr	r3, [pc, #140]	@ (8009560 <prvAddNewTaskToReadyList+0xc0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094da:	4b20      	ldr	r3, [pc, #128]	@ (800955c <prvAddNewTaskToReadyList+0xbc>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d802      	bhi.n	80094ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094e8:	4a1c      	ldr	r2, [pc, #112]	@ (800955c <prvAddNewTaskToReadyList+0xbc>)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009564 <prvAddNewTaskToReadyList+0xc4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009564 <prvAddNewTaskToReadyList+0xc4>)
 80094f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fc:	2201      	movs	r2, #1
 80094fe:	409a      	lsls	r2, r3
 8009500:	4b19      	ldr	r3, [pc, #100]	@ (8009568 <prvAddNewTaskToReadyList+0xc8>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4313      	orrs	r3, r2
 8009506:	4a18      	ldr	r2, [pc, #96]	@ (8009568 <prvAddNewTaskToReadyList+0xc8>)
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4a15      	ldr	r2, [pc, #84]	@ (800956c <prvAddNewTaskToReadyList+0xcc>)
 8009518:	441a      	add	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3304      	adds	r3, #4
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f7ff f8fa 	bl	800871a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009526:	f001 faf9 	bl	800ab1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <prvAddNewTaskToReadyList+0xc0>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00e      	beq.n	8009550 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009532:	4b0a      	ldr	r3, [pc, #40]	@ (800955c <prvAddNewTaskToReadyList+0xbc>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953c:	429a      	cmp	r2, r3
 800953e:	d207      	bcs.n	8009550 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009540:	4b0b      	ldr	r3, [pc, #44]	@ (8009570 <prvAddNewTaskToReadyList+0xd0>)
 8009542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	200012b4 	.word	0x200012b4
 800955c:	200011b4 	.word	0x200011b4
 8009560:	200012c0 	.word	0x200012c0
 8009564:	200012d0 	.word	0x200012d0
 8009568:	200012bc 	.word	0x200012bc
 800956c:	200011b8 	.word	0x200011b8
 8009570:	e000ed04 	.word	0xe000ed04

08009574 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800957c:	f001 fa9c 	bl	800aab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <vTaskDelete+0x18>
 8009586:	4b39      	ldr	r3, [pc, #228]	@ (800966c <vTaskDelete+0xf8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	e000      	b.n	800958e <vTaskDelete+0x1a>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3304      	adds	r3, #4
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff f91d 	bl	80087d4 <uxListRemove>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d115      	bne.n	80095cc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a4:	4932      	ldr	r1, [pc, #200]	@ (8009670 <vTaskDelete+0xfc>)
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <vTaskDelete+0x58>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	2201      	movs	r2, #1
 80095bc:	fa02 f303 	lsl.w	r3, r2, r3
 80095c0:	43da      	mvns	r2, r3
 80095c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009674 <vTaskDelete+0x100>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4013      	ands	r3, r2
 80095c8:	4a2a      	ldr	r2, [pc, #168]	@ (8009674 <vTaskDelete+0x100>)
 80095ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d004      	beq.n	80095de <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3318      	adds	r3, #24
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff f8fb 	bl	80087d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80095de:	4b26      	ldr	r3, [pc, #152]	@ (8009678 <vTaskDelete+0x104>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3301      	adds	r3, #1
 80095e4:	4a24      	ldr	r2, [pc, #144]	@ (8009678 <vTaskDelete+0x104>)
 80095e6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80095e8:	4b20      	ldr	r3, [pc, #128]	@ (800966c <vTaskDelete+0xf8>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d10b      	bne.n	800960a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4619      	mov	r1, r3
 80095f8:	4820      	ldr	r0, [pc, #128]	@ (800967c <vTaskDelete+0x108>)
 80095fa:	f7ff f88e 	bl	800871a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80095fe:	4b20      	ldr	r3, [pc, #128]	@ (8009680 <vTaskDelete+0x10c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	4a1e      	ldr	r2, [pc, #120]	@ (8009680 <vTaskDelete+0x10c>)
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	e009      	b.n	800961e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800960a:	4b1e      	ldr	r3, [pc, #120]	@ (8009684 <vTaskDelete+0x110>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3b01      	subs	r3, #1
 8009610:	4a1c      	ldr	r2, [pc, #112]	@ (8009684 <vTaskDelete+0x110>)
 8009612:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 fc7f 	bl	8009f18 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800961a:	f000 fcb3 	bl	8009f84 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800961e:	f001 fa7d 	bl	800ab1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009622:	4b19      	ldr	r3, [pc, #100]	@ (8009688 <vTaskDelete+0x114>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01c      	beq.n	8009664 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800962a:	4b10      	ldr	r3, [pc, #64]	@ (800966c <vTaskDelete+0xf8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	429a      	cmp	r2, r3
 8009632:	d117      	bne.n	8009664 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009634:	4b15      	ldr	r3, [pc, #84]	@ (800968c <vTaskDelete+0x118>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <vTaskDelete+0xe0>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60bb      	str	r3, [r7, #8]
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8009654:	4b0e      	ldr	r3, [pc, #56]	@ (8009690 <vTaskDelete+0x11c>)
 8009656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	200011b4 	.word	0x200011b4
 8009670:	200011b8 	.word	0x200011b8
 8009674:	200012bc 	.word	0x200012bc
 8009678:	200012d0 	.word	0x200012d0
 800967c:	20001288 	.word	0x20001288
 8009680:	2000129c 	.word	0x2000129c
 8009684:	200012b4 	.word	0x200012b4
 8009688:	200012c0 	.word	0x200012c0
 800968c:	200012dc 	.word	0x200012dc
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800969c:	2300      	movs	r3, #0
 800969e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d018      	beq.n	80096d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096a6:	4b14      	ldr	r3, [pc, #80]	@ (80096f8 <vTaskDelay+0x64>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <vTaskDelay+0x32>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60bb      	str	r3, [r7, #8]
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	e7fd      	b.n	80096c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096c6:	f000 f88b 	bl	80097e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096ca:	2100      	movs	r1, #0
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fd1f 	bl	800a110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096d2:	f000 f893 	bl	80097fc <xTaskResumeAll>
 80096d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d107      	bne.n	80096ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80096de:	4b07      	ldr	r3, [pc, #28]	@ (80096fc <vTaskDelay+0x68>)
 80096e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200012dc 	.word	0x200012dc
 80096fc:	e000ed04 	.word	0xe000ed04

08009700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	@ 0x28
 8009704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800970a:	2300      	movs	r3, #0
 800970c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800970e:	463a      	mov	r2, r7
 8009710:	1d39      	adds	r1, r7, #4
 8009712:	f107 0308 	add.w	r3, r7, #8
 8009716:	4618      	mov	r0, r3
 8009718:	f7f7 fe78 	bl	800140c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	9202      	str	r2, [sp, #8]
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	2300      	movs	r3, #0
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	460a      	mov	r2, r1
 800972e:	4924      	ldr	r1, [pc, #144]	@ (80097c0 <vTaskStartScheduler+0xc0>)
 8009730:	4824      	ldr	r0, [pc, #144]	@ (80097c4 <vTaskStartScheduler+0xc4>)
 8009732:	f7ff fd6f 	bl	8009214 <xTaskCreateStatic>
 8009736:	4603      	mov	r3, r0
 8009738:	4a23      	ldr	r2, [pc, #140]	@ (80097c8 <vTaskStartScheduler+0xc8>)
 800973a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800973c:	4b22      	ldr	r3, [pc, #136]	@ (80097c8 <vTaskStartScheduler+0xc8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009744:	2301      	movs	r3, #1
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e001      	b.n	800974e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800974a:	2300      	movs	r3, #0
 800974c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d102      	bne.n	800975a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009754:	f000 fd42 	bl	800a1dc <xTimerCreateTimerTask>
 8009758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d11b      	bne.n	8009798 <vTaskStartScheduler+0x98>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	613b      	str	r3, [r7, #16]
}
 8009772:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009774:	4b15      	ldr	r3, [pc, #84]	@ (80097cc <vTaskStartScheduler+0xcc>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	334c      	adds	r3, #76	@ 0x4c
 800977a:	4a15      	ldr	r2, [pc, #84]	@ (80097d0 <vTaskStartScheduler+0xd0>)
 800977c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800977e:	4b15      	ldr	r3, [pc, #84]	@ (80097d4 <vTaskStartScheduler+0xd4>)
 8009780:	f04f 32ff 	mov.w	r2, #4294967295
 8009784:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009786:	4b14      	ldr	r3, [pc, #80]	@ (80097d8 <vTaskStartScheduler+0xd8>)
 8009788:	2201      	movs	r2, #1
 800978a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800978c:	4b13      	ldr	r3, [pc, #76]	@ (80097dc <vTaskStartScheduler+0xdc>)
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009792:	f001 f8ed 	bl	800a970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009796:	e00f      	b.n	80097b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d10b      	bne.n	80097b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <vTaskStartScheduler+0xb4>
}
 80097b8:	bf00      	nop
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	0800ee60 	.word	0x0800ee60
 80097c4:	08009e0d 	.word	0x08009e0d
 80097c8:	200012d8 	.word	0x200012d8
 80097cc:	200011b4 	.word	0x200011b4
 80097d0:	2000001c 	.word	0x2000001c
 80097d4:	200012d4 	.word	0x200012d4
 80097d8:	200012c0 	.word	0x200012c0
 80097dc:	200012b8 	.word	0x200012b8

080097e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097e0:	b480      	push	{r7}
 80097e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097e4:	4b04      	ldr	r3, [pc, #16]	@ (80097f8 <vTaskSuspendAll+0x18>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	4a03      	ldr	r2, [pc, #12]	@ (80097f8 <vTaskSuspendAll+0x18>)
 80097ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097ee:	bf00      	nop
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	200012dc 	.word	0x200012dc

080097fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800980a:	4b42      	ldr	r3, [pc, #264]	@ (8009914 <xTaskResumeAll+0x118>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <xTaskResumeAll+0x2e>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	603b      	str	r3, [r7, #0]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800982a:	f001 f945 	bl	800aab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800982e:	4b39      	ldr	r3, [pc, #228]	@ (8009914 <xTaskResumeAll+0x118>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3b01      	subs	r3, #1
 8009834:	4a37      	ldr	r2, [pc, #220]	@ (8009914 <xTaskResumeAll+0x118>)
 8009836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009838:	4b36      	ldr	r3, [pc, #216]	@ (8009914 <xTaskResumeAll+0x118>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d161      	bne.n	8009904 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009840:	4b35      	ldr	r3, [pc, #212]	@ (8009918 <xTaskResumeAll+0x11c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d05d      	beq.n	8009904 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009848:	e02e      	b.n	80098a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800984a:	4b34      	ldr	r3, [pc, #208]	@ (800991c <xTaskResumeAll+0x120>)
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3318      	adds	r3, #24
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe ffbc 	bl	80087d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3304      	adds	r3, #4
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe ffb7 	bl	80087d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986a:	2201      	movs	r2, #1
 800986c:	409a      	lsls	r2, r3
 800986e:	4b2c      	ldr	r3, [pc, #176]	@ (8009920 <xTaskResumeAll+0x124>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4313      	orrs	r3, r2
 8009874:	4a2a      	ldr	r2, [pc, #168]	@ (8009920 <xTaskResumeAll+0x124>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4a27      	ldr	r2, [pc, #156]	@ (8009924 <xTaskResumeAll+0x128>)
 8009886:	441a      	add	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3304      	adds	r3, #4
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f7fe ff43 	bl	800871a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	4b23      	ldr	r3, [pc, #140]	@ (8009928 <xTaskResumeAll+0x12c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d302      	bcc.n	80098a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80098a2:	4b22      	ldr	r3, [pc, #136]	@ (800992c <xTaskResumeAll+0x130>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098a8:	4b1c      	ldr	r3, [pc, #112]	@ (800991c <xTaskResumeAll+0x120>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1cc      	bne.n	800984a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098b6:	f000 fb65 	bl	8009f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009930 <xTaskResumeAll+0x134>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d010      	beq.n	80098e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098c6:	f000 f847 	bl	8009958 <xTaskIncrementTick>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098d0:	4b16      	ldr	r3, [pc, #88]	@ (800992c <xTaskResumeAll+0x130>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3b01      	subs	r3, #1
 80098da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f1      	bne.n	80098c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80098e2:	4b13      	ldr	r3, [pc, #76]	@ (8009930 <xTaskResumeAll+0x134>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098e8:	4b10      	ldr	r3, [pc, #64]	@ (800992c <xTaskResumeAll+0x130>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009934 <xTaskResumeAll+0x138>)
 80098f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009904:	f001 f90a 	bl	800ab1c <vPortExitCritical>

	return xAlreadyYielded;
 8009908:	68bb      	ldr	r3, [r7, #8]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	200012dc 	.word	0x200012dc
 8009918:	200012b4 	.word	0x200012b4
 800991c:	20001274 	.word	0x20001274
 8009920:	200012bc 	.word	0x200012bc
 8009924:	200011b8 	.word	0x200011b8
 8009928:	200011b4 	.word	0x200011b4
 800992c:	200012c8 	.word	0x200012c8
 8009930:	200012c4 	.word	0x200012c4
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800993e:	4b05      	ldr	r3, [pc, #20]	@ (8009954 <xTaskGetTickCount+0x1c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009944:	687b      	ldr	r3, [r7, #4]
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	200012b8 	.word	0x200012b8

08009958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009962:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa0 <xTaskIncrementTick+0x148>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	f040 808f 	bne.w	8009a8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800996c:	4b4d      	ldr	r3, [pc, #308]	@ (8009aa4 <xTaskIncrementTick+0x14c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3301      	adds	r3, #1
 8009972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009974:	4a4b      	ldr	r2, [pc, #300]	@ (8009aa4 <xTaskIncrementTick+0x14c>)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d121      	bne.n	80099c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009980:	4b49      	ldr	r3, [pc, #292]	@ (8009aa8 <xTaskIncrementTick+0x150>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	603b      	str	r3, [r7, #0]
}
 800999c:	bf00      	nop
 800999e:	bf00      	nop
 80099a0:	e7fd      	b.n	800999e <xTaskIncrementTick+0x46>
 80099a2:	4b41      	ldr	r3, [pc, #260]	@ (8009aa8 <xTaskIncrementTick+0x150>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	4b40      	ldr	r3, [pc, #256]	@ (8009aac <xTaskIncrementTick+0x154>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a3e      	ldr	r2, [pc, #248]	@ (8009aa8 <xTaskIncrementTick+0x150>)
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	4a3e      	ldr	r2, [pc, #248]	@ (8009aac <xTaskIncrementTick+0x154>)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ab0 <xTaskIncrementTick+0x158>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3301      	adds	r3, #1
 80099bc:	4a3c      	ldr	r2, [pc, #240]	@ (8009ab0 <xTaskIncrementTick+0x158>)
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	f000 fae0 	bl	8009f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099c4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ab4 <xTaskIncrementTick+0x15c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d348      	bcc.n	8009a60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099ce:	4b36      	ldr	r3, [pc, #216]	@ (8009aa8 <xTaskIncrementTick+0x150>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d104      	bne.n	80099e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d8:	4b36      	ldr	r3, [pc, #216]	@ (8009ab4 <xTaskIncrementTick+0x15c>)
 80099da:	f04f 32ff 	mov.w	r2, #4294967295
 80099de:	601a      	str	r2, [r3, #0]
					break;
 80099e0:	e03e      	b.n	8009a60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e2:	4b31      	ldr	r3, [pc, #196]	@ (8009aa8 <xTaskIncrementTick+0x150>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d203      	bcs.n	8009a02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099fa:	4a2e      	ldr	r2, [pc, #184]	@ (8009ab4 <xTaskIncrementTick+0x15c>)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a00:	e02e      	b.n	8009a60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fee4 	bl	80087d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	3318      	adds	r3, #24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe fedb 	bl	80087d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a22:	2201      	movs	r2, #1
 8009a24:	409a      	lsls	r2, r3
 8009a26:	4b24      	ldr	r3, [pc, #144]	@ (8009ab8 <xTaskIncrementTick+0x160>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	4a22      	ldr	r2, [pc, #136]	@ (8009ab8 <xTaskIncrementTick+0x160>)
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8009abc <xTaskIncrementTick+0x164>)
 8009a3e:	441a      	add	r2, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7fe fe67 	bl	800871a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a50:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac0 <xTaskIncrementTick+0x168>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d3b9      	bcc.n	80099ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a5e:	e7b6      	b.n	80099ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a60:	4b17      	ldr	r3, [pc, #92]	@ (8009ac0 <xTaskIncrementTick+0x168>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a66:	4915      	ldr	r1, [pc, #84]	@ (8009abc <xTaskIncrementTick+0x164>)
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d901      	bls.n	8009a7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a7c:	4b11      	ldr	r3, [pc, #68]	@ (8009ac4 <xTaskIncrementTick+0x16c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d007      	beq.n	8009a94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e004      	b.n	8009a94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac8 <xTaskIncrementTick+0x170>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	4a0d      	ldr	r2, [pc, #52]	@ (8009ac8 <xTaskIncrementTick+0x170>)
 8009a92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a94:	697b      	ldr	r3, [r7, #20]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200012dc 	.word	0x200012dc
 8009aa4:	200012b8 	.word	0x200012b8
 8009aa8:	2000126c 	.word	0x2000126c
 8009aac:	20001270 	.word	0x20001270
 8009ab0:	200012cc 	.word	0x200012cc
 8009ab4:	200012d4 	.word	0x200012d4
 8009ab8:	200012bc 	.word	0x200012bc
 8009abc:	200011b8 	.word	0x200011b8
 8009ac0:	200011b4 	.word	0x200011b4
 8009ac4:	200012c8 	.word	0x200012c8
 8009ac8:	200012c4 	.word	0x200012c4

08009acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8009b7c <vTaskSwitchContext+0xb0>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ada:	4b29      	ldr	r3, [pc, #164]	@ (8009b80 <vTaskSwitchContext+0xb4>)
 8009adc:	2201      	movs	r2, #1
 8009ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ae0:	e045      	b.n	8009b6e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009ae2:	4b27      	ldr	r3, [pc, #156]	@ (8009b80 <vTaskSwitchContext+0xb4>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae8:	4b26      	ldr	r3, [pc, #152]	@ (8009b84 <vTaskSwitchContext+0xb8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	fab3 f383 	clz	r3, r3
 8009af4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	f1c3 031f 	rsb	r3, r3, #31
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	4922      	ldr	r1, [pc, #136]	@ (8009b88 <vTaskSwitchContext+0xbc>)
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	607b      	str	r3, [r7, #4]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <vTaskSwitchContext+0x5a>
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4a14      	ldr	r2, [pc, #80]	@ (8009b88 <vTaskSwitchContext+0xbc>)
 8009b36:	4413      	add	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	605a      	str	r2, [r3, #4]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d104      	bne.n	8009b5a <vTaskSwitchContext+0x8e>
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	605a      	str	r2, [r3, #4]
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	4a0a      	ldr	r2, [pc, #40]	@ (8009b8c <vTaskSwitchContext+0xc0>)
 8009b62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b64:	4b09      	ldr	r3, [pc, #36]	@ (8009b8c <vTaskSwitchContext+0xc0>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	334c      	adds	r3, #76	@ 0x4c
 8009b6a:	4a09      	ldr	r2, [pc, #36]	@ (8009b90 <vTaskSwitchContext+0xc4>)
 8009b6c:	6013      	str	r3, [r2, #0]
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	200012dc 	.word	0x200012dc
 8009b80:	200012c8 	.word	0x200012c8
 8009b84:	200012bc 	.word	0x200012bc
 8009b88:	200011b8 	.word	0x200011b8
 8009b8c:	200011b4 	.word	0x200011b4
 8009b90:	2000001c 	.word	0x2000001c

08009b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10b      	bne.n	8009bbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	60fb      	str	r3, [r7, #12]
}
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	e7fd      	b.n	8009bb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bbc:	4b07      	ldr	r3, [pc, #28]	@ (8009bdc <vTaskPlaceOnEventList+0x48>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3318      	adds	r3, #24
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7fe fdcc 	bl	8008762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bca:	2101      	movs	r1, #1
 8009bcc:	6838      	ldr	r0, [r7, #0]
 8009bce:	f000 fa9f 	bl	800a110 <prvAddCurrentTaskToDelayedList>
}
 8009bd2:	bf00      	nop
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	200011b4 	.word	0x200011b4

08009be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10b      	bne.n	8009c0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	617b      	str	r3, [r7, #20]
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	e7fd      	b.n	8009c06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <vTaskPlaceOnEventListRestricted+0x54>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3318      	adds	r3, #24
 8009c10:	4619      	mov	r1, r3
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f7fe fd81 	bl	800871a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	68b8      	ldr	r0, [r7, #8]
 8009c28:	f000 fa72 	bl	800a110 <prvAddCurrentTaskToDelayedList>
	}
 8009c2c:	bf00      	nop
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	200011b4 	.word	0x200011b4

08009c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10b      	bne.n	8009c66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60fb      	str	r3, [r7, #12]
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	e7fd      	b.n	8009c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	3318      	adds	r3, #24
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fdb2 	bl	80087d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c70:	4b1d      	ldr	r3, [pc, #116]	@ (8009ce8 <xTaskRemoveFromEventList+0xb0>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d11c      	bne.n	8009cb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fda9 	bl	80087d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	2201      	movs	r2, #1
 8009c88:	409a      	lsls	r2, r3
 8009c8a:	4b18      	ldr	r3, [pc, #96]	@ (8009cec <xTaskRemoveFromEventList+0xb4>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	4a16      	ldr	r2, [pc, #88]	@ (8009cec <xTaskRemoveFromEventList+0xb4>)
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4a13      	ldr	r2, [pc, #76]	@ (8009cf0 <xTaskRemoveFromEventList+0xb8>)
 8009ca2:	441a      	add	r2, r3
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4610      	mov	r0, r2
 8009cac:	f7fe fd35 	bl	800871a <vListInsertEnd>
 8009cb0:	e005      	b.n	8009cbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	3318      	adds	r3, #24
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	480e      	ldr	r0, [pc, #56]	@ (8009cf4 <xTaskRemoveFromEventList+0xbc>)
 8009cba:	f7fe fd2e 	bl	800871a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf8 <xTaskRemoveFromEventList+0xc0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d905      	bls.n	8009cd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009cfc <xTaskRemoveFromEventList+0xc4>)
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	e001      	b.n	8009cdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cdc:	697b      	ldr	r3, [r7, #20]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200012dc 	.word	0x200012dc
 8009cec:	200012bc 	.word	0x200012bc
 8009cf0:	200011b8 	.word	0x200011b8
 8009cf4:	20001274 	.word	0x20001274
 8009cf8:	200011b4 	.word	0x200011b4
 8009cfc:	200012c8 	.word	0x200012c8

08009d00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d08:	4b06      	ldr	r3, [pc, #24]	@ (8009d24 <vTaskInternalSetTimeOutState+0x24>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d10:	4b05      	ldr	r3, [pc, #20]	@ (8009d28 <vTaskInternalSetTimeOutState+0x28>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	605a      	str	r2, [r3, #4]
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	200012cc 	.word	0x200012cc
 8009d28:	200012b8 	.word	0x200012b8

08009d2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10b      	bne.n	8009d54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	613b      	str	r3, [r7, #16]
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	e7fd      	b.n	8009d50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	60fb      	str	r3, [r7, #12]
}
 8009d6c:	bf00      	nop
 8009d6e:	bf00      	nop
 8009d70:	e7fd      	b.n	8009d6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009d72:	f000 fea1 	bl	800aab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d76:	4b1d      	ldr	r3, [pc, #116]	@ (8009dec <xTaskCheckForTimeOut+0xc0>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	69ba      	ldr	r2, [r7, #24]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8e:	d102      	bne.n	8009d96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61fb      	str	r3, [r7, #28]
 8009d94:	e023      	b.n	8009dde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	4b15      	ldr	r3, [pc, #84]	@ (8009df0 <xTaskCheckForTimeOut+0xc4>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d007      	beq.n	8009db2 <xTaskCheckForTimeOut+0x86>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d302      	bcc.n	8009db2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009dac:	2301      	movs	r3, #1
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	e015      	b.n	8009dde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d20b      	bcs.n	8009dd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	1ad2      	subs	r2, r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff ff99 	bl	8009d00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	61fb      	str	r3, [r7, #28]
 8009dd2:	e004      	b.n	8009dde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009dde:	f000 fe9d 	bl	800ab1c <vPortExitCritical>

	return xReturn;
 8009de2:	69fb      	ldr	r3, [r7, #28]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	200012b8 	.word	0x200012b8
 8009df0:	200012cc 	.word	0x200012cc

08009df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009df8:	4b03      	ldr	r3, [pc, #12]	@ (8009e08 <vTaskMissedYield+0x14>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]
}
 8009dfe:	bf00      	nop
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	200012c8 	.word	0x200012c8

08009e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e14:	f000 f852 	bl	8009ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e18:	4b06      	ldr	r3, [pc, #24]	@ (8009e34 <prvIdleTask+0x28>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d9f9      	bls.n	8009e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e20:	4b05      	ldr	r3, [pc, #20]	@ (8009e38 <prvIdleTask+0x2c>)
 8009e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e30:	e7f0      	b.n	8009e14 <prvIdleTask+0x8>
 8009e32:	bf00      	nop
 8009e34:	200011b8 	.word	0x200011b8
 8009e38:	e000ed04 	.word	0xe000ed04

08009e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e42:	2300      	movs	r3, #0
 8009e44:	607b      	str	r3, [r7, #4]
 8009e46:	e00c      	b.n	8009e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4a12      	ldr	r2, [pc, #72]	@ (8009e9c <prvInitialiseTaskLists+0x60>)
 8009e54:	4413      	add	r3, r2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fc32 	bl	80086c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	607b      	str	r3, [r7, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b06      	cmp	r3, #6
 8009e66:	d9ef      	bls.n	8009e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e68:	480d      	ldr	r0, [pc, #52]	@ (8009ea0 <prvInitialiseTaskLists+0x64>)
 8009e6a:	f7fe fc29 	bl	80086c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e6e:	480d      	ldr	r0, [pc, #52]	@ (8009ea4 <prvInitialiseTaskLists+0x68>)
 8009e70:	f7fe fc26 	bl	80086c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e74:	480c      	ldr	r0, [pc, #48]	@ (8009ea8 <prvInitialiseTaskLists+0x6c>)
 8009e76:	f7fe fc23 	bl	80086c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e7a:	480c      	ldr	r0, [pc, #48]	@ (8009eac <prvInitialiseTaskLists+0x70>)
 8009e7c:	f7fe fc20 	bl	80086c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e80:	480b      	ldr	r0, [pc, #44]	@ (8009eb0 <prvInitialiseTaskLists+0x74>)
 8009e82:	f7fe fc1d 	bl	80086c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e86:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb4 <prvInitialiseTaskLists+0x78>)
 8009e88:	4a05      	ldr	r2, [pc, #20]	@ (8009ea0 <prvInitialiseTaskLists+0x64>)
 8009e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb8 <prvInitialiseTaskLists+0x7c>)
 8009e8e:	4a05      	ldr	r2, [pc, #20]	@ (8009ea4 <prvInitialiseTaskLists+0x68>)
 8009e90:	601a      	str	r2, [r3, #0]
}
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200011b8 	.word	0x200011b8
 8009ea0:	20001244 	.word	0x20001244
 8009ea4:	20001258 	.word	0x20001258
 8009ea8:	20001274 	.word	0x20001274
 8009eac:	20001288 	.word	0x20001288
 8009eb0:	200012a0 	.word	0x200012a0
 8009eb4:	2000126c 	.word	0x2000126c
 8009eb8:	20001270 	.word	0x20001270

08009ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ec2:	e019      	b.n	8009ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ec4:	f000 fdf8 	bl	800aab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec8:	4b10      	ldr	r3, [pc, #64]	@ (8009f0c <prvCheckTasksWaitingTermination+0x50>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe fc7d 	bl	80087d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eda:	4b0d      	ldr	r3, [pc, #52]	@ (8009f10 <prvCheckTasksWaitingTermination+0x54>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8009f10 <prvCheckTasksWaitingTermination+0x54>)
 8009ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8009f14 <prvCheckTasksWaitingTermination+0x58>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	4a0a      	ldr	r2, [pc, #40]	@ (8009f14 <prvCheckTasksWaitingTermination+0x58>)
 8009eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009eee:	f000 fe15 	bl	800ab1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f810 	bl	8009f18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ef8:	4b06      	ldr	r3, [pc, #24]	@ (8009f14 <prvCheckTasksWaitingTermination+0x58>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e1      	bne.n	8009ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f00:	bf00      	nop
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20001288 	.word	0x20001288
 8009f10:	200012b4 	.word	0x200012b4
 8009f14:	2000129c 	.word	0x2000129c

08009f18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	334c      	adds	r3, #76	@ 0x4c
 8009f24:	4618      	mov	r0, r3
 8009f26:	f002 fd87 	bl	800ca38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d108      	bne.n	8009f46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 ffad 	bl	800ae98 <vPortFree>
				vPortFree( pxTCB );
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 ffaa 	bl	800ae98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f44:	e019      	b.n	8009f7a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d103      	bne.n	8009f58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 ffa1 	bl	800ae98 <vPortFree>
	}
 8009f56:	e010      	b.n	8009f7a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d00b      	beq.n	8009f7a <prvDeleteTCB+0x62>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	60fb      	str	r3, [r7, #12]
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	e7fd      	b.n	8009f76 <prvDeleteTCB+0x5e>
	}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009fbc <prvResetNextTaskUnblockTime+0x38>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f94:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f96:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f9c:	e008      	b.n	8009fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f9e:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <prvResetNextTaskUnblockTime+0x38>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4a04      	ldr	r2, [pc, #16]	@ (8009fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009fae:	6013      	str	r3, [r2, #0]
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	2000126c 	.word	0x2000126c
 8009fc0:	200012d4 	.word	0x200012d4

08009fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fca:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff8 <xTaskGetSchedulerState+0x34>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	e008      	b.n	8009fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd8:	4b08      	ldr	r3, [pc, #32]	@ (8009ffc <xTaskGetSchedulerState+0x38>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	607b      	str	r3, [r7, #4]
 8009fe4:	e001      	b.n	8009fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fea:	687b      	ldr	r3, [r7, #4]
	}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	200012c0 	.word	0x200012c0
 8009ffc:	200012dc 	.word	0x200012dc

0800a000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d070      	beq.n	800a0f8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a016:	4b3b      	ldr	r3, [pc, #236]	@ (800a104 <xTaskPriorityDisinherit+0x104>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d00b      	beq.n	800a038 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	60fb      	str	r3, [r7, #12]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10b      	bne.n	800a058 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	60bb      	str	r3, [r7, #8]
}
 800a052:	bf00      	nop
 800a054:	bf00      	nop
 800a056:	e7fd      	b.n	800a054 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a05c:	1e5a      	subs	r2, r3, #1
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d044      	beq.n	800a0f8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a072:	2b00      	cmp	r3, #0
 800a074:	d140      	bne.n	800a0f8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3304      	adds	r3, #4
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe fbaa 	bl	80087d4 <uxListRemove>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d115      	bne.n	800a0b2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a08a:	491f      	ldr	r1, [pc, #124]	@ (800a108 <xTaskPriorityDisinherit+0x108>)
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xTaskPriorityDisinherit+0xb2>
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a6:	43da      	mvns	r2, r3
 800a0a8:	4b18      	ldr	r3, [pc, #96]	@ (800a10c <xTaskPriorityDisinherit+0x10c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	4a17      	ldr	r2, [pc, #92]	@ (800a10c <xTaskPriorityDisinherit+0x10c>)
 800a0b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0be:	f1c3 0207 	rsb	r2, r3, #7
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	409a      	lsls	r2, r3
 800a0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a10c <xTaskPriorityDisinherit+0x10c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	4a0d      	ldr	r2, [pc, #52]	@ (800a10c <xTaskPriorityDisinherit+0x10c>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4a08      	ldr	r2, [pc, #32]	@ (800a108 <xTaskPriorityDisinherit+0x108>)
 800a0e6:	441a      	add	r2, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7fe fb13 	bl	800871a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0f8:	697b      	ldr	r3, [r7, #20]
	}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	200011b4 	.word	0x200011b4
 800a108:	200011b8 	.word	0x200011b8
 800a10c:	200012bc 	.word	0x200012bc

0800a110 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11a:	4b29      	ldr	r3, [pc, #164]	@ (800a1c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a120:	4b28      	ldr	r3, [pc, #160]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fb54 	bl	80087d4 <uxListRemove>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a132:	4b24      	ldr	r3, [pc, #144]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a138:	2201      	movs	r2, #1
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43da      	mvns	r2, r3
 800a140:	4b21      	ldr	r3, [pc, #132]	@ (800a1c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4013      	ands	r3, r2
 800a146:	4a20      	ldr	r2, [pc, #128]	@ (800a1c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a148:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d10a      	bne.n	800a168 <prvAddCurrentTaskToDelayedList+0x58>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d007      	beq.n	800a168 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a158:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	481a      	ldr	r0, [pc, #104]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a162:	f7fe fada 	bl	800871a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a166:	e026      	b.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a170:	4b14      	ldr	r3, [pc, #80]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d209      	bcs.n	800a194 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a180:	4b13      	ldr	r3, [pc, #76]	@ (800a1d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3304      	adds	r3, #4
 800a18a:	4619      	mov	r1, r3
 800a18c:	4610      	mov	r0, r2
 800a18e:	f7fe fae8 	bl	8008762 <vListInsert>
}
 800a192:	e010      	b.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a194:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fe fade 	bl	8008762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d202      	bcs.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a1b0:	4a09      	ldr	r2, [pc, #36]	@ (800a1d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6013      	str	r3, [r2, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200012b8 	.word	0x200012b8
 800a1c4:	200011b4 	.word	0x200011b4
 800a1c8:	200012bc 	.word	0x200012bc
 800a1cc:	200012a0 	.word	0x200012a0
 800a1d0:	20001270 	.word	0x20001270
 800a1d4:	2000126c 	.word	0x2000126c
 800a1d8:	200012d4 	.word	0x200012d4

0800a1dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	@ 0x28
 800a1e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1e6:	f000 faf7 	bl	800a7d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a260 <xTimerCreateTimerTask+0x84>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d021      	beq.n	800a236 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1fa:	1d3a      	adds	r2, r7, #4
 800a1fc:	f107 0108 	add.w	r1, r7, #8
 800a200:	f107 030c 	add.w	r3, r7, #12
 800a204:	4618      	mov	r0, r3
 800a206:	f7f7 f91b 	bl	8001440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	9202      	str	r2, [sp, #8]
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	2302      	movs	r3, #2
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	460a      	mov	r2, r1
 800a21c:	4911      	ldr	r1, [pc, #68]	@ (800a264 <xTimerCreateTimerTask+0x88>)
 800a21e:	4812      	ldr	r0, [pc, #72]	@ (800a268 <xTimerCreateTimerTask+0x8c>)
 800a220:	f7fe fff8 	bl	8009214 <xTaskCreateStatic>
 800a224:	4603      	mov	r3, r0
 800a226:	4a11      	ldr	r2, [pc, #68]	@ (800a26c <xTimerCreateTimerTask+0x90>)
 800a228:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a22a:	4b10      	ldr	r3, [pc, #64]	@ (800a26c <xTimerCreateTimerTask+0x90>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a232:	2301      	movs	r3, #1
 800a234:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10b      	bne.n	800a254 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	613b      	str	r3, [r7, #16]
}
 800a24e:	bf00      	nop
 800a250:	bf00      	nop
 800a252:	e7fd      	b.n	800a250 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a254:	697b      	ldr	r3, [r7, #20]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20001310 	.word	0x20001310
 800a264:	0800ee68 	.word	0x0800ee68
 800a268:	0800a3a9 	.word	0x0800a3a9
 800a26c:	20001314 	.word	0x20001314

0800a270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	@ 0x28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a27e:	2300      	movs	r3, #0
 800a280:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10b      	bne.n	800a2a0 <xTimerGenericCommand+0x30>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	623b      	str	r3, [r7, #32]
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	e7fd      	b.n	800a29c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a2a0:	4b19      	ldr	r3, [pc, #100]	@ (800a308 <xTimerGenericCommand+0x98>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d02a      	beq.n	800a2fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b05      	cmp	r3, #5
 800a2b8:	dc18      	bgt.n	800a2ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a2ba:	f7ff fe83 	bl	8009fc4 <xTaskGetSchedulerState>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d109      	bne.n	800a2d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2c4:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <xTimerGenericCommand+0x98>)
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	f107 0114 	add.w	r1, r7, #20
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2d0:	f7fe fbb0 	bl	8008a34 <xQueueGenericSend>
 800a2d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2d6:	e012      	b.n	800a2fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a308 <xTimerGenericCommand+0x98>)
 800a2da:	6818      	ldr	r0, [r3, #0]
 800a2dc:	f107 0114 	add.w	r1, r7, #20
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f7fe fba6 	bl	8008a34 <xQueueGenericSend>
 800a2e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2ea:	e008      	b.n	800a2fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2ec:	4b06      	ldr	r3, [pc, #24]	@ (800a308 <xTimerGenericCommand+0x98>)
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	f107 0114 	add.w	r1, r7, #20
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	f7fe fc9e 	bl	8008c38 <xQueueGenericSendFromISR>
 800a2fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a300:	4618      	mov	r0, r3
 800a302:	3728      	adds	r7, #40	@ 0x28
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	20001310 	.word	0x20001310

0800a30c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b088      	sub	sp, #32
 800a310:	af02      	add	r7, sp, #8
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a316:	4b23      	ldr	r3, [pc, #140]	@ (800a3a4 <prvProcessExpiredTimer+0x98>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	3304      	adds	r3, #4
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe fa55 	bl	80087d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	d023      	beq.n	800a380 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	699a      	ldr	r2, [r3, #24]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	18d1      	adds	r1, r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	6978      	ldr	r0, [r7, #20]
 800a346:	f000 f8d5 	bl	800a4f4 <prvInsertTimerInActiveList>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d020      	beq.n	800a392 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a350:	2300      	movs	r3, #0
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	2300      	movs	r3, #0
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	2100      	movs	r1, #0
 800a35a:	6978      	ldr	r0, [r7, #20]
 800a35c:	f7ff ff88 	bl	800a270 <xTimerGenericCommand>
 800a360:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d114      	bne.n	800a392 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	60fb      	str	r3, [r7, #12]
}
 800a37a:	bf00      	nop
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a386:	f023 0301 	bic.w	r3, r3, #1
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	6978      	ldr	r0, [r7, #20]
 800a398:	4798      	blx	r3
}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20001308 	.word	0x20001308

0800a3a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3b0:	f107 0308 	add.w	r3, r7, #8
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f859 	bl	800a46c <prvGetNextExpireTime>
 800a3ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 f805 	bl	800a3d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3c6:	f000 f8d7 	bl	800a578 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3ca:	bf00      	nop
 800a3cc:	e7f0      	b.n	800a3b0 <prvTimerTask+0x8>
	...

0800a3d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3da:	f7ff fa01 	bl	80097e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3de:	f107 0308 	add.w	r3, r7, #8
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f866 	bl	800a4b4 <prvSampleTimeNow>
 800a3e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d130      	bne.n	800a452 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10a      	bne.n	800a40c <prvProcessTimerOrBlockTask+0x3c>
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d806      	bhi.n	800a40c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3fe:	f7ff f9fd 	bl	80097fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff ff81 	bl	800a30c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a40a:	e024      	b.n	800a456 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a412:	4b13      	ldr	r3, [pc, #76]	@ (800a460 <prvProcessTimerOrBlockTask+0x90>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <prvProcessTimerOrBlockTask+0x50>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <prvProcessTimerOrBlockTask+0x52>
 800a420:	2300      	movs	r3, #0
 800a422:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a424:	4b0f      	ldr	r3, [pc, #60]	@ (800a464 <prvProcessTimerOrBlockTask+0x94>)
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	4619      	mov	r1, r3
 800a432:	f7fe febb 	bl	80091ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a436:	f7ff f9e1 	bl	80097fc <xTaskResumeAll>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10a      	bne.n	800a456 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a440:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <prvProcessTimerOrBlockTask+0x98>)
 800a442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
}
 800a450:	e001      	b.n	800a456 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a452:	f7ff f9d3 	bl	80097fc <xTaskResumeAll>
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	2000130c 	.word	0x2000130c
 800a464:	20001310 	.word	0x20001310
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a474:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b0 <prvGetNextExpireTime+0x44>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <prvGetNextExpireTime+0x16>
 800a47e:	2201      	movs	r2, #1
 800a480:	e000      	b.n	800a484 <prvGetNextExpireTime+0x18>
 800a482:	2200      	movs	r2, #0
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d105      	bne.n	800a49c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a490:	4b07      	ldr	r3, [pc, #28]	@ (800a4b0 <prvGetNextExpireTime+0x44>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	e001      	b.n	800a4a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	20001308 	.word	0x20001308

0800a4b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a4bc:	f7ff fa3c 	bl	8009938 <xTaskGetTickCount>
 800a4c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a4c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f0 <prvSampleTimeNow+0x3c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d205      	bcs.n	800a4d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4cc:	f000 f91e 	bl	800a70c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	e002      	b.n	800a4de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4de:	4a04      	ldr	r2, [pc, #16]	@ (800a4f0 <prvSampleTimeNow+0x3c>)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20001318 	.word	0x20001318

0800a4f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a502:	2300      	movs	r3, #0
 800a504:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	429a      	cmp	r2, r3
 800a518:	d812      	bhi.n	800a540 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	1ad2      	subs	r2, r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	429a      	cmp	r2, r3
 800a526:	d302      	bcc.n	800a52e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a528:	2301      	movs	r3, #1
 800a52a:	617b      	str	r3, [r7, #20]
 800a52c:	e01b      	b.n	800a566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a52e:	4b10      	ldr	r3, [pc, #64]	@ (800a570 <prvInsertTimerInActiveList+0x7c>)
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3304      	adds	r3, #4
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7fe f912 	bl	8008762 <vListInsert>
 800a53e:	e012      	b.n	800a566 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d206      	bcs.n	800a556 <prvInsertTimerInActiveList+0x62>
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d302      	bcc.n	800a556 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a550:	2301      	movs	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e007      	b.n	800a566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a556:	4b07      	ldr	r3, [pc, #28]	@ (800a574 <prvInsertTimerInActiveList+0x80>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f7fe f8fe 	bl	8008762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a566:	697b      	ldr	r3, [r7, #20]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	2000130c 	.word	0x2000130c
 800a574:	20001308 	.word	0x20001308

0800a578 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08c      	sub	sp, #48	@ 0x30
 800a57c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a57e:	e0b2      	b.n	800a6e6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f2c0 80af 	blt.w	800a6e6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d004      	beq.n	800a59e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a596:	3304      	adds	r3, #4
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe f91b 	bl	80087d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a59e:	1d3b      	adds	r3, r7, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff ff87 	bl	800a4b4 <prvSampleTimeNow>
 800a5a6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2b09      	cmp	r3, #9
 800a5ac:	f200 8098 	bhi.w	800a6e0 <prvProcessReceivedCommands+0x168>
 800a5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b8 <prvProcessReceivedCommands+0x40>)
 800a5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b6:	bf00      	nop
 800a5b8:	0800a5e1 	.word	0x0800a5e1
 800a5bc:	0800a5e1 	.word	0x0800a5e1
 800a5c0:	0800a5e1 	.word	0x0800a5e1
 800a5c4:	0800a657 	.word	0x0800a657
 800a5c8:	0800a66b 	.word	0x0800a66b
 800a5cc:	0800a6b7 	.word	0x0800a6b7
 800a5d0:	0800a5e1 	.word	0x0800a5e1
 800a5d4:	0800a5e1 	.word	0x0800a5e1
 800a5d8:	0800a657 	.word	0x0800a657
 800a5dc:	0800a66b 	.word	0x0800a66b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5e6:	f043 0301 	orr.w	r3, r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	18d1      	adds	r1, r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6a3a      	ldr	r2, [r7, #32]
 800a5fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a600:	f7ff ff78 	bl	800a4f4 <prvInsertTimerInActiveList>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d06c      	beq.n	800a6e4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a610:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a614:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a618:	f003 0304 	and.w	r3, r3, #4
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d061      	beq.n	800a6e4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	441a      	add	r2, r3
 800a628:	2300      	movs	r3, #0
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	2300      	movs	r3, #0
 800a62e:	2100      	movs	r1, #0
 800a630:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a632:	f7ff fe1d 	bl	800a270 <xTimerGenericCommand>
 800a636:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d152      	bne.n	800a6e4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	61bb      	str	r3, [r7, #24]
}
 800a650:	bf00      	nop
 800a652:	bf00      	nop
 800a654:	e7fd      	b.n	800a652 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a658:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a65c:	f023 0301 	bic.w	r3, r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a668:	e03d      	b.n	800a6e6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	b2da      	uxtb	r2, r3
 800a676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10b      	bne.n	800a6a2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	617b      	str	r3, [r7, #20]
}
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
 800a6a0:	e7fd      	b.n	800a69e <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	18d1      	adds	r1, r2, r3
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	6a3a      	ldr	r2, [r7, #32]
 800a6ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a6b0:	f7ff ff20 	bl	800a4f4 <prvInsertTimerInActiveList>
					break;
 800a6b4:	e017      	b.n	800a6e6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a6bc:	f003 0302 	and.w	r3, r3, #2
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d103      	bne.n	800a6cc <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800a6c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a6c6:	f000 fbe7 	bl	800ae98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6ca:	e00c      	b.n	800a6e6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a6d2:	f023 0301 	bic.w	r3, r3, #1
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800a6de:	e002      	b.n	800a6e6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800a6e0:	bf00      	nop
 800a6e2:	e000      	b.n	800a6e6 <prvProcessReceivedCommands+0x16e>
					break;
 800a6e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6e6:	4b08      	ldr	r3, [pc, #32]	@ (800a708 <prvProcessReceivedCommands+0x190>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f107 0108 	add.w	r1, r7, #8
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe fb3f 	bl	8008d74 <xQueueReceive>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f47f af41 	bne.w	800a580 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a6fe:	bf00      	nop
 800a700:	bf00      	nop
 800a702:	3728      	adds	r7, #40	@ 0x28
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	20001310 	.word	0x20001310

0800a70c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a712:	e049      	b.n	800a7a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a714:	4b2e      	ldr	r3, [pc, #184]	@ (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a71e:	4b2c      	ldr	r3, [pc, #176]	@ (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe f851 	bl	80087d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d02f      	beq.n	800a7a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	429a      	cmp	r2, r3
 800a758:	d90e      	bls.n	800a778 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a766:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3304      	adds	r3, #4
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f7fd fff6 	bl	8008762 <vListInsert>
 800a776:	e017      	b.n	800a7a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a778:	2300      	movs	r3, #0
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	2300      	movs	r3, #0
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	2100      	movs	r1, #0
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f7ff fd74 	bl	800a270 <xTimerGenericCommand>
 800a788:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10b      	bne.n	800a7a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	603b      	str	r3, [r7, #0]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a8:	4b09      	ldr	r3, [pc, #36]	@ (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1b0      	bne.n	800a714 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7b2:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7b8:	4b06      	ldr	r3, [pc, #24]	@ (800a7d4 <prvSwitchTimerLists+0xc8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a04      	ldr	r2, [pc, #16]	@ (800a7d0 <prvSwitchTimerLists+0xc4>)
 800a7be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7c0:	4a04      	ldr	r2, [pc, #16]	@ (800a7d4 <prvSwitchTimerLists+0xc8>)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	6013      	str	r3, [r2, #0]
}
 800a7c6:	bf00      	nop
 800a7c8:	3718      	adds	r7, #24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20001308 	.word	0x20001308
 800a7d4:	2000130c 	.word	0x2000130c

0800a7d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7de:	f000 f96b 	bl	800aab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7e2:	4b15      	ldr	r3, [pc, #84]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d120      	bne.n	800a82c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7ea:	4814      	ldr	r0, [pc, #80]	@ (800a83c <prvCheckForValidListAndQueue+0x64>)
 800a7ec:	f7fd ff68 	bl	80086c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7f0:	4813      	ldr	r0, [pc, #76]	@ (800a840 <prvCheckForValidListAndQueue+0x68>)
 800a7f2:	f7fd ff65 	bl	80086c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <prvCheckForValidListAndQueue+0x6c>)
 800a7f8:	4a10      	ldr	r2, [pc, #64]	@ (800a83c <prvCheckForValidListAndQueue+0x64>)
 800a7fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7fc:	4b12      	ldr	r3, [pc, #72]	@ (800a848 <prvCheckForValidListAndQueue+0x70>)
 800a7fe:	4a10      	ldr	r2, [pc, #64]	@ (800a840 <prvCheckForValidListAndQueue+0x68>)
 800a800:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a802:	2300      	movs	r3, #0
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4b11      	ldr	r3, [pc, #68]	@ (800a84c <prvCheckForValidListAndQueue+0x74>)
 800a808:	4a11      	ldr	r2, [pc, #68]	@ (800a850 <prvCheckForValidListAndQueue+0x78>)
 800a80a:	210c      	movs	r1, #12
 800a80c:	200a      	movs	r0, #10
 800a80e:	f7fe f875 	bl	80088fc <xQueueGenericCreateStatic>
 800a812:	4603      	mov	r3, r0
 800a814:	4a08      	ldr	r2, [pc, #32]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a816:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a818:	4b07      	ldr	r3, [pc, #28]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a820:	4b05      	ldr	r3, [pc, #20]	@ (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	490b      	ldr	r1, [pc, #44]	@ (800a854 <prvCheckForValidListAndQueue+0x7c>)
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fc96 	bl	8009158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a82c:	f000 f976 	bl	800ab1c <vPortExitCritical>
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20001310 	.word	0x20001310
 800a83c:	200012e0 	.word	0x200012e0
 800a840:	200012f4 	.word	0x200012f4
 800a844:	20001308 	.word	0x20001308
 800a848:	2000130c 	.word	0x2000130c
 800a84c:	20001394 	.word	0x20001394
 800a850:	2000131c 	.word	0x2000131c
 800a854:	0800ee70 	.word	0x0800ee70

0800a858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3b04      	subs	r3, #4
 800a868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b04      	subs	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f023 0201 	bic.w	r2, r3, #1
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3b04      	subs	r3, #4
 800a886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a888:	4a0c      	ldr	r2, [pc, #48]	@ (800a8bc <pxPortInitialiseStack+0x64>)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3b14      	subs	r3, #20
 800a892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f06f 0202 	mvn.w	r2, #2
 800a8a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3b20      	subs	r3, #32
 800a8ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	0800a8c1 	.word	0x0800a8c1

0800a8c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8ca:	4b13      	ldr	r3, [pc, #76]	@ (800a918 <prvTaskExitError+0x58>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d00b      	beq.n	800a8ec <prvTaskExitError+0x2c>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	60fb      	str	r3, [r7, #12]
}
 800a8e6:	bf00      	nop
 800a8e8:	bf00      	nop
 800a8ea:	e7fd      	b.n	800a8e8 <prvTaskExitError+0x28>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	60bb      	str	r3, [r7, #8]
}
 800a8fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a900:	bf00      	nop
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0fc      	beq.n	800a902 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	2000000c 	.word	0x2000000c
 800a91c:	00000000 	.word	0x00000000

0800a920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a920:	4b07      	ldr	r3, [pc, #28]	@ (800a940 <pxCurrentTCBConst2>)
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	6808      	ldr	r0, [r1, #0]
 800a926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	f380 8809 	msr	PSP, r0
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8811 	msr	BASEPRI, r0
 800a93a:	4770      	bx	lr
 800a93c:	f3af 8000 	nop.w

0800a940 <pxCurrentTCBConst2>:
 800a940:	200011b4 	.word	0x200011b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop

0800a948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a948:	4808      	ldr	r0, [pc, #32]	@ (800a96c <prvPortStartFirstTask+0x24>)
 800a94a:	6800      	ldr	r0, [r0, #0]
 800a94c:	6800      	ldr	r0, [r0, #0]
 800a94e:	f380 8808 	msr	MSP, r0
 800a952:	f04f 0000 	mov.w	r0, #0
 800a956:	f380 8814 	msr	CONTROL, r0
 800a95a:	b662      	cpsie	i
 800a95c:	b661      	cpsie	f
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	df00      	svc	0
 800a968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a96a:	bf00      	nop
 800a96c:	e000ed08 	.word	0xe000ed08

0800a970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a976:	4b47      	ldr	r3, [pc, #284]	@ (800aa94 <xPortStartScheduler+0x124>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a47      	ldr	r2, [pc, #284]	@ (800aa98 <xPortStartScheduler+0x128>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d10b      	bne.n	800a998 <xPortStartScheduler+0x28>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	60fb      	str	r3, [r7, #12]
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a998:	4b3e      	ldr	r3, [pc, #248]	@ (800aa94 <xPortStartScheduler+0x124>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa9c <xPortStartScheduler+0x12c>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d10b      	bne.n	800a9ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	613b      	str	r3, [r7, #16]
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	e7fd      	b.n	800a9b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9ba:	4b39      	ldr	r3, [pc, #228]	@ (800aaa0 <xPortStartScheduler+0x130>)
 800a9bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	22ff      	movs	r2, #255	@ 0xff
 800a9ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	4b31      	ldr	r3, [pc, #196]	@ (800aaa4 <xPortStartScheduler+0x134>)
 800a9e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9e2:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800a9e4:	2207      	movs	r2, #7
 800a9e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e8:	e009      	b.n	800a9fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	4a2d      	ldr	r2, [pc, #180]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800a9f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9fe:	78fb      	ldrb	r3, [r7, #3]
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa06:	2b80      	cmp	r3, #128	@ 0x80
 800aa08:	d0ef      	beq.n	800a9ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa0a:	4b27      	ldr	r3, [pc, #156]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f1c3 0307 	rsb	r3, r3, #7
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d00b      	beq.n	800aa2e <xPortStartScheduler+0xbe>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	60bb      	str	r3, [r7, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	e7fd      	b.n	800aa2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	021b      	lsls	r3, r3, #8
 800aa34:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa38:	4b1b      	ldr	r3, [pc, #108]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa40:	4a19      	ldr	r2, [pc, #100]	@ (800aaa8 <xPortStartScheduler+0x138>)
 800aa42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa4c:	4b17      	ldr	r3, [pc, #92]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a16      	ldr	r2, [pc, #88]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa58:	4b14      	ldr	r3, [pc, #80]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a13      	ldr	r2, [pc, #76]	@ (800aaac <xPortStartScheduler+0x13c>)
 800aa5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa64:	f000 f8da 	bl	800ac1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa68:	4b11      	ldr	r3, [pc, #68]	@ (800aab0 <xPortStartScheduler+0x140>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa6e:	f000 f8f9 	bl	800ac64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa72:	4b10      	ldr	r3, [pc, #64]	@ (800aab4 <xPortStartScheduler+0x144>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a0f      	ldr	r2, [pc, #60]	@ (800aab4 <xPortStartScheduler+0x144>)
 800aa78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa7e:	f7ff ff63 	bl	800a948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa82:	f7ff f823 	bl	8009acc <vTaskSwitchContext>
	prvTaskExitError();
 800aa86:	f7ff ff1b 	bl	800a8c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	e000ed00 	.word	0xe000ed00
 800aa98:	410fc271 	.word	0x410fc271
 800aa9c:	410fc270 	.word	0x410fc270
 800aaa0:	e000e400 	.word	0xe000e400
 800aaa4:	200013dc 	.word	0x200013dc
 800aaa8:	200013e0 	.word	0x200013e0
 800aaac:	e000ed20 	.word	0xe000ed20
 800aab0:	2000000c 	.word	0x2000000c
 800aab4:	e000ef34 	.word	0xe000ef34

0800aab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aad2:	4b10      	ldr	r3, [pc, #64]	@ (800ab14 <vPortEnterCritical+0x5c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3301      	adds	r3, #1
 800aad8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab14 <vPortEnterCritical+0x5c>)
 800aada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aadc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab14 <vPortEnterCritical+0x5c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d110      	bne.n	800ab06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aae4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab18 <vPortEnterCritical+0x60>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00b      	beq.n	800ab06 <vPortEnterCritical+0x4e>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	603b      	str	r3, [r7, #0]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <vPortEnterCritical+0x4a>
	}
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	2000000c 	.word	0x2000000c
 800ab18:	e000ed04 	.word	0xe000ed04

0800ab1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab22:	4b12      	ldr	r3, [pc, #72]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10b      	bne.n	800ab42 <vPortExitCritical+0x26>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	607b      	str	r3, [r7, #4]
}
 800ab3c:	bf00      	nop
 800ab3e:	bf00      	nop
 800ab40:	e7fd      	b.n	800ab3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab42:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	4a08      	ldr	r2, [pc, #32]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <vPortExitCritical+0x50>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d105      	bne.n	800ab60 <vPortExitCritical+0x44>
 800ab54:	2300      	movs	r3, #0
 800ab56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	f383 8811 	msr	BASEPRI, r3
}
 800ab5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	2000000c 	.word	0x2000000c

0800ab70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab70:	f3ef 8009 	mrs	r0, PSP
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	4b15      	ldr	r3, [pc, #84]	@ (800abd0 <pxCurrentTCBConst>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f01e 0f10 	tst.w	lr, #16
 800ab80:	bf08      	it	eq
 800ab82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	6010      	str	r0, [r2, #0]
 800ab8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab94:	f380 8811 	msr	BASEPRI, r0
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f7fe ff94 	bl	8009acc <vTaskSwitchContext>
 800aba4:	f04f 0000 	mov.w	r0, #0
 800aba8:	f380 8811 	msr	BASEPRI, r0
 800abac:	bc09      	pop	{r0, r3}
 800abae:	6819      	ldr	r1, [r3, #0]
 800abb0:	6808      	ldr	r0, [r1, #0]
 800abb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb6:	f01e 0f10 	tst.w	lr, #16
 800abba:	bf08      	it	eq
 800abbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abc0:	f380 8809 	msr	PSP, r0
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w

0800abd0 <pxCurrentTCBConst>:
 800abd0:	200011b4 	.word	0x200011b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop

0800abd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	607b      	str	r3, [r7, #4]
}
 800abf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abf2:	f7fe feb1 	bl	8009958 <xTaskIncrementTick>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abfc:	4b06      	ldr	r3, [pc, #24]	@ (800ac18 <SysTick_Handler+0x40>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	2300      	movs	r3, #0
 800ac06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f383 8811 	msr	BASEPRI, r3
}
 800ac0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac20:	4b0b      	ldr	r3, [pc, #44]	@ (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac26:	4b0b      	ldr	r3, [pc, #44]	@ (800ac54 <vPortSetupTimerInterrupt+0x38>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <vPortSetupTimerInterrupt+0x3c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a0a      	ldr	r2, [pc, #40]	@ (800ac5c <vPortSetupTimerInterrupt+0x40>)
 800ac32:	fba2 2303 	umull	r2, r3, r2, r3
 800ac36:	099b      	lsrs	r3, r3, #6
 800ac38:	4a09      	ldr	r2, [pc, #36]	@ (800ac60 <vPortSetupTimerInterrupt+0x44>)
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac3e:	4b04      	ldr	r3, [pc, #16]	@ (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac40:	2207      	movs	r2, #7
 800ac42:	601a      	str	r2, [r3, #0]
}
 800ac44:	bf00      	nop
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	e000e010 	.word	0xe000e010
 800ac54:	e000e018 	.word	0xe000e018
 800ac58:	20000000 	.word	0x20000000
 800ac5c:	10624dd3 	.word	0x10624dd3
 800ac60:	e000e014 	.word	0xe000e014

0800ac64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac74 <vPortEnableVFP+0x10>
 800ac68:	6801      	ldr	r1, [r0, #0]
 800ac6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac6e:	6001      	str	r1, [r0, #0]
 800ac70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac72:	bf00      	nop
 800ac74:	e000ed88 	.word	0xe000ed88

0800ac78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac7e:	f3ef 8305 	mrs	r3, IPSR
 800ac82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b0f      	cmp	r3, #15
 800ac88:	d915      	bls.n	800acb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac8a:	4a18      	ldr	r2, [pc, #96]	@ (800acec <vPortValidateInterruptPriority+0x74>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac94:	4b16      	ldr	r3, [pc, #88]	@ (800acf0 <vPortValidateInterruptPriority+0x78>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	7afa      	ldrb	r2, [r7, #11]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d20b      	bcs.n	800acb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	e7fd      	b.n	800acb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acb6:	4b0f      	ldr	r3, [pc, #60]	@ (800acf4 <vPortValidateInterruptPriority+0x7c>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800acbe:	4b0e      	ldr	r3, [pc, #56]	@ (800acf8 <vPortValidateInterruptPriority+0x80>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d90b      	bls.n	800acde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	603b      	str	r3, [r7, #0]
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	e7fd      	b.n	800acda <vPortValidateInterruptPriority+0x62>
	}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	e000e3f0 	.word	0xe000e3f0
 800acf0:	200013dc 	.word	0x200013dc
 800acf4:	e000ed0c 	.word	0xe000ed0c
 800acf8:	200013e0 	.word	0x200013e0

0800acfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08a      	sub	sp, #40	@ 0x28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad08:	f7fe fd6a 	bl	80097e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae80 <pvPortMalloc+0x184>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad14:	f000 f924 	bl	800af60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad18:	4b5a      	ldr	r3, [pc, #360]	@ (800ae84 <pvPortMalloc+0x188>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4013      	ands	r3, r2
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f040 8095 	bne.w	800ae50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01e      	beq.n	800ad6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ad2c:	2208      	movs	r2, #8
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4413      	add	r3, r2
 800ad32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d015      	beq.n	800ad6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f023 0307 	bic.w	r3, r3, #7
 800ad44:	3308      	adds	r3, #8
 800ad46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <pvPortMalloc+0x6e>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	617b      	str	r3, [r7, #20]
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	e7fd      	b.n	800ad66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d06f      	beq.n	800ae50 <pvPortMalloc+0x154>
 800ad70:	4b45      	ldr	r3, [pc, #276]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d86a      	bhi.n	800ae50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad7a:	4b44      	ldr	r3, [pc, #272]	@ (800ae8c <pvPortMalloc+0x190>)
 800ad7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad7e:	4b43      	ldr	r3, [pc, #268]	@ (800ae8c <pvPortMalloc+0x190>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad84:	e004      	b.n	800ad90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d903      	bls.n	800ada2 <pvPortMalloc+0xa6>
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f1      	bne.n	800ad86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ada2:	4b37      	ldr	r3, [pc, #220]	@ (800ae80 <pvPortMalloc+0x184>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d051      	beq.n	800ae50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adac:	6a3b      	ldr	r3, [r7, #32]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2208      	movs	r2, #8
 800adb2:	4413      	add	r3, r2
 800adb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	1ad2      	subs	r2, r2, r3
 800adc6:	2308      	movs	r3, #8
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	429a      	cmp	r2, r3
 800adcc:	d920      	bls.n	800ae10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4413      	add	r3, r2
 800add4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00b      	beq.n	800adf8 <pvPortMalloc+0xfc>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	613b      	str	r3, [r7, #16]
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	e7fd      	b.n	800adf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	1ad2      	subs	r2, r2, r3
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae0a:	69b8      	ldr	r0, [r7, #24]
 800ae0c:	f000 f90a 	bl	800b024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae10:	4b1d      	ldr	r3, [pc, #116]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	4b1b      	ldr	r3, [pc, #108]	@ (800ae90 <pvPortMalloc+0x194>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d203      	bcs.n	800ae32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae2a:	4b17      	ldr	r3, [pc, #92]	@ (800ae88 <pvPortMalloc+0x18c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a18      	ldr	r2, [pc, #96]	@ (800ae90 <pvPortMalloc+0x194>)
 800ae30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <pvPortMalloc+0x188>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae46:	4b13      	ldr	r3, [pc, #76]	@ (800ae94 <pvPortMalloc+0x198>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	4a11      	ldr	r2, [pc, #68]	@ (800ae94 <pvPortMalloc+0x198>)
 800ae4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae50:	f7fe fcd4 	bl	80097fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00b      	beq.n	800ae76 <pvPortMalloc+0x17a>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	60fb      	str	r3, [r7, #12]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <pvPortMalloc+0x176>
	return pvReturn;
 800ae76:	69fb      	ldr	r3, [r7, #28]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3728      	adds	r7, #40	@ 0x28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	200033ec 	.word	0x200033ec
 800ae84:	20003400 	.word	0x20003400
 800ae88:	200033f0 	.word	0x200033f0
 800ae8c:	200033e4 	.word	0x200033e4
 800ae90:	200033f4 	.word	0x200033f4
 800ae94:	200033f8 	.word	0x200033f8

0800ae98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d04f      	beq.n	800af4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeaa:	2308      	movs	r3, #8
 800aeac:	425b      	negs	r3, r3
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	4b25      	ldr	r3, [pc, #148]	@ (800af54 <vPortFree+0xbc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4013      	ands	r3, r2
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10b      	bne.n	800aede <vPortFree+0x46>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	60fb      	str	r3, [r7, #12]
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	e7fd      	b.n	800aeda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00b      	beq.n	800aefe <vPortFree+0x66>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	60bb      	str	r3, [r7, #8]
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	e7fd      	b.n	800aefa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	4b14      	ldr	r3, [pc, #80]	@ (800af54 <vPortFree+0xbc>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4013      	ands	r3, r2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01e      	beq.n	800af4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d11a      	bne.n	800af4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	4b0e      	ldr	r3, [pc, #56]	@ (800af54 <vPortFree+0xbc>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	43db      	mvns	r3, r3
 800af1e:	401a      	ands	r2, r3
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af24:	f7fe fc5c 	bl	80097e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	4b0a      	ldr	r3, [pc, #40]	@ (800af58 <vPortFree+0xc0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4413      	add	r3, r2
 800af32:	4a09      	ldr	r2, [pc, #36]	@ (800af58 <vPortFree+0xc0>)
 800af34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af36:	6938      	ldr	r0, [r7, #16]
 800af38:	f000 f874 	bl	800b024 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af3c:	4b07      	ldr	r3, [pc, #28]	@ (800af5c <vPortFree+0xc4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	4a06      	ldr	r2, [pc, #24]	@ (800af5c <vPortFree+0xc4>)
 800af44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af46:	f7fe fc59 	bl	80097fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af4a:	bf00      	nop
 800af4c:	3718      	adds	r7, #24
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20003400 	.word	0x20003400
 800af58:	200033f0 	.word	0x200033f0
 800af5c:	200033fc 	.word	0x200033fc

0800af60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800af6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af6c:	4b27      	ldr	r3, [pc, #156]	@ (800b00c <prvHeapInit+0xac>)
 800af6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00c      	beq.n	800af94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3307      	adds	r3, #7
 800af7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f023 0307 	bic.w	r3, r3, #7
 800af86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	4a1f      	ldr	r2, [pc, #124]	@ (800b00c <prvHeapInit+0xac>)
 800af90:	4413      	add	r3, r2
 800af92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af98:	4a1d      	ldr	r2, [pc, #116]	@ (800b010 <prvHeapInit+0xb0>)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af9e:	4b1c      	ldr	r3, [pc, #112]	@ (800b010 <prvHeapInit+0xb0>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	4413      	add	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afac:	2208      	movs	r2, #8
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1a9b      	subs	r3, r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4a15      	ldr	r2, [pc, #84]	@ (800b014 <prvHeapInit+0xb4>)
 800afc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afc2:	4b14      	ldr	r3, [pc, #80]	@ (800b014 <prvHeapInit+0xb4>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2200      	movs	r2, #0
 800afc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afca:	4b12      	ldr	r3, [pc, #72]	@ (800b014 <prvHeapInit+0xb4>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	1ad2      	subs	r2, r2, r3
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afe0:	4b0c      	ldr	r3, [pc, #48]	@ (800b014 <prvHeapInit+0xb4>)
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4a0a      	ldr	r2, [pc, #40]	@ (800b018 <prvHeapInit+0xb8>)
 800afee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	4a09      	ldr	r2, [pc, #36]	@ (800b01c <prvHeapInit+0xbc>)
 800aff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aff8:	4b09      	ldr	r3, [pc, #36]	@ (800b020 <prvHeapInit+0xc0>)
 800affa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800affe:	601a      	str	r2, [r3, #0]
}
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	200013e4 	.word	0x200013e4
 800b010:	200033e4 	.word	0x200033e4
 800b014:	200033ec 	.word	0x200033ec
 800b018:	200033f4 	.word	0x200033f4
 800b01c:	200033f0 	.word	0x200033f0
 800b020:	20003400 	.word	0x20003400

0800b024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b02c:	4b28      	ldr	r3, [pc, #160]	@ (800b0d0 <prvInsertBlockIntoFreeList+0xac>)
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e002      	b.n	800b038 <prvInsertBlockIntoFreeList+0x14>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d8f7      	bhi.n	800b032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	4413      	add	r3, r2
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d108      	bne.n	800b066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	441a      	add	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	441a      	add	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d118      	bne.n	800b0ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	4b15      	ldr	r3, [pc, #84]	@ (800b0d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	429a      	cmp	r2, r3
 800b084:	d00d      	beq.n	800b0a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	441a      	add	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	e008      	b.n	800b0b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	e003      	b.n	800b0b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d002      	beq.n	800b0c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0c2:	bf00      	nop
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	200033e4 	.word	0x200033e4
 800b0d4:	200033ec 	.word	0x200033ec

0800b0d8 <prv_alloc_token>:
 * \brief           Allocate new token for JSON block
 * \param[in]       lwobj: LwJSON instance
 * \return          Pointer to new token
 */
static lwjson_token_t*
prv_alloc_token(lwjson_t* lwobj) {
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
    if (lwobj->next_free_token_pos < lwobj->tokens_len) {
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	689a      	ldr	r2, [r3, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d21a      	bcs.n	800b122 <prv_alloc_token+0x4a>
        LWJSON_MEMSET(&lwobj->tokens[lwobj->next_free_token_pos], 0x00, sizeof(*lwobj->tokens));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6819      	ldr	r1, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	689a      	ldr	r2, [r3, #8]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	4413      	add	r3, r2
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	440b      	add	r3, r1
 800b0fe:	2218      	movs	r2, #24
 800b100:	2100      	movs	r1, #0
 800b102:	4618      	mov	r0, r3
 800b104:	f001 fc6a 	bl	800c9dc <memset>
        return &lwobj->tokens[lwobj->next_free_token_pos++];
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6819      	ldr	r1, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	689a      	ldr	r2, [r3, #8]
 800b110:	1c50      	adds	r0, r2, #1
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6098      	str	r0, [r3, #8]
 800b116:	4613      	mov	r3, r2
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	4413      	add	r3, r2
 800b11c:	00db      	lsls	r3, r3, #3
 800b11e:	440b      	add	r3, r1
 800b120:	e000      	b.n	800b124 <prv_alloc_token+0x4c>
    }
    return NULL;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <prv_skip_blank>:
 * \brief           Skip all characters that are considered *blank* as per RFC4627
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_skip_blank(lwjson_int_str_t* pobj) {
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 800b134:	e01d      	b.n	800b172 <prv_skip_blank+0x46>
        if (*pobj->p == ' ' || *pobj->p == '\t' || *pobj->p == '\r' || *pobj->p == '\n' || *pobj->p == '\f') {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b20      	cmp	r3, #32
 800b13e:	d013      	beq.n	800b168 <prv_skip_blank+0x3c>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b09      	cmp	r3, #9
 800b148:	d00e      	beq.n	800b168 <prv_skip_blank+0x3c>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	2b0d      	cmp	r3, #13
 800b152:	d009      	beq.n	800b168 <prv_skip_blank+0x3c>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2b0a      	cmp	r3, #10
 800b15c:	d004      	beq.n	800b168 <prv_skip_blank+0x3c>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b0c      	cmp	r3, #12
 800b166:	d117      	bne.n	800b198 <prv_skip_blank+0x6c>
            ++pobj->p;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	1c5a      	adds	r2, r3, #1
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	609a      	str	r2, [r3, #8]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00e      	beq.n	800b198 <prv_skip_blank+0x6c>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d009      	beq.n	800b198 <prv_skip_blank+0x6c>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	429a      	cmp	r2, r3
 800b196:	d3ce      	bcc.n	800b136 <prv_skip_blank+0xa>
#endif /* LWJSON_CFG_COMMENTS */
        } else {
            break;
        }
    }
    if (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d010      	beq.n	800b1c2 <prv_skip_blank+0x96>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00b      	beq.n	800b1c2 <prv_skip_blank+0x96>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689a      	ldr	r2, [r3, #8]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d201      	bcs.n	800b1c2 <prv_skip_blank+0x96>
        return lwjsonOK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e000      	b.n	800b1c4 <prv_skip_blank+0x98>
    }
    return lwjsonERRJSON;
 800b1c2:	2302      	movs	r3, #2
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <prv_parse_string>:
 * \param[out]      pout: Pointer to pointer to string that is set where string starts
 * \param[out]      poutlen: Length of string in units of characters is stored here
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_string(lwjson_int_str_t* pobj, const char** pout, size_t* poutlen) {
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b088      	sub	sp, #32
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
    lwjsonr_t res;
    size_t len = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	61fb      	str	r3, [r7, #28]

    res = prv_skip_blank(pobj);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7ff ffa3 	bl	800b12c <prv_skip_blank>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75fb      	strb	r3, [r7, #23]
    if (res != lwjsonOK) {
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <prv_parse_string+0x24>
        return res;
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	e0a6      	b.n	800b342 <prv_parse_string+0x172>
    }
    if (*pobj->p++ != '"') {
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	1c59      	adds	r1, r3, #1
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	6091      	str	r1, [r2, #8]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	2b22      	cmp	r3, #34	@ 0x22
 800b202:	d001      	beq.n	800b208 <prv_parse_string+0x38>
        return lwjsonERRJSON;
 800b204:	2302      	movs	r3, #2
 800b206:	e09c      	b.n	800b342 <prv_parse_string+0x172>
    }
    *pout = pobj->p;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	601a      	str	r2, [r3, #0]
    /* Parse string but take care of escape characters */
    for (;; ++pobj->p, ++len) {
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00e      	beq.n	800b236 <prv_parse_string+0x66>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d009      	beq.n	800b236 <prv_parse_string+0x66>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	689a      	ldr	r2, [r3, #8]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	429a      	cmp	r2, r3
 800b234:	d301      	bcc.n	800b23a <prv_parse_string+0x6a>
            return lwjsonERRJSON;
 800b236:	2302      	movs	r3, #2
 800b238:	e083      	b.n	800b342 <prv_parse_string+0x172>
        }
        /* Check special characters */
        if (*pobj->p == '\\') {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b5c      	cmp	r3, #92	@ 0x5c
 800b242:	d164      	bne.n	800b30e <prv_parse_string+0x13e>
            ++pobj->p;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	1c5a      	adds	r2, r3, #1
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	609a      	str	r2, [r3, #8]
            ++len;
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	3301      	adds	r3, #1
 800b252:	61fb      	str	r3, [r7, #28]
            switch (*pobj->p) {
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2b75      	cmp	r3, #117	@ 0x75
 800b25c:	dc55      	bgt.n	800b30a <prv_parse_string+0x13a>
 800b25e:	2b5c      	cmp	r3, #92	@ 0x5c
 800b260:	da04      	bge.n	800b26c <prv_parse_string+0x9c>
 800b262:	2b22      	cmp	r3, #34	@ 0x22
 800b264:	d063      	beq.n	800b32e <prv_parse_string+0x15e>
 800b266:	2b2f      	cmp	r3, #47	@ 0x2f
 800b268:	d061      	beq.n	800b32e <prv_parse_string+0x15e>
 800b26a:	e04e      	b.n	800b30a <prv_parse_string+0x13a>
 800b26c:	3b5c      	subs	r3, #92	@ 0x5c
 800b26e:	2201      	movs	r2, #1
 800b270:	409a      	lsls	r2, r3
 800b272:	4b36      	ldr	r3, [pc, #216]	@ (800b34c <prv_parse_string+0x17c>)
 800b274:	4013      	ands	r3, r2
 800b276:	2b00      	cmp	r3, #0
 800b278:	bf14      	ite	ne
 800b27a:	2301      	movne	r3, #1
 800b27c:	2300      	moveq	r3, #0
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d154      	bne.n	800b32e <prv_parse_string+0x15e>
 800b284:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bf14      	ite	ne
 800b28c:	2301      	movne	r3, #1
 800b28e:	2300      	moveq	r3, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d039      	beq.n	800b30a <prv_parse_string+0x13a>
                case 'f':  /* fallthrough */
                case 'n':  /* fallthrough */
                case 'r':  /* fallthrough */
                case 't': break;
                case 'u':
                    ++pobj->p;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	1c5a      	adds	r2, r3, #1
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	61bb      	str	r3, [r7, #24]
 800b2a4:	e02d      	b.n	800b302 <prv_parse_string+0x132>
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800b2ae:	d904      	bls.n	800b2ba <prv_parse_string+0xea>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b39      	cmp	r3, #57	@ 0x39
 800b2b8:	d915      	bls.n	800b2e6 <prv_parse_string+0x116>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b60      	cmp	r3, #96	@ 0x60
 800b2c2:	d904      	bls.n	800b2ce <prv_parse_string+0xfe>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b66      	cmp	r3, #102	@ 0x66
 800b2cc:	d90b      	bls.n	800b2e6 <prv_parse_string+0x116>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 800b2d4:	2b40      	cmp	r3, #64	@ 0x40
 800b2d6:	d904      	bls.n	800b2e2 <prv_parse_string+0x112>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	2b46      	cmp	r3, #70	@ 0x46
 800b2e0:	d901      	bls.n	800b2e6 <prv_parse_string+0x116>
                            return lwjsonERRJSON;
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e02d      	b.n	800b342 <prv_parse_string+0x172>
                        }
                        if (i < 3) {
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d804      	bhi.n	800b2f6 <prv_parse_string+0x126>
                            ++pobj->p;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	61bb      	str	r3, [r7, #24]
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	3301      	adds	r3, #1
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	2b03      	cmp	r3, #3
 800b306:	d9ce      	bls.n	800b2a6 <prv_parse_string+0xd6>
                        }
                    }
                    break;
 800b308:	e012      	b.n	800b330 <prv_parse_string+0x160>
                default: return lwjsonERRJSON;
 800b30a:	2302      	movs	r3, #2
 800b30c:	e019      	b.n	800b342 <prv_parse_string+0x172>
            }
        } else if (*pobj->p == '"') {
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b22      	cmp	r3, #34	@ 0x22
 800b316:	d10b      	bne.n	800b330 <prv_parse_string+0x160>
            ++pobj->p;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	609a      	str	r2, [r3, #8]
            break;
 800b322:	bf00      	nop
        }
    }
    *poutlen = len;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	69fa      	ldr	r2, [r7, #28]
 800b328:	601a      	str	r2, [r3, #0]
    return res;
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
 800b32c:	e009      	b.n	800b342 <prv_parse_string+0x172>
                case 't': break;
 800b32e:	bf00      	nop
    for (;; ++pobj->p, ++len) {
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	609a      	str	r2, [r3, #8]
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	3301      	adds	r3, #1
 800b33e:	61fb      	str	r3, [r7, #28]
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 800b340:	e766      	b.n	800b210 <prv_parse_string+0x40>
}
 800b342:	4618      	mov	r0, r3
 800b344:	3720      	adds	r7, #32
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	01440441 	.word	0x01440441

0800b350 <prv_parse_property_name>:
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \param[out]      t: Token instance to write property name to
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_property_name(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Parse property string first */
    res = prv_parse_string(pobj, &t->token_name, &t->token_name_len);
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	f103 0108 	add.w	r1, r3, #8
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	330c      	adds	r3, #12
 800b364:	461a      	mov	r2, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff ff32 	bl	800b1d0 <prv_parse_string>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]
    if (res != lwjsonOK) {
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <prv_parse_property_name+0x2a>
        return res;
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	e01e      	b.n	800b3b8 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    res = prv_skip_blank(pobj);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff fed6 	bl	800b12c <prv_skip_blank>
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]
    if (res != lwjsonOK) {
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <prv_parse_property_name+0x3e>
        return res;
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	e014      	b.n	800b3b8 <prv_parse_property_name+0x68>
    }
    /* Must continue with colon */
    if (*pobj->p++ != ':') {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	1c59      	adds	r1, r3, #1
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	6091      	str	r1, [r2, #8]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b39c:	d001      	beq.n	800b3a2 <prv_parse_property_name+0x52>
        return lwjsonERRJSON;
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e00a      	b.n	800b3b8 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    res = prv_skip_blank(pobj);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff fec2 	bl	800b12c <prv_skip_blank>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]
    if (res != lwjsonOK) {
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <prv_parse_property_name+0x66>
        return res;
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	e000      	b.n	800b3b8 <prv_parse_property_name+0x68>
    }
    return lwjsonOK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <prv_parse_number>:
 * \param[out]      fout: Pointer to output real-type variable. Used if type is REAL.
 * \param[out]      iout: Pointer to output int-type variable. Used if type is INT.
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_number(lwjson_int_str_t* pobj, lwjson_type_t* tout, lwjson_real_t* fout, lwjson_int_t* iout) {
 800b3c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3c4:	b0aa      	sub	sp, #168	@ 0xa8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6778      	str	r0, [r7, #116]	@ 0x74
 800b3ca:	6739      	str	r1, [r7, #112]	@ 0x70
 800b3cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b3ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    lwjsonr_t res;
    uint8_t is_minus;
    lwjson_real_t real_num = 0;
 800b3d0:	f04f 0300 	mov.w	r3, #0
 800b3d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    lwjson_int_t int_num = 0;
 800b3d8:	f04f 0200 	mov.w	r2, #0
 800b3dc:	f04f 0300 	mov.w	r3, #0
 800b3e0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    lwjson_type_t type = LWJSON_TYPE_NUM_INT;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    res = prv_skip_blank(pobj);
 800b3ea:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800b3ec:	f7ff fe9e 	bl	800b12c <prv_skip_blank>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (res != lwjsonOK) {
 800b3f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <prv_parse_number+0x44>
        return res;
 800b3fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b402:	e206      	b.n	800b812 <prv_parse_number+0x452>
    }
    if (*pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 800b404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d009      	beq.n	800b422 <prv_parse_number+0x62>
 800b40e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	461a      	mov	r2, r3
 800b41a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d301      	bcc.n	800b426 <prv_parse_number+0x66>
        return lwjsonERRJSON;
 800b422:	2302      	movs	r3, #2
 800b424:	e1f5      	b.n	800b812 <prv_parse_number+0x452>
    }
    is_minus = *pobj->p == '-' ? (++pobj->p, 1) : 0;
 800b426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b2d      	cmp	r3, #45	@ 0x2d
 800b42e:	d106      	bne.n	800b43e <prv_parse_number+0x7e>
 800b430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b438:	609a      	str	r2, [r3, #8]
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <prv_parse_number+0x80>
 800b43e:	2300      	movs	r3, #0
 800b440:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (*pobj->p == '\0'                    /* Invalid string */
 800b444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d01a      	beq.n	800b484 <prv_parse_number+0xc4>
        || *pobj->p < '0' || *pobj->p > '9' /* Character outside number range */
 800b44e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b2f      	cmp	r3, #47	@ 0x2f
 800b456:	d915      	bls.n	800b484 <prv_parse_number+0xc4>
 800b458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b39      	cmp	r3, #57	@ 0x39
 800b460:	d810      	bhi.n	800b484 <prv_parse_number+0xc4>
        || (*pobj->p == '0'
 800b462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b30      	cmp	r3, #48	@ 0x30
 800b46a:	d10d      	bne.n	800b488 <prv_parse_number+0xc8>
            && (pobj->p[1] < '0' && pobj->p[1] > '9'))) { /* Number starts with 0 but not followed by dot */
 800b46c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	3301      	adds	r3, #1
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b2f      	cmp	r3, #47	@ 0x2f
 800b476:	d807      	bhi.n	800b488 <prv_parse_number+0xc8>
 800b478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	3301      	adds	r3, #1
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b39      	cmp	r3, #57	@ 0x39
 800b482:	d901      	bls.n	800b488 <prv_parse_number+0xc8>
        return lwjsonERRJSON;
 800b484:	2302      	movs	r3, #2
 800b486:	e1c4      	b.n	800b812 <prv_parse_number+0x452>
    }

    /* Parse number */
    for (int_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 800b488:	f04f 0200 	mov.w	r2, #0
 800b48c:	f04f 0300 	mov.w	r3, #0
 800b490:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800b494:	e034      	b.n	800b500 <prv_parse_number+0x140>
        int_num = int_num * (lwjson_int_t)10 + (*pobj->p - '0');
 800b496:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b49a:	4622      	mov	r2, r4
 800b49c:	462b      	mov	r3, r5
 800b49e:	f04f 0000 	mov.w	r0, #0
 800b4a2:	f04f 0100 	mov.w	r1, #0
 800b4a6:	0099      	lsls	r1, r3, #2
 800b4a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800b4ac:	0090      	lsls	r0, r2, #2
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	eb12 0804 	adds.w	r8, r2, r4
 800b4b6:	eb43 0905 	adc.w	r9, r3, r5
 800b4ba:	eb18 0308 	adds.w	r3, r8, r8
 800b4be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4c0:	eb49 0309 	adc.w	r3, r9, r9
 800b4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4c6:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	3b30      	subs	r3, #48	@ 0x30
 800b4d6:	17da      	asrs	r2, r3, #31
 800b4d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4da:	657a      	str	r2, [r7, #84]	@ 0x54
 800b4dc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	18c3      	adds	r3, r0, r3
 800b4e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	eb41 0303 	adc.w	r3, r1, r3
 800b4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b4f2:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
    for (int_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 800b4f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4fe:	609a      	str	r2, [r3, #8]
 800b500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	2b2f      	cmp	r3, #47	@ 0x2f
 800b508:	d904      	bls.n	800b514 <prv_parse_number+0x154>
 800b50a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b39      	cmp	r3, #57	@ 0x39
 800b512:	d9c0      	bls.n	800b496 <prv_parse_number+0xd6>
    }

    real_num = (lwjson_real_t)int_num;
 800b514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b518:	f7f5 fc16 	bl	8000d48 <__aeabi_l2f>
 800b51c:	4603      	mov	r3, r0
 800b51e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    if (pobj->p != NULL && *pobj->p == '.') { /* Number has exponent */
 800b522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 8082 	beq.w	800b630 <prv_parse_number+0x270>
 800b52c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2b2e      	cmp	r3, #46	@ 0x2e
 800b534:	d17c      	bne.n	800b630 <prv_parse_number+0x270>
        lwjson_real_t exp;
        lwjson_int_t dec_num;

        real_num = (lwjson_real_t)int_num;
 800b536:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b53a:	f7f5 fc05 	bl	8000d48 <__aeabi_l2f>
 800b53e:	4603      	mov	r3, r0
 800b540:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        type = LWJSON_TYPE_NUM_REAL;            /* Format is real */
 800b544:	2302      	movs	r3, #2
 800b546:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        ++pobj->p;                              /* Ignore comma character */
 800b54a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b552:	609a      	str	r2, [r3, #8]
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 800b554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b55c:	d904      	bls.n	800b568 <prv_parse_number+0x1a8>
 800b55e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b39      	cmp	r3, #57	@ 0x39
 800b566:	d901      	bls.n	800b56c <prv_parse_number+0x1ac>
            return lwjsonERRJSON;
 800b568:	2302      	movs	r3, #2
 800b56a:	e152      	b.n	800b812 <prv_parse_number+0x452>
        }

        /* Get number after decimal point */
        for (exp = (lwjson_real_t)1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9';
 800b56c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800b570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b574:	f04f 0200 	mov.w	r2, #0
 800b578:	f04f 0300 	mov.w	r3, #0
 800b57c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800b580:	e03c      	b.n	800b5fc <prv_parse_number+0x23c>
             ++pobj->p, exp *= (lwjson_real_t)10) {
            dec_num = dec_num * (lwjson_int_t)10 + (lwjson_int_t)(*pobj->p - '0');
 800b582:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800b586:	4622      	mov	r2, r4
 800b588:	462b      	mov	r3, r5
 800b58a:	f04f 0000 	mov.w	r0, #0
 800b58e:	f04f 0100 	mov.w	r1, #0
 800b592:	0099      	lsls	r1, r3, #2
 800b594:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800b598:	0090      	lsls	r0, r2, #2
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	eb12 0a04 	adds.w	sl, r2, r4
 800b5a2:	eb43 0b05 	adc.w	fp, r3, r5
 800b5a6:	eb1a 030a 	adds.w	r3, sl, sl
 800b5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5ac:	eb4b 030b 	adc.w	r3, fp, fp
 800b5b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5b2:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800b5b6:	4650      	mov	r0, sl
 800b5b8:	4659      	mov	r1, fp
 800b5ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	3b30      	subs	r3, #48	@ 0x30
 800b5c2:	17da      	asrs	r2, r3, #31
 800b5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b5c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800b5cc:	4623      	mov	r3, r4
 800b5ce:	18c3      	adds	r3, r0, r3
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	462b      	mov	r3, r5
 800b5d4:	eb41 0303 	adc.w	r3, r1, r3
 800b5d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b5de:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
             ++pobj->p, exp *= (lwjson_real_t)10) {
 800b5e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5ea:	609a      	str	r2, [r3, #8]
 800b5ec:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800b5f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800b5f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5f8:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        for (exp = (lwjson_real_t)1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9';
 800b5fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b2f      	cmp	r3, #47	@ 0x2f
 800b604:	d904      	bls.n	800b610 <prv_parse_number+0x250>
 800b606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b39      	cmp	r3, #57	@ 0x39
 800b60e:	d9b8      	bls.n	800b582 <prv_parse_number+0x1c2>
        }

        /* Add decimal part to number */
        real_num += (lwjson_real_t)dec_num / exp;
 800b610:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800b614:	f7f5 fb98 	bl	8000d48 <__aeabi_l2f>
 800b618:	ee06 0a90 	vmov	s13, r0
 800b61c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800b620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b624:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800b628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b62c:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    }
    if (pobj->p != NULL && (*pobj->p == 'e' || *pobj->p == 'E')) { /* Engineering mode */
 800b630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 80bb 	beq.w	800b7b0 <prv_parse_number+0x3f0>
 800b63a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b65      	cmp	r3, #101	@ 0x65
 800b642:	d005      	beq.n	800b650 <prv_parse_number+0x290>
 800b644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	2b45      	cmp	r3, #69	@ 0x45
 800b64c:	f040 80b0 	bne.w	800b7b0 <prv_parse_number+0x3f0>
        uint8_t is_minus_exp;
        lwjson_int_t exp_cnt;

        type = LWJSON_TYPE_NUM_REAL;                         /* Format is real */
 800b650:	2302      	movs	r3, #2
 800b652:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        ++pobj->p;                                           /* Ignore enginnering sing part */
 800b656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b65e:	609a      	str	r2, [r3, #8]
        is_minus_exp = *pobj->p == '-' ? (++pobj->p, 1) : 0; /* Check if negative */
 800b660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b2d      	cmp	r3, #45	@ 0x2d
 800b668:	d106      	bne.n	800b678 <prv_parse_number+0x2b8>
 800b66a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b672:	609a      	str	r2, [r3, #8]
 800b674:	2301      	movs	r3, #1
 800b676:	e000      	b.n	800b67a <prv_parse_number+0x2ba>
 800b678:	2300      	movs	r3, #0
 800b67a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
        if (*pobj->p == '+') {                               /* Optional '+' is possible too */
 800b67e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b2b      	cmp	r3, #43	@ 0x2b
 800b686:	d104      	bne.n	800b692 <prv_parse_number+0x2d2>
            ++pobj->p;
 800b688:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b690:	609a      	str	r2, [r3, #8]
        }
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 800b692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b2f      	cmp	r3, #47	@ 0x2f
 800b69a:	d904      	bls.n	800b6a6 <prv_parse_number+0x2e6>
 800b69c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b39      	cmp	r3, #57	@ 0x39
 800b6a4:	d901      	bls.n	800b6aa <prv_parse_number+0x2ea>
            return lwjsonERRJSON;
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	e0b3      	b.n	800b812 <prv_parse_number+0x452>
        }

        /* Parse exponent number */
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 800b6aa:	f04f 0200 	mov.w	r2, #0
 800b6ae:	f04f 0300 	mov.w	r3, #0
 800b6b2:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 800b6b6:	e039      	b.n	800b72c <prv_parse_number+0x36c>
            exp_cnt = exp_cnt * (lwjson_int_t)10 + (lwjson_int_t)(*pobj->p - '0');
 800b6b8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800b6bc:	4622      	mov	r2, r4
 800b6be:	462b      	mov	r3, r5
 800b6c0:	f04f 0000 	mov.w	r0, #0
 800b6c4:	f04f 0100 	mov.w	r1, #0
 800b6c8:	0099      	lsls	r1, r3, #2
 800b6ca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800b6ce:	0090      	lsls	r0, r2, #2
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	1911      	adds	r1, r2, r4
 800b6d6:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b6d8:	416b      	adcs	r3, r5
 800b6da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6dc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	18db      	adds	r3, r3, r3
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	eb42 0303 	adc.w	r3, r2, r3
 800b6ec:	61fb      	str	r3, [r7, #28]
 800b6ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b6f2:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	3b30      	subs	r3, #48	@ 0x30
 800b702:	17da      	asrs	r2, r3, #31
 800b704:	643b      	str	r3, [r7, #64]	@ 0x40
 800b706:	647a      	str	r2, [r7, #68]	@ 0x44
 800b708:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b70c:	4623      	mov	r3, r4
 800b70e:	18c3      	adds	r3, r0, r3
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	462b      	mov	r3, r5
 800b714:	eb41 0303 	adc.w	r3, r1, r3
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b71e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 800b722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b72a:	609a      	str	r2, [r3, #8]
 800b72c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b2f      	cmp	r3, #47	@ 0x2f
 800b734:	d904      	bls.n	800b740 <prv_parse_number+0x380>
 800b736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	2b39      	cmp	r3, #57	@ 0x39
 800b73e:	d9bb      	bls.n	800b6b8 <prv_parse_number+0x2f8>
        }

        /* Calculate new value for exponent 10^exponent */
        /* TODO: We could change this to lookup tables... */
        if (is_minus_exp) {
 800b740:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800b744:	2b00      	cmp	r3, #0
 800b746:	d02d      	beq.n	800b7a4 <prv_parse_number+0x3e4>
            for (; exp_cnt > 0; real_num /= (lwjson_real_t)10, --exp_cnt) {}
 800b748:	e012      	b.n	800b770 <prv_parse_number+0x3b0>
 800b74a:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800b74e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800b752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b756:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
 800b75a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800b75e:	1e51      	subs	r1, r2, #1
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	f143 33ff 	adc.w	r3, r3, #4294967295
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b76c:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
 800b770:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800b774:	2a01      	cmp	r2, #1
 800b776:	f173 0300 	sbcs.w	r3, r3, #0
 800b77a:	dae6      	bge.n	800b74a <prv_parse_number+0x38a>
 800b77c:	e018      	b.n	800b7b0 <prv_parse_number+0x3f0>
        } else {
            for (; exp_cnt > 0; real_num *= (lwjson_real_t)10, --exp_cnt) {}
 800b77e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800b782:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800b786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b78a:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
 800b78e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800b792:	1e51      	subs	r1, r2, #1
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	f143 33ff 	adc.w	r3, r3, #4294967295
 800b79a:	607b      	str	r3, [r7, #4]
 800b79c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b7a0:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
 800b7a4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800b7a8:	2a01      	cmp	r2, #1
 800b7aa:	f173 0300 	sbcs.w	r3, r3, #0
 800b7ae:	dae6      	bge.n	800b77e <prv_parse_number+0x3be>
        }
    }

    /* Write output values */
    if (tout != NULL) {
 800b7b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <prv_parse_number+0x3fe>
        *tout = type;
 800b7b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7b8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800b7bc:	701a      	strb	r2, [r3, #0]
    }
    if (type == LWJSON_TYPE_NUM_INT) {
 800b7be:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d116      	bne.n	800b7f4 <prv_parse_number+0x434>
        *iout = is_minus ? -int_num : int_num;
 800b7c6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d008      	beq.n	800b7e0 <prv_parse_number+0x420>
 800b7ce:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4250      	negs	r0, r2
 800b7d6:	6638      	str	r0, [r7, #96]	@ 0x60
 800b7d8:	eb61 0303 	sbc.w	r3, r1, r3
 800b7dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800b7de:	e003      	b.n	800b7e8 <prv_parse_number+0x428>
 800b7e0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 800b7e4:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
 800b7e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b7ea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b7ee:	e9c3 1200 	strd	r1, r2, [r3]
 800b7f2:	e00d      	b.n	800b810 <prv_parse_number+0x450>
    } else {
        *fout = is_minus ? -real_num : real_num;
 800b7f4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <prv_parse_number+0x446>
 800b7fc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800b800:	eef1 7a67 	vneg.f32	s15, s15
 800b804:	e001      	b.n	800b80a <prv_parse_number+0x44a>
 800b806:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800b80a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b80c:	edc3 7a00 	vstr	s15, [r3]
    }
    return lwjsonOK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	37a8      	adds	r7, #168	@ 0xa8
 800b816:	46bd      	mov	sp, r7
 800b818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b81c <prv_check_valid_char_after_open_bracket>:
 * \param[in,out]   pobj: JSON string
 * \param[in]       t: Token to check for type
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static inline lwjsonr_t
prv_check_valid_char_after_open_bracket(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Check next character after object open */
    res = prv_skip_blank(pobj);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7ff fc80 	bl	800b12c <prv_skip_blank>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
    if (res != lwjsonOK) {
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <prv_check_valid_char_after_open_bracket+0x1e>
        return res;
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	e04b      	b.n	800b8d2 <prv_check_valid_char_after_open_bracket+0xb6>
    }
    if (*pobj->p == '\0' || (t->type == LWJSON_TYPE_OBJECT && (*pobj->p != '"' && *pobj->p != '}'))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d043      	beq.n	800b8cc <prv_check_valid_char_after_open_bracket+0xb0>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	791b      	ldrb	r3, [r3, #4]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d109      	bne.n	800b860 <prv_check_valid_char_after_open_bracket+0x44>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2b22      	cmp	r3, #34	@ 0x22
 800b854:	d004      	beq.n	800b860 <prv_check_valid_char_after_open_bracket+0x44>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	2b7d      	cmp	r3, #125	@ 0x7d
 800b85e:	d135      	bne.n	800b8cc <prv_check_valid_char_after_open_bracket+0xb0>
        || (t->type == LWJSON_TYPE_ARRAY
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	791b      	ldrb	r3, [r3, #4]
 800b864:	2b04      	cmp	r3, #4
 800b866:	d133      	bne.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
            && (*pobj->p != '"' && *pobj->p != ']' && *pobj->p != '[' && *pobj->p != '{' && *pobj->p != '-'
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b22      	cmp	r3, #34	@ 0x22
 800b870:	d02e      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b5d      	cmp	r3, #93	@ 0x5d
 800b87a:	d029      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b5b      	cmp	r3, #91	@ 0x5b
 800b884:	d024      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b7b      	cmp	r3, #123	@ 0x7b
 800b88e:	d01f      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b2d      	cmp	r3, #45	@ 0x2d
 800b898:	d01a      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
                && (*pobj->p < '0' || *pobj->p > '9') && *pobj->p != 't' && *pobj->p != 'n' && *pobj->p != 'f'))) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8a2:	d904      	bls.n	800b8ae <prv_check_valid_char_after_open_bracket+0x92>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b39      	cmp	r3, #57	@ 0x39
 800b8ac:	d910      	bls.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b74      	cmp	r3, #116	@ 0x74
 800b8b6:	d00b      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b6e      	cmp	r3, #110	@ 0x6e
 800b8c0:	d006      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b66      	cmp	r3, #102	@ 0x66
 800b8ca:	d001      	beq.n	800b8d0 <prv_check_valid_char_after_open_bracket+0xb4>
        res = lwjsonERRJSON;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	73fb      	strb	r3, [r7, #15]
    }
    return res;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <lwjson_init>:
 * \param[in]       tokens: Pointer to array of tokens used for parsing
 * \param[in]       tokens_len: Number of tokens
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_init(lwjson_t* lwobj, lwjson_token_t* tokens, size_t tokens_len) {
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	607a      	str	r2, [r7, #4]
    LWJSON_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 800b8e6:	2230      	movs	r2, #48	@ 0x30
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f001 f876 	bl	800c9dc <memset>
    LWJSON_MEMSET(tokens, 0x00, sizeof(*tokens) * tokens_len);
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	4413      	add	r3, r2
 800b8f8:	00db      	lsls	r3, r3, #3
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	68b8      	ldr	r0, [r7, #8]
 800b900:	f001 f86c 	bl	800c9dc <memset>
    lwobj->tokens = tokens;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	601a      	str	r2, [r3, #0]
    lwobj->tokens_len = tokens_len;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	605a      	str	r2, [r3, #4]
    lwobj->first_token.type = LWJSON_TYPE_OBJECT;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2203      	movs	r2, #3
 800b914:	751a      	strb	r2, [r3, #20]
    return lwjsonOK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <lwjson_parse_ex>:
 * \param[in]       json_data: JSON string to parse
 * \param[in]       jsonČlen: JSON data length
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse_ex(lwjson_t* lwobj, const void* json_data, size_t json_len) {
 800b920:	b580      	push	{r7, lr}
 800b922:	b08c      	sub	sp, #48	@ 0x30
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
    lwjsonr_t res = lwjsonOK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    lwjson_token_t *t, *to;
    lwjson_int_str_t pobj = {.start = json_data, .len = json_len, .p = json_data};
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	613b      	str	r3, [r7, #16]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	617b      	str	r3, [r7, #20]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	61bb      	str	r3, [r7, #24]

    /* Check input parameters */
    if (lwobj == NULL || json_data == NULL || json_len == 0) {
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d005      	beq.n	800b950 <lwjson_parse_ex+0x30>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <lwjson_parse_ex+0x30>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d103      	bne.n	800b958 <lwjson_parse_ex+0x38>
        res = lwjsonERRPAR;
 800b950:	2304      	movs	r3, #4
 800b952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        goto ret;
 800b956:	e22d      	b.n	800bdb4 <lwjson_parse_ex+0x494>
    }

    /* set first token */
    to = &lwobj->first_token;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3310      	adds	r3, #16
 800b95c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* values from very beginning */
    lwobj->flags.parsed = 0;
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800b964:	f023 0301 	bic.w	r3, r3, #1
 800b968:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    lwobj->next_free_token_pos = 0;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	609a      	str	r2, [r3, #8]
    LWJSON_MEMSET(to, 0x00, sizeof(*to));
 800b972:	2218      	movs	r2, #24
 800b974:	2100      	movs	r1, #0
 800b976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b978:	f001 f830 	bl	800c9dc <memset>

    /* First parse */
    res = prv_skip_blank(&pobj);
 800b97c:	f107 0310 	add.w	r3, r7, #16
 800b980:	4618      	mov	r0, r3
 800b982:	f7ff fbd3 	bl	800b12c <prv_skip_blank>
 800b986:	4603      	mov	r3, r0
 800b988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (res != lwjsonOK) {
 800b98c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 8200 	bne.w	800bd96 <lwjson_parse_ex+0x476>
        goto ret;
    }
    if (*pobj.p == '{') {
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b7b      	cmp	r3, #123	@ 0x7b
 800b99c:	d103      	bne.n	800b9a6 <lwjson_parse_ex+0x86>
        to->type = LWJSON_TYPE_OBJECT;
 800b99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a0:	2203      	movs	r2, #3
 800b9a2:	711a      	strb	r2, [r3, #4]
 800b9a4:	e00b      	b.n	800b9be <lwjson_parse_ex+0x9e>
    } else if (*pobj.p == '[') {
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b5b      	cmp	r3, #91	@ 0x5b
 800b9ac:	d103      	bne.n	800b9b6 <lwjson_parse_ex+0x96>
        to->type = LWJSON_TYPE_ARRAY;
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	2204      	movs	r2, #4
 800b9b2:	711a      	strb	r2, [r3, #4]
 800b9b4:	e003      	b.n	800b9be <lwjson_parse_ex+0x9e>
    } else {
        res = lwjsonERRJSON;
 800b9b6:	2302      	movs	r3, #2
 800b9b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        goto ret;
 800b9bc:	e1fa      	b.n	800bdb4 <lwjson_parse_ex+0x494>
    }
    ++pobj.p;
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	61bb      	str	r3, [r7, #24]
    res = prv_check_valid_char_after_open_bracket(&pobj, to);
 800b9c4:	f107 0310 	add.w	r3, r7, #16
 800b9c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff ff26 	bl	800b81c <prv_check_valid_char_after_open_bracket>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (res != lwjsonOK) {
 800b9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f040 81dd 	bne.w	800bd9a <lwjson_parse_ex+0x47a>
        goto ret;
    }

    /* Process all characters as indicated by input user */
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 800b9e0:	e1a4      	b.n	800bd2c <lwjson_parse_ex+0x40c>
        /* Filter out blanks */
        res = prv_skip_blank(&pobj);
 800b9e2:	f107 0310 	add.w	r3, r7, #16
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff fba0 	bl	800b12c <prv_skip_blank>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (res != lwjsonOK) {
 800b9f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f040 81d1 	bne.w	800bd9e <lwjson_parse_ex+0x47e>
            goto ret;
        }
        if (*pobj.p == ',') {
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	2b2c      	cmp	r3, #44	@ 0x2c
 800ba02:	d103      	bne.n	800ba0c <lwjson_parse_ex+0xec>
            ++pobj.p;
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	3301      	adds	r3, #1
 800ba08:	61bb      	str	r3, [r7, #24]
            continue;
 800ba0a:	e18f      	b.n	800bd2c <lwjson_parse_ex+0x40c>
        }

        /* Check if end of object or array*/
        if (*pobj.p == (to->type == LWJSON_TYPE_OBJECT ? '}' : ']')) {
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	461a      	mov	r2, r3
 800ba12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba14:	791b      	ldrb	r3, [r3, #4]
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d101      	bne.n	800ba1e <lwjson_parse_ex+0xfe>
 800ba1a:	237d      	movs	r3, #125	@ 0x7d
 800ba1c:	e000      	b.n	800ba20 <lwjson_parse_ex+0x100>
 800ba1e:	235d      	movs	r3, #93	@ 0x5d
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d126      	bne.n	800ba72 <lwjson_parse_ex+0x152>
            lwjson_token_t* parent = to->next;
 800ba24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	61fb      	str	r3, [r7, #28]
            to->next = NULL;
 800ba2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	601a      	str	r2, [r3, #0]
            ++pobj.p;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	3301      	adds	r3, #1
 800ba34:	61bb      	str	r3, [r7, #24]

            /* End of string if to == NULL (no parent), check if properly terminated */
            to = parent;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (to == NULL) {
 800ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f040 8172 	bne.w	800bd26 <lwjson_parse_ex+0x406>
                prv_skip_blank(&pobj);
 800ba42:	f107 0310 	add.w	r3, r7, #16
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff fb70 	bl	800b12c <prv_skip_blank>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 800ba4c:	69bb      	ldr	r3, [r7, #24]
                                                                                                       : lwjsonERR;
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00b      	beq.n	800ba6a <lwjson_parse_ex+0x14a>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d007      	beq.n	800ba6a <lwjson_parse_ex+0x14a>
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	697a      	ldr	r2, [r7, #20]
                                                                                                       : lwjsonERR;
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d001      	beq.n	800ba6a <lwjson_parse_ex+0x14a>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e000      	b.n	800ba6c <lwjson_parse_ex+0x14c>
 800ba6a:	2300      	movs	r3, #0
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 800ba6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                goto ret;
 800ba70:	e1a0      	b.n	800bdb4 <lwjson_parse_ex+0x494>
            }
            continue;
        }

        /* Allocate new token */
        t = prv_alloc_token(lwobj);
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff fb30 	bl	800b0d8 <prv_alloc_token>
 800ba78:	6238      	str	r0, [r7, #32]
        if (t == NULL) {
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d103      	bne.n	800ba88 <lwjson_parse_ex+0x168>
            res = lwjsonERRMEM;
 800ba80:	2303      	movs	r3, #3
 800ba82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            goto ret;
 800ba86:	e195      	b.n	800bdb4 <lwjson_parse_ex+0x494>
        }

        /* If object type is not array, first thing is property that starts with quotes */
        if (to->type != LWJSON_TYPE_ARRAY) {
 800ba88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8a:	791b      	ldrb	r3, [r3, #4]
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d015      	beq.n	800babc <lwjson_parse_ex+0x19c>
            if (*pobj.p != '"') {
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b22      	cmp	r3, #34	@ 0x22
 800ba96:	d003      	beq.n	800baa0 <lwjson_parse_ex+0x180>
                res = lwjsonERRJSON;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                goto ret;
 800ba9e:	e189      	b.n	800bdb4 <lwjson_parse_ex+0x494>
            }
            res = prv_parse_property_name(&pobj, t);
 800baa0:	f107 0310 	add.w	r3, r7, #16
 800baa4:	6a39      	ldr	r1, [r7, #32]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff fc52 	bl	800b350 <prv_parse_property_name>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (res != lwjsonOK) {
 800bab2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f040 8173 	bne.w	800bda2 <lwjson_parse_ex+0x482>
                goto ret;
            }
        }

        /* Add element to linked list */
        if (to->u.first_child == NULL) {
 800babc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d103      	bne.n	800bacc <lwjson_parse_ex+0x1ac>
            to->u.first_child = t;
 800bac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac6:	6a3a      	ldr	r2, [r7, #32]
 800bac8:	611a      	str	r2, [r3, #16]
 800baca:	e00d      	b.n	800bae8 <lwjson_parse_ex+0x1c8>
        } else {
            lwjson_token_t* c;
            for (c = to->u.first_child; c->next != NULL; c = c->next) {}
 800bacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bad2:	e002      	b.n	800bada <lwjson_parse_ex+0x1ba>
 800bad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1f8      	bne.n	800bad4 <lwjson_parse_ex+0x1b4>
            c->next = t;
 800bae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae4:	6a3a      	ldr	r2, [r7, #32]
 800bae6:	601a      	str	r2, [r3, #0]
        }

        /* Check next character to process */
        switch (*pobj.p) {
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b22      	cmp	r3, #34	@ 0x22
 800baee:	d071      	beq.n	800bbd4 <lwjson_parse_ex+0x2b4>
 800baf0:	2b22      	cmp	r3, #34	@ 0x22
 800baf2:	f2c0 80c2 	blt.w	800bc7a <lwjson_parse_ex+0x35a>
 800baf6:	2b7b      	cmp	r3, #123	@ 0x7b
 800baf8:	f300 80bf 	bgt.w	800bc7a <lwjson_parse_ex+0x35a>
 800bafc:	2b5b      	cmp	r3, #91	@ 0x5b
 800bafe:	f2c0 80bc 	blt.w	800bc7a <lwjson_parse_ex+0x35a>
 800bb02:	3b5b      	subs	r3, #91	@ 0x5b
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	f200 80b8 	bhi.w	800bc7a <lwjson_parse_ex+0x35a>
 800bb0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <lwjson_parse_ex+0x1f0>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bb95 	.word	0x0800bb95
 800bb14:	0800bc7b 	.word	0x0800bc7b
 800bb18:	0800bc7b 	.word	0x0800bc7b
 800bb1c:	0800bc7b 	.word	0x0800bc7b
 800bb20:	0800bc7b 	.word	0x0800bc7b
 800bb24:	0800bc7b 	.word	0x0800bc7b
 800bb28:	0800bc7b 	.word	0x0800bc7b
 800bb2c:	0800bc7b 	.word	0x0800bc7b
 800bb30:	0800bc7b 	.word	0x0800bc7b
 800bb34:	0800bc7b 	.word	0x0800bc7b
 800bb38:	0800bc7b 	.word	0x0800bc7b
 800bb3c:	0800bc2b 	.word	0x0800bc2b
 800bb40:	0800bc7b 	.word	0x0800bc7b
 800bb44:	0800bc7b 	.word	0x0800bc7b
 800bb48:	0800bc7b 	.word	0x0800bc7b
 800bb4c:	0800bc7b 	.word	0x0800bc7b
 800bb50:	0800bc7b 	.word	0x0800bc7b
 800bb54:	0800bc7b 	.word	0x0800bc7b
 800bb58:	0800bc7b 	.word	0x0800bc7b
 800bb5c:	0800bc53 	.word	0x0800bc53
 800bb60:	0800bc7b 	.word	0x0800bc7b
 800bb64:	0800bc7b 	.word	0x0800bc7b
 800bb68:	0800bc7b 	.word	0x0800bc7b
 800bb6c:	0800bc7b 	.word	0x0800bc7b
 800bb70:	0800bc7b 	.word	0x0800bc7b
 800bb74:	0800bc03 	.word	0x0800bc03
 800bb78:	0800bc7b 	.word	0x0800bc7b
 800bb7c:	0800bc7b 	.word	0x0800bc7b
 800bb80:	0800bc7b 	.word	0x0800bc7b
 800bb84:	0800bc7b 	.word	0x0800bc7b
 800bb88:	0800bc7b 	.word	0x0800bc7b
 800bb8c:	0800bc7b 	.word	0x0800bc7b
 800bb90:	0800bb95 	.word	0x0800bb95
            case '{':
            case '[':
                t->type = *pobj.p == '{' ? LWJSON_TYPE_OBJECT : LWJSON_TYPE_ARRAY;
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b7b      	cmp	r3, #123	@ 0x7b
 800bb9a:	d101      	bne.n	800bba0 <lwjson_parse_ex+0x280>
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	e000      	b.n	800bba2 <lwjson_parse_ex+0x282>
 800bba0:	2204      	movs	r2, #4
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	711a      	strb	r2, [r3, #4]
                ++pobj.p;
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	61bb      	str	r3, [r7, #24]

                res = prv_check_valid_char_after_open_bracket(&pobj, t);
 800bbac:	f107 0310 	add.w	r3, r7, #16
 800bbb0:	6a39      	ldr	r1, [r7, #32]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff fe32 	bl	800b81c <prv_check_valid_char_after_open_bracket>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (res != lwjsonOK) {
 800bbbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f040 80ef 	bne.w	800bda6 <lwjson_parse_ex+0x486>
                    goto ret;
                }
                t->next = to; /* Temporary saved as parent object */
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbcc:	601a      	str	r2, [r3, #0]
                to = t;
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 800bbd2:	e075      	b.n	800bcc0 <lwjson_parse_ex+0x3a0>
            case '"':
                res = prv_parse_string(&pobj, &t->u.str.token_value, &t->u.str.token_value_len);
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	f103 0110 	add.w	r1, r3, #16
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	f103 0214 	add.w	r2, r3, #20
 800bbe0:	f107 0310 	add.w	r3, r7, #16
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff faf3 	bl	800b1d0 <prv_parse_string>
 800bbea:	4603      	mov	r3, r0
 800bbec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (res == lwjsonOK) {
 800bbf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f040 80d8 	bne.w	800bdaa <lwjson_parse_ex+0x48a>
                    t->type = LWJSON_TYPE_STRING;
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	711a      	strb	r2, [r3, #4]
                } else {
                    goto ret;
                }
                break;
 800bc00:	e05e      	b.n	800bcc0 <lwjson_parse_ex+0x3a0>
            case 't':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "true", 4) == 0) {
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	2204      	movs	r2, #4
 800bc06:	4974      	ldr	r1, [pc, #464]	@ (800bdd8 <lwjson_parse_ex+0x4b8>)
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f000 feef 	bl	800c9ec <strncmp>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d106      	bne.n	800bc22 <lwjson_parse_ex+0x302>
                    t->type = LWJSON_TYPE_TRUE;
 800bc14:	6a3b      	ldr	r3, [r7, #32]
 800bc16:	2205      	movs	r2, #5
 800bc18:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 800bc20:	e04e      	b.n	800bcc0 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 800bc22:	2302      	movs	r3, #2
 800bc24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    goto ret;
 800bc28:	e0c4      	b.n	800bdb4 <lwjson_parse_ex+0x494>
            case 'f':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "false", 5) == 0) {
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	2205      	movs	r2, #5
 800bc2e:	496b      	ldr	r1, [pc, #428]	@ (800bddc <lwjson_parse_ex+0x4bc>)
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fedb 	bl	800c9ec <strncmp>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <lwjson_parse_ex+0x32a>
                    t->type = LWJSON_TYPE_FALSE;
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	2206      	movs	r2, #6
 800bc40:	711a      	strb	r2, [r3, #4]
                    pobj.p += 5;
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	3305      	adds	r3, #5
 800bc46:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 800bc48:	e03a      	b.n	800bcc0 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    goto ret;
 800bc50:	e0b0      	b.n	800bdb4 <lwjson_parse_ex+0x494>
            case 'n':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "null", 4) == 0) {
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2204      	movs	r2, #4
 800bc56:	4962      	ldr	r1, [pc, #392]	@ (800bde0 <lwjson_parse_ex+0x4c0>)
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f000 fec7 	bl	800c9ec <strncmp>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d106      	bne.n	800bc72 <lwjson_parse_ex+0x352>
                    t->type = LWJSON_TYPE_NULL;
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	2207      	movs	r2, #7
 800bc68:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 800bc70:	e026      	b.n	800bcc0 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 800bc72:	2302      	movs	r3, #2
 800bc74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    goto ret;
 800bc78:	e09c      	b.n	800bdb4 <lwjson_parse_ex+0x494>
            default:
                if (*pobj.p == '-' || (*pobj.p >= '0' && *pobj.p <= '9')) {
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	2b2d      	cmp	r3, #45	@ 0x2d
 800bc80:	d007      	beq.n	800bc92 <lwjson_parse_ex+0x372>
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc88:	d915      	bls.n	800bcb6 <lwjson_parse_ex+0x396>
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b39      	cmp	r3, #57	@ 0x39
 800bc90:	d811      	bhi.n	800bcb6 <lwjson_parse_ex+0x396>
                    if (prv_parse_number(&pobj, &t->type, &t->u.num_real, &t->u.num_int) != lwjsonOK) {
 800bc92:	6a3b      	ldr	r3, [r7, #32]
 800bc94:	1d19      	adds	r1, r3, #4
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	f103 0210 	add.w	r2, r3, #16
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	3310      	adds	r3, #16
 800bca0:	f107 0010 	add.w	r0, r7, #16
 800bca4:	f7ff fb8c 	bl	800b3c0 <prv_parse_number>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d007      	beq.n	800bcbe <lwjson_parse_ex+0x39e>
                        res = lwjsonERRJSON;
 800bcae:	2302      	movs	r3, #2
 800bcb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        goto ret;
 800bcb4:	e07e      	b.n	800bdb4 <lwjson_parse_ex+0x494>
                    }
                } else {
                    res = lwjsonERRJSON;
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    goto ret;
 800bcbc:	e07a      	b.n	800bdb4 <lwjson_parse_ex+0x494>
                }
                break;
 800bcbe:	bf00      	nop
        }

        /* Below code is used to check characters after valid tokens */
        if (t->type == LWJSON_TYPE_ARRAY || t->type == LWJSON_TYPE_OBJECT) {
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	791b      	ldrb	r3, [r3, #4]
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	d030      	beq.n	800bd2a <lwjson_parse_ex+0x40a>
 800bcc8:	6a3b      	ldr	r3, [r7, #32]
 800bcca:	791b      	ldrb	r3, [r3, #4]
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d02c      	beq.n	800bd2a <lwjson_parse_ex+0x40a>
         * blank characters, followed by one of below options:
         *  - Comma separator for next token
         *  - End of array indication
         *  - End of object indication
         */
        res = prv_skip_blank(&pobj);
 800bcd0:	f107 0310 	add.w	r3, r7, #16
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7ff fa29 	bl	800b12c <prv_skip_blank>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (res != lwjsonOK) {
 800bce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d162      	bne.n	800bdae <lwjson_parse_ex+0x48e>
            goto ret;
        }
        /* Check if valid string is availabe after */
        if (pobj.p == NULL || *pobj.p == '\0' || (*pobj.p != ',' && *pobj.p != ']' && *pobj.p != '}')) {
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00f      	beq.n	800bd0e <lwjson_parse_ex+0x3ee>
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00b      	beq.n	800bd0e <lwjson_parse_ex+0x3ee>
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	2b2c      	cmp	r3, #44	@ 0x2c
 800bcfc:	d00b      	beq.n	800bd16 <lwjson_parse_ex+0x3f6>
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	2b5d      	cmp	r3, #93	@ 0x5d
 800bd04:	d007      	beq.n	800bd16 <lwjson_parse_ex+0x3f6>
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b7d      	cmp	r3, #125	@ 0x7d
 800bd0c:	d003      	beq.n	800bd16 <lwjson_parse_ex+0x3f6>
            res = lwjsonERRJSON;
 800bd0e:	2302      	movs	r3, #2
 800bd10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            goto ret;
 800bd14:	e04e      	b.n	800bdb4 <lwjson_parse_ex+0x494>
        } else if (*pobj.p == ',') { /* Check to advance to next token immediatey */
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	2b2c      	cmp	r3, #44	@ 0x2c
 800bd1c:	d106      	bne.n	800bd2c <lwjson_parse_ex+0x40c>
            ++pobj.p;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	3301      	adds	r3, #1
 800bd22:	61bb      	str	r3, [r7, #24]
 800bd24:	e002      	b.n	800bd2c <lwjson_parse_ex+0x40c>
            continue;
 800bd26:	bf00      	nop
 800bd28:	e000      	b.n	800bd2c <lwjson_parse_ex+0x40c>
            continue;
 800bd2a:	bf00      	nop
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00b      	beq.n	800bd4a <lwjson_parse_ex+0x42a>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d007      	beq.n	800bd4a <lwjson_parse_ex+0x42a>
 800bd3a:	69ba      	ldr	r2, [r7, #24]
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	461a      	mov	r2, r3
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	f4ff ae4c 	bcc.w	800b9e2 <lwjson_parse_ex+0xc2>
        }
    }
    if (to != &lwobj->first_token || (to != NULL && to->next != NULL)) {
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3310      	adds	r3, #16
 800bd4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d106      	bne.n	800bd62 <lwjson_parse_ex+0x442>
 800bd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <lwjson_parse_ex+0x44c>
 800bd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d004      	beq.n	800bd6c <lwjson_parse_ex+0x44c>
        res = lwjsonERRJSON;
 800bd62:	2302      	movs	r3, #2
 800bd64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        to = NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    if (to != NULL) {
 800bd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d01f      	beq.n	800bdb2 <lwjson_parse_ex+0x492>
        if (to->type != LWJSON_TYPE_ARRAY && to->type != LWJSON_TYPE_OBJECT) {
 800bd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd74:	791b      	ldrb	r3, [r3, #4]
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d006      	beq.n	800bd88 <lwjson_parse_ex+0x468>
 800bd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7c:	791b      	ldrb	r3, [r3, #4]
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d002      	beq.n	800bd88 <lwjson_parse_ex+0x468>
            res = lwjsonERRJSON;
 800bd82:	2302      	movs	r3, #2
 800bd84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
        to->token_name = NULL;
 800bd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	609a      	str	r2, [r3, #8]
        to->token_name_len = 0;
 800bd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd90:	2200      	movs	r2, #0
 800bd92:	60da      	str	r2, [r3, #12]
 800bd94:	e00e      	b.n	800bdb4 <lwjson_parse_ex+0x494>
        goto ret;
 800bd96:	bf00      	nop
 800bd98:	e00c      	b.n	800bdb4 <lwjson_parse_ex+0x494>
        goto ret;
 800bd9a:	bf00      	nop
 800bd9c:	e00a      	b.n	800bdb4 <lwjson_parse_ex+0x494>
            goto ret;
 800bd9e:	bf00      	nop
 800bda0:	e008      	b.n	800bdb4 <lwjson_parse_ex+0x494>
                goto ret;
 800bda2:	bf00      	nop
 800bda4:	e006      	b.n	800bdb4 <lwjson_parse_ex+0x494>
                    goto ret;
 800bda6:	bf00      	nop
 800bda8:	e004      	b.n	800bdb4 <lwjson_parse_ex+0x494>
                    goto ret;
 800bdaa:	bf00      	nop
 800bdac:	e002      	b.n	800bdb4 <lwjson_parse_ex+0x494>
            goto ret;
 800bdae:	bf00      	nop
 800bdb0:	e000      	b.n	800bdb4 <lwjson_parse_ex+0x494>
    }
ret:
 800bdb2:	bf00      	nop
    if (res == lwjsonOK) {
 800bdb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <lwjson_parse_ex+0x4aa>
        lwobj->flags.parsed = 1;
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800bdc2:	f043 0301 	orr.w	r3, r3, #1
 800bdc6:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    }
    return res;
 800bdca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3730      	adds	r7, #48	@ 0x30
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	0800ee78 	.word	0x0800ee78
 800bddc:	0800ee80 	.word	0x0800ee80
 800bde0:	0800ee88 	.word	0x0800ee88

0800bde4 <lwjson_parse>:
 * \param[in,out]   lwobj: LwJSON instance
 * \param[in]       json_str: JSON string to parse
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse(lwjson_t* lwobj, const char* json_str) {
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
    return lwjson_parse_ex(lwobj, json_str, strlen(json_str));
 800bdee:	6838      	ldr	r0, [r7, #0]
 800bdf0:	f7f4 fa3e 	bl	8000270 <strlen>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fd90 	bl	800b920 <lwjson_parse_ex>
 800be00:	4603      	mov	r3, r0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <lwjson_free>:
 * \brief           Free token instances (specially used in case of dynamic memory allocation)
 * \param[in,out]   lwobj: LwJSON instance
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_free(lwjson_t* lwobj) {
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b082      	sub	sp, #8
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
    LWJSON_MEMSET(lwobj->tokens, 0x00, sizeof(*lwobj->tokens) * lwobj->tokens_len);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	4613      	mov	r3, r2
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	4413      	add	r3, r2
 800be20:	00db      	lsls	r3, r3, #3
 800be22:	461a      	mov	r2, r3
 800be24:	2100      	movs	r1, #0
 800be26:	f000 fdd9 	bl	800c9dc <memset>
    lwobj->flags.parsed = 0;
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800be30:	f023 0301 	bic.w	r3, r3, #1
 800be34:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    return lwjsonOK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <__cvt>:
 800be42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be46:	ec57 6b10 	vmov	r6, r7, d0
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	460c      	mov	r4, r1
 800be4e:	4619      	mov	r1, r3
 800be50:	463b      	mov	r3, r7
 800be52:	bfbb      	ittet	lt
 800be54:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800be58:	461f      	movlt	r7, r3
 800be5a:	2300      	movge	r3, #0
 800be5c:	232d      	movlt	r3, #45	@ 0x2d
 800be5e:	700b      	strb	r3, [r1, #0]
 800be60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be62:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800be66:	4691      	mov	r9, r2
 800be68:	f023 0820 	bic.w	r8, r3, #32
 800be6c:	bfbc      	itt	lt
 800be6e:	4632      	movlt	r2, r6
 800be70:	4616      	movlt	r6, r2
 800be72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be76:	d005      	beq.n	800be84 <__cvt+0x42>
 800be78:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800be7c:	d100      	bne.n	800be80 <__cvt+0x3e>
 800be7e:	3401      	adds	r4, #1
 800be80:	2102      	movs	r1, #2
 800be82:	e000      	b.n	800be86 <__cvt+0x44>
 800be84:	2103      	movs	r1, #3
 800be86:	ab03      	add	r3, sp, #12
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	ab02      	add	r3, sp, #8
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	ec47 6b10 	vmov	d0, r6, r7
 800be92:	4653      	mov	r3, sl
 800be94:	4622      	mov	r2, r4
 800be96:	f000 ff27 	bl	800cce8 <_dtoa_r>
 800be9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800be9e:	4605      	mov	r5, r0
 800bea0:	d119      	bne.n	800bed6 <__cvt+0x94>
 800bea2:	f019 0f01 	tst.w	r9, #1
 800bea6:	d00e      	beq.n	800bec6 <__cvt+0x84>
 800bea8:	eb00 0904 	add.w	r9, r0, r4
 800beac:	2200      	movs	r2, #0
 800beae:	2300      	movs	r3, #0
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 800beb8:	b108      	cbz	r0, 800bebe <__cvt+0x7c>
 800beba:	f8cd 900c 	str.w	r9, [sp, #12]
 800bebe:	2230      	movs	r2, #48	@ 0x30
 800bec0:	9b03      	ldr	r3, [sp, #12]
 800bec2:	454b      	cmp	r3, r9
 800bec4:	d31e      	bcc.n	800bf04 <__cvt+0xc2>
 800bec6:	9b03      	ldr	r3, [sp, #12]
 800bec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beca:	1b5b      	subs	r3, r3, r5
 800becc:	4628      	mov	r0, r5
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	b004      	add	sp, #16
 800bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800beda:	eb00 0904 	add.w	r9, r0, r4
 800bede:	d1e5      	bne.n	800beac <__cvt+0x6a>
 800bee0:	7803      	ldrb	r3, [r0, #0]
 800bee2:	2b30      	cmp	r3, #48	@ 0x30
 800bee4:	d10a      	bne.n	800befc <__cvt+0xba>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	4630      	mov	r0, r6
 800beec:	4639      	mov	r1, r7
 800beee:	f7f4 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bef2:	b918      	cbnz	r0, 800befc <__cvt+0xba>
 800bef4:	f1c4 0401 	rsb	r4, r4, #1
 800bef8:	f8ca 4000 	str.w	r4, [sl]
 800befc:	f8da 3000 	ldr.w	r3, [sl]
 800bf00:	4499      	add	r9, r3
 800bf02:	e7d3      	b.n	800beac <__cvt+0x6a>
 800bf04:	1c59      	adds	r1, r3, #1
 800bf06:	9103      	str	r1, [sp, #12]
 800bf08:	701a      	strb	r2, [r3, #0]
 800bf0a:	e7d9      	b.n	800bec0 <__cvt+0x7e>

0800bf0c <__exponent>:
 800bf0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	bfba      	itte	lt
 800bf12:	4249      	neglt	r1, r1
 800bf14:	232d      	movlt	r3, #45	@ 0x2d
 800bf16:	232b      	movge	r3, #43	@ 0x2b
 800bf18:	2909      	cmp	r1, #9
 800bf1a:	7002      	strb	r2, [r0, #0]
 800bf1c:	7043      	strb	r3, [r0, #1]
 800bf1e:	dd29      	ble.n	800bf74 <__exponent+0x68>
 800bf20:	f10d 0307 	add.w	r3, sp, #7
 800bf24:	461d      	mov	r5, r3
 800bf26:	270a      	movs	r7, #10
 800bf28:	461a      	mov	r2, r3
 800bf2a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bf2e:	fb07 1416 	mls	r4, r7, r6, r1
 800bf32:	3430      	adds	r4, #48	@ 0x30
 800bf34:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bf38:	460c      	mov	r4, r1
 800bf3a:	2c63      	cmp	r4, #99	@ 0x63
 800bf3c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf40:	4631      	mov	r1, r6
 800bf42:	dcf1      	bgt.n	800bf28 <__exponent+0x1c>
 800bf44:	3130      	adds	r1, #48	@ 0x30
 800bf46:	1e94      	subs	r4, r2, #2
 800bf48:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf4c:	1c41      	adds	r1, r0, #1
 800bf4e:	4623      	mov	r3, r4
 800bf50:	42ab      	cmp	r3, r5
 800bf52:	d30a      	bcc.n	800bf6a <__exponent+0x5e>
 800bf54:	f10d 0309 	add.w	r3, sp, #9
 800bf58:	1a9b      	subs	r3, r3, r2
 800bf5a:	42ac      	cmp	r4, r5
 800bf5c:	bf88      	it	hi
 800bf5e:	2300      	movhi	r3, #0
 800bf60:	3302      	adds	r3, #2
 800bf62:	4403      	add	r3, r0
 800bf64:	1a18      	subs	r0, r3, r0
 800bf66:	b003      	add	sp, #12
 800bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf72:	e7ed      	b.n	800bf50 <__exponent+0x44>
 800bf74:	2330      	movs	r3, #48	@ 0x30
 800bf76:	3130      	adds	r1, #48	@ 0x30
 800bf78:	7083      	strb	r3, [r0, #2]
 800bf7a:	70c1      	strb	r1, [r0, #3]
 800bf7c:	1d03      	adds	r3, r0, #4
 800bf7e:	e7f1      	b.n	800bf64 <__exponent+0x58>

0800bf80 <_printf_float>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	b08d      	sub	sp, #52	@ 0x34
 800bf86:	460c      	mov	r4, r1
 800bf88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bf8c:	4616      	mov	r6, r2
 800bf8e:	461f      	mov	r7, r3
 800bf90:	4605      	mov	r5, r0
 800bf92:	f000 fd3d 	bl	800ca10 <_localeconv_r>
 800bf96:	6803      	ldr	r3, [r0, #0]
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7f4 f968 	bl	8000270 <strlen>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa4:	f8d8 3000 	ldr.w	r3, [r8]
 800bfa8:	9005      	str	r0, [sp, #20]
 800bfaa:	3307      	adds	r3, #7
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	f103 0208 	add.w	r2, r3, #8
 800bfb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bfb8:	f8d4 b000 	ldr.w	fp, [r4]
 800bfbc:	f8c8 2000 	str.w	r2, [r8]
 800bfc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bfc8:	9307      	str	r3, [sp, #28]
 800bfca:	f8cd 8018 	str.w	r8, [sp, #24]
 800bfce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bfd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfd6:	4b9c      	ldr	r3, [pc, #624]	@ (800c248 <_printf_float+0x2c8>)
 800bfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfdc:	f7f4 fda6 	bl	8000b2c <__aeabi_dcmpun>
 800bfe0:	bb70      	cbnz	r0, 800c040 <_printf_float+0xc0>
 800bfe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfe6:	4b98      	ldr	r3, [pc, #608]	@ (800c248 <_printf_float+0x2c8>)
 800bfe8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfec:	f7f4 fd80 	bl	8000af0 <__aeabi_dcmple>
 800bff0:	bb30      	cbnz	r0, 800c040 <_printf_float+0xc0>
 800bff2:	2200      	movs	r2, #0
 800bff4:	2300      	movs	r3, #0
 800bff6:	4640      	mov	r0, r8
 800bff8:	4649      	mov	r1, r9
 800bffa:	f7f4 fd6f 	bl	8000adc <__aeabi_dcmplt>
 800bffe:	b110      	cbz	r0, 800c006 <_printf_float+0x86>
 800c000:	232d      	movs	r3, #45	@ 0x2d
 800c002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c006:	4a91      	ldr	r2, [pc, #580]	@ (800c24c <_printf_float+0x2cc>)
 800c008:	4b91      	ldr	r3, [pc, #580]	@ (800c250 <_printf_float+0x2d0>)
 800c00a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c00e:	bf8c      	ite	hi
 800c010:	4690      	movhi	r8, r2
 800c012:	4698      	movls	r8, r3
 800c014:	2303      	movs	r3, #3
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	f02b 0304 	bic.w	r3, fp, #4
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	f04f 0900 	mov.w	r9, #0
 800c022:	9700      	str	r7, [sp, #0]
 800c024:	4633      	mov	r3, r6
 800c026:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c028:	4621      	mov	r1, r4
 800c02a:	4628      	mov	r0, r5
 800c02c:	f000 f9d2 	bl	800c3d4 <_printf_common>
 800c030:	3001      	adds	r0, #1
 800c032:	f040 808d 	bne.w	800c150 <_printf_float+0x1d0>
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	b00d      	add	sp, #52	@ 0x34
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	4642      	mov	r2, r8
 800c042:	464b      	mov	r3, r9
 800c044:	4640      	mov	r0, r8
 800c046:	4649      	mov	r1, r9
 800c048:	f7f4 fd70 	bl	8000b2c <__aeabi_dcmpun>
 800c04c:	b140      	cbz	r0, 800c060 <_printf_float+0xe0>
 800c04e:	464b      	mov	r3, r9
 800c050:	2b00      	cmp	r3, #0
 800c052:	bfbc      	itt	lt
 800c054:	232d      	movlt	r3, #45	@ 0x2d
 800c056:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c05a:	4a7e      	ldr	r2, [pc, #504]	@ (800c254 <_printf_float+0x2d4>)
 800c05c:	4b7e      	ldr	r3, [pc, #504]	@ (800c258 <_printf_float+0x2d8>)
 800c05e:	e7d4      	b.n	800c00a <_printf_float+0x8a>
 800c060:	6863      	ldr	r3, [r4, #4]
 800c062:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c066:	9206      	str	r2, [sp, #24]
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	d13b      	bne.n	800c0e4 <_printf_float+0x164>
 800c06c:	2306      	movs	r3, #6
 800c06e:	6063      	str	r3, [r4, #4]
 800c070:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c074:	2300      	movs	r3, #0
 800c076:	6022      	str	r2, [r4, #0]
 800c078:	9303      	str	r3, [sp, #12]
 800c07a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c07c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c080:	ab09      	add	r3, sp, #36	@ 0x24
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	6861      	ldr	r1, [r4, #4]
 800c086:	ec49 8b10 	vmov	d0, r8, r9
 800c08a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c08e:	4628      	mov	r0, r5
 800c090:	f7ff fed7 	bl	800be42 <__cvt>
 800c094:	9b06      	ldr	r3, [sp, #24]
 800c096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c098:	2b47      	cmp	r3, #71	@ 0x47
 800c09a:	4680      	mov	r8, r0
 800c09c:	d129      	bne.n	800c0f2 <_printf_float+0x172>
 800c09e:	1cc8      	adds	r0, r1, #3
 800c0a0:	db02      	blt.n	800c0a8 <_printf_float+0x128>
 800c0a2:	6863      	ldr	r3, [r4, #4]
 800c0a4:	4299      	cmp	r1, r3
 800c0a6:	dd41      	ble.n	800c12c <_printf_float+0x1ac>
 800c0a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c0ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c0b0:	3901      	subs	r1, #1
 800c0b2:	4652      	mov	r2, sl
 800c0b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c0b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0ba:	f7ff ff27 	bl	800bf0c <__exponent>
 800c0be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0c0:	1813      	adds	r3, r2, r0
 800c0c2:	2a01      	cmp	r2, #1
 800c0c4:	4681      	mov	r9, r0
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	dc02      	bgt.n	800c0d0 <_printf_float+0x150>
 800c0ca:	6822      	ldr	r2, [r4, #0]
 800c0cc:	07d2      	lsls	r2, r2, #31
 800c0ce:	d501      	bpl.n	800c0d4 <_printf_float+0x154>
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	6123      	str	r3, [r4, #16]
 800c0d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0a2      	beq.n	800c022 <_printf_float+0xa2>
 800c0dc:	232d      	movs	r3, #45	@ 0x2d
 800c0de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0e2:	e79e      	b.n	800c022 <_printf_float+0xa2>
 800c0e4:	9a06      	ldr	r2, [sp, #24]
 800c0e6:	2a47      	cmp	r2, #71	@ 0x47
 800c0e8:	d1c2      	bne.n	800c070 <_printf_float+0xf0>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1c0      	bne.n	800c070 <_printf_float+0xf0>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e7bd      	b.n	800c06e <_printf_float+0xee>
 800c0f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0f6:	d9db      	bls.n	800c0b0 <_printf_float+0x130>
 800c0f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c0fc:	d118      	bne.n	800c130 <_printf_float+0x1b0>
 800c0fe:	2900      	cmp	r1, #0
 800c100:	6863      	ldr	r3, [r4, #4]
 800c102:	dd0b      	ble.n	800c11c <_printf_float+0x19c>
 800c104:	6121      	str	r1, [r4, #16]
 800c106:	b913      	cbnz	r3, 800c10e <_printf_float+0x18e>
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	07d0      	lsls	r0, r2, #31
 800c10c:	d502      	bpl.n	800c114 <_printf_float+0x194>
 800c10e:	3301      	adds	r3, #1
 800c110:	440b      	add	r3, r1
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c116:	f04f 0900 	mov.w	r9, #0
 800c11a:	e7db      	b.n	800c0d4 <_printf_float+0x154>
 800c11c:	b913      	cbnz	r3, 800c124 <_printf_float+0x1a4>
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	07d2      	lsls	r2, r2, #31
 800c122:	d501      	bpl.n	800c128 <_printf_float+0x1a8>
 800c124:	3302      	adds	r3, #2
 800c126:	e7f4      	b.n	800c112 <_printf_float+0x192>
 800c128:	2301      	movs	r3, #1
 800c12a:	e7f2      	b.n	800c112 <_printf_float+0x192>
 800c12c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c132:	4299      	cmp	r1, r3
 800c134:	db05      	blt.n	800c142 <_printf_float+0x1c2>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	6121      	str	r1, [r4, #16]
 800c13a:	07d8      	lsls	r0, r3, #31
 800c13c:	d5ea      	bpl.n	800c114 <_printf_float+0x194>
 800c13e:	1c4b      	adds	r3, r1, #1
 800c140:	e7e7      	b.n	800c112 <_printf_float+0x192>
 800c142:	2900      	cmp	r1, #0
 800c144:	bfd4      	ite	le
 800c146:	f1c1 0202 	rsble	r2, r1, #2
 800c14a:	2201      	movgt	r2, #1
 800c14c:	4413      	add	r3, r2
 800c14e:	e7e0      	b.n	800c112 <_printf_float+0x192>
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	055a      	lsls	r2, r3, #21
 800c154:	d407      	bmi.n	800c166 <_printf_float+0x1e6>
 800c156:	6923      	ldr	r3, [r4, #16]
 800c158:	4642      	mov	r2, r8
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	d12b      	bne.n	800c1bc <_printf_float+0x23c>
 800c164:	e767      	b.n	800c036 <_printf_float+0xb6>
 800c166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c16a:	f240 80dd 	bls.w	800c328 <_printf_float+0x3a8>
 800c16e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c172:	2200      	movs	r2, #0
 800c174:	2300      	movs	r3, #0
 800c176:	f7f4 fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d033      	beq.n	800c1e6 <_printf_float+0x266>
 800c17e:	4a37      	ldr	r2, [pc, #220]	@ (800c25c <_printf_float+0x2dc>)
 800c180:	2301      	movs	r3, #1
 800c182:	4631      	mov	r1, r6
 800c184:	4628      	mov	r0, r5
 800c186:	47b8      	blx	r7
 800c188:	3001      	adds	r0, #1
 800c18a:	f43f af54 	beq.w	800c036 <_printf_float+0xb6>
 800c18e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c192:	4543      	cmp	r3, r8
 800c194:	db02      	blt.n	800c19c <_printf_float+0x21c>
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	07d8      	lsls	r0, r3, #31
 800c19a:	d50f      	bpl.n	800c1bc <_printf_float+0x23c>
 800c19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	47b8      	blx	r7
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	f43f af45 	beq.w	800c036 <_printf_float+0xb6>
 800c1ac:	f04f 0900 	mov.w	r9, #0
 800c1b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1b4:	f104 0a1a 	add.w	sl, r4, #26
 800c1b8:	45c8      	cmp	r8, r9
 800c1ba:	dc09      	bgt.n	800c1d0 <_printf_float+0x250>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	079b      	lsls	r3, r3, #30
 800c1c0:	f100 8103 	bmi.w	800c3ca <_printf_float+0x44a>
 800c1c4:	68e0      	ldr	r0, [r4, #12]
 800c1c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1c8:	4298      	cmp	r0, r3
 800c1ca:	bfb8      	it	lt
 800c1cc:	4618      	movlt	r0, r3
 800c1ce:	e734      	b.n	800c03a <_printf_float+0xba>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b8      	blx	r7
 800c1da:	3001      	adds	r0, #1
 800c1dc:	f43f af2b 	beq.w	800c036 <_printf_float+0xb6>
 800c1e0:	f109 0901 	add.w	r9, r9, #1
 800c1e4:	e7e8      	b.n	800c1b8 <_printf_float+0x238>
 800c1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dc39      	bgt.n	800c260 <_printf_float+0x2e0>
 800c1ec:	4a1b      	ldr	r2, [pc, #108]	@ (800c25c <_printf_float+0x2dc>)
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	47b8      	blx	r7
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	f43f af1d 	beq.w	800c036 <_printf_float+0xb6>
 800c1fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c200:	ea59 0303 	orrs.w	r3, r9, r3
 800c204:	d102      	bne.n	800c20c <_printf_float+0x28c>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	07d9      	lsls	r1, r3, #31
 800c20a:	d5d7      	bpl.n	800c1bc <_printf_float+0x23c>
 800c20c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c210:	4631      	mov	r1, r6
 800c212:	4628      	mov	r0, r5
 800c214:	47b8      	blx	r7
 800c216:	3001      	adds	r0, #1
 800c218:	f43f af0d 	beq.w	800c036 <_printf_float+0xb6>
 800c21c:	f04f 0a00 	mov.w	sl, #0
 800c220:	f104 0b1a 	add.w	fp, r4, #26
 800c224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c226:	425b      	negs	r3, r3
 800c228:	4553      	cmp	r3, sl
 800c22a:	dc01      	bgt.n	800c230 <_printf_float+0x2b0>
 800c22c:	464b      	mov	r3, r9
 800c22e:	e793      	b.n	800c158 <_printf_float+0x1d8>
 800c230:	2301      	movs	r3, #1
 800c232:	465a      	mov	r2, fp
 800c234:	4631      	mov	r1, r6
 800c236:	4628      	mov	r0, r5
 800c238:	47b8      	blx	r7
 800c23a:	3001      	adds	r0, #1
 800c23c:	f43f aefb 	beq.w	800c036 <_printf_float+0xb6>
 800c240:	f10a 0a01 	add.w	sl, sl, #1
 800c244:	e7ee      	b.n	800c224 <_printf_float+0x2a4>
 800c246:	bf00      	nop
 800c248:	7fefffff 	.word	0x7fefffff
 800c24c:	0800eee8 	.word	0x0800eee8
 800c250:	0800eee4 	.word	0x0800eee4
 800c254:	0800eef0 	.word	0x0800eef0
 800c258:	0800eeec 	.word	0x0800eeec
 800c25c:	0800eef4 	.word	0x0800eef4
 800c260:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c262:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c266:	4553      	cmp	r3, sl
 800c268:	bfa8      	it	ge
 800c26a:	4653      	movge	r3, sl
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	4699      	mov	r9, r3
 800c270:	dc36      	bgt.n	800c2e0 <_printf_float+0x360>
 800c272:	f04f 0b00 	mov.w	fp, #0
 800c276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c27a:	f104 021a 	add.w	r2, r4, #26
 800c27e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c280:	9306      	str	r3, [sp, #24]
 800c282:	eba3 0309 	sub.w	r3, r3, r9
 800c286:	455b      	cmp	r3, fp
 800c288:	dc31      	bgt.n	800c2ee <_printf_float+0x36e>
 800c28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28c:	459a      	cmp	sl, r3
 800c28e:	dc3a      	bgt.n	800c306 <_printf_float+0x386>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	07da      	lsls	r2, r3, #31
 800c294:	d437      	bmi.n	800c306 <_printf_float+0x386>
 800c296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c298:	ebaa 0903 	sub.w	r9, sl, r3
 800c29c:	9b06      	ldr	r3, [sp, #24]
 800c29e:	ebaa 0303 	sub.w	r3, sl, r3
 800c2a2:	4599      	cmp	r9, r3
 800c2a4:	bfa8      	it	ge
 800c2a6:	4699      	movge	r9, r3
 800c2a8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ac:	dc33      	bgt.n	800c316 <_printf_float+0x396>
 800c2ae:	f04f 0800 	mov.w	r8, #0
 800c2b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2b6:	f104 0b1a 	add.w	fp, r4, #26
 800c2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c2c0:	eba3 0309 	sub.w	r3, r3, r9
 800c2c4:	4543      	cmp	r3, r8
 800c2c6:	f77f af79 	ble.w	800c1bc <_printf_float+0x23c>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	465a      	mov	r2, fp
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	47b8      	blx	r7
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	f43f aeae 	beq.w	800c036 <_printf_float+0xb6>
 800c2da:	f108 0801 	add.w	r8, r8, #1
 800c2de:	e7ec      	b.n	800c2ba <_printf_float+0x33a>
 800c2e0:	4642      	mov	r2, r8
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	47b8      	blx	r7
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d1c2      	bne.n	800c272 <_printf_float+0x2f2>
 800c2ec:	e6a3      	b.n	800c036 <_printf_float+0xb6>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	9206      	str	r2, [sp, #24]
 800c2f6:	47b8      	blx	r7
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	f43f ae9c 	beq.w	800c036 <_printf_float+0xb6>
 800c2fe:	9a06      	ldr	r2, [sp, #24]
 800c300:	f10b 0b01 	add.w	fp, fp, #1
 800c304:	e7bb      	b.n	800c27e <_printf_float+0x2fe>
 800c306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c30a:	4631      	mov	r1, r6
 800c30c:	4628      	mov	r0, r5
 800c30e:	47b8      	blx	r7
 800c310:	3001      	adds	r0, #1
 800c312:	d1c0      	bne.n	800c296 <_printf_float+0x316>
 800c314:	e68f      	b.n	800c036 <_printf_float+0xb6>
 800c316:	9a06      	ldr	r2, [sp, #24]
 800c318:	464b      	mov	r3, r9
 800c31a:	4442      	add	r2, r8
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	d1c3      	bne.n	800c2ae <_printf_float+0x32e>
 800c326:	e686      	b.n	800c036 <_printf_float+0xb6>
 800c328:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c32c:	f1ba 0f01 	cmp.w	sl, #1
 800c330:	dc01      	bgt.n	800c336 <_printf_float+0x3b6>
 800c332:	07db      	lsls	r3, r3, #31
 800c334:	d536      	bpl.n	800c3a4 <_printf_float+0x424>
 800c336:	2301      	movs	r3, #1
 800c338:	4642      	mov	r2, r8
 800c33a:	4631      	mov	r1, r6
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b8      	blx	r7
 800c340:	3001      	adds	r0, #1
 800c342:	f43f ae78 	beq.w	800c036 <_printf_float+0xb6>
 800c346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b8      	blx	r7
 800c350:	3001      	adds	r0, #1
 800c352:	f43f ae70 	beq.w	800c036 <_printf_float+0xb6>
 800c356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c35a:	2200      	movs	r2, #0
 800c35c:	2300      	movs	r3, #0
 800c35e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c362:	f7f4 fbb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c366:	b9c0      	cbnz	r0, 800c39a <_printf_float+0x41a>
 800c368:	4653      	mov	r3, sl
 800c36a:	f108 0201 	add.w	r2, r8, #1
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	47b8      	blx	r7
 800c374:	3001      	adds	r0, #1
 800c376:	d10c      	bne.n	800c392 <_printf_float+0x412>
 800c378:	e65d      	b.n	800c036 <_printf_float+0xb6>
 800c37a:	2301      	movs	r3, #1
 800c37c:	465a      	mov	r2, fp
 800c37e:	4631      	mov	r1, r6
 800c380:	4628      	mov	r0, r5
 800c382:	47b8      	blx	r7
 800c384:	3001      	adds	r0, #1
 800c386:	f43f ae56 	beq.w	800c036 <_printf_float+0xb6>
 800c38a:	f108 0801 	add.w	r8, r8, #1
 800c38e:	45d0      	cmp	r8, sl
 800c390:	dbf3      	blt.n	800c37a <_printf_float+0x3fa>
 800c392:	464b      	mov	r3, r9
 800c394:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c398:	e6df      	b.n	800c15a <_printf_float+0x1da>
 800c39a:	f04f 0800 	mov.w	r8, #0
 800c39e:	f104 0b1a 	add.w	fp, r4, #26
 800c3a2:	e7f4      	b.n	800c38e <_printf_float+0x40e>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	e7e1      	b.n	800c36e <_printf_float+0x3ee>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	464a      	mov	r2, r9
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	47b8      	blx	r7
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	f43f ae3e 	beq.w	800c036 <_printf_float+0xb6>
 800c3ba:	f108 0801 	add.w	r8, r8, #1
 800c3be:	68e3      	ldr	r3, [r4, #12]
 800c3c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3c2:	1a5b      	subs	r3, r3, r1
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	dcf0      	bgt.n	800c3aa <_printf_float+0x42a>
 800c3c8:	e6fc      	b.n	800c1c4 <_printf_float+0x244>
 800c3ca:	f04f 0800 	mov.w	r8, #0
 800c3ce:	f104 0919 	add.w	r9, r4, #25
 800c3d2:	e7f4      	b.n	800c3be <_printf_float+0x43e>

0800c3d4 <_printf_common>:
 800c3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d8:	4616      	mov	r6, r2
 800c3da:	4698      	mov	r8, r3
 800c3dc:	688a      	ldr	r2, [r1, #8]
 800c3de:	690b      	ldr	r3, [r1, #16]
 800c3e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	bfb8      	it	lt
 800c3e8:	4613      	movlt	r3, r2
 800c3ea:	6033      	str	r3, [r6, #0]
 800c3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	b10a      	cbz	r2, 800c3fa <_printf_common+0x26>
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	6033      	str	r3, [r6, #0]
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	0699      	lsls	r1, r3, #26
 800c3fe:	bf42      	ittt	mi
 800c400:	6833      	ldrmi	r3, [r6, #0]
 800c402:	3302      	addmi	r3, #2
 800c404:	6033      	strmi	r3, [r6, #0]
 800c406:	6825      	ldr	r5, [r4, #0]
 800c408:	f015 0506 	ands.w	r5, r5, #6
 800c40c:	d106      	bne.n	800c41c <_printf_common+0x48>
 800c40e:	f104 0a19 	add.w	sl, r4, #25
 800c412:	68e3      	ldr	r3, [r4, #12]
 800c414:	6832      	ldr	r2, [r6, #0]
 800c416:	1a9b      	subs	r3, r3, r2
 800c418:	42ab      	cmp	r3, r5
 800c41a:	dc26      	bgt.n	800c46a <_printf_common+0x96>
 800c41c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	3b00      	subs	r3, #0
 800c424:	bf18      	it	ne
 800c426:	2301      	movne	r3, #1
 800c428:	0692      	lsls	r2, r2, #26
 800c42a:	d42b      	bmi.n	800c484 <_printf_common+0xb0>
 800c42c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c430:	4641      	mov	r1, r8
 800c432:	4638      	mov	r0, r7
 800c434:	47c8      	blx	r9
 800c436:	3001      	adds	r0, #1
 800c438:	d01e      	beq.n	800c478 <_printf_common+0xa4>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	6922      	ldr	r2, [r4, #16]
 800c43e:	f003 0306 	and.w	r3, r3, #6
 800c442:	2b04      	cmp	r3, #4
 800c444:	bf02      	ittt	eq
 800c446:	68e5      	ldreq	r5, [r4, #12]
 800c448:	6833      	ldreq	r3, [r6, #0]
 800c44a:	1aed      	subeq	r5, r5, r3
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	bf0c      	ite	eq
 800c450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c454:	2500      	movne	r5, #0
 800c456:	4293      	cmp	r3, r2
 800c458:	bfc4      	itt	gt
 800c45a:	1a9b      	subgt	r3, r3, r2
 800c45c:	18ed      	addgt	r5, r5, r3
 800c45e:	2600      	movs	r6, #0
 800c460:	341a      	adds	r4, #26
 800c462:	42b5      	cmp	r5, r6
 800c464:	d11a      	bne.n	800c49c <_printf_common+0xc8>
 800c466:	2000      	movs	r0, #0
 800c468:	e008      	b.n	800c47c <_printf_common+0xa8>
 800c46a:	2301      	movs	r3, #1
 800c46c:	4652      	mov	r2, sl
 800c46e:	4641      	mov	r1, r8
 800c470:	4638      	mov	r0, r7
 800c472:	47c8      	blx	r9
 800c474:	3001      	adds	r0, #1
 800c476:	d103      	bne.n	800c480 <_printf_common+0xac>
 800c478:	f04f 30ff 	mov.w	r0, #4294967295
 800c47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c480:	3501      	adds	r5, #1
 800c482:	e7c6      	b.n	800c412 <_printf_common+0x3e>
 800c484:	18e1      	adds	r1, r4, r3
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	2030      	movs	r0, #48	@ 0x30
 800c48a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c48e:	4422      	add	r2, r4
 800c490:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c494:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c498:	3302      	adds	r3, #2
 800c49a:	e7c7      	b.n	800c42c <_printf_common+0x58>
 800c49c:	2301      	movs	r3, #1
 800c49e:	4622      	mov	r2, r4
 800c4a0:	4641      	mov	r1, r8
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	47c8      	blx	r9
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	d0e6      	beq.n	800c478 <_printf_common+0xa4>
 800c4aa:	3601      	adds	r6, #1
 800c4ac:	e7d9      	b.n	800c462 <_printf_common+0x8e>
	...

0800c4b0 <_printf_i>:
 800c4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b4:	7e0f      	ldrb	r7, [r1, #24]
 800c4b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4b8:	2f78      	cmp	r7, #120	@ 0x78
 800c4ba:	4691      	mov	r9, r2
 800c4bc:	4680      	mov	r8, r0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	469a      	mov	sl, r3
 800c4c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4c6:	d807      	bhi.n	800c4d8 <_printf_i+0x28>
 800c4c8:	2f62      	cmp	r7, #98	@ 0x62
 800c4ca:	d80a      	bhi.n	800c4e2 <_printf_i+0x32>
 800c4cc:	2f00      	cmp	r7, #0
 800c4ce:	f000 80d1 	beq.w	800c674 <_printf_i+0x1c4>
 800c4d2:	2f58      	cmp	r7, #88	@ 0x58
 800c4d4:	f000 80b8 	beq.w	800c648 <_printf_i+0x198>
 800c4d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4e0:	e03a      	b.n	800c558 <_printf_i+0xa8>
 800c4e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4e6:	2b15      	cmp	r3, #21
 800c4e8:	d8f6      	bhi.n	800c4d8 <_printf_i+0x28>
 800c4ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c4f0 <_printf_i+0x40>)
 800c4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4f0:	0800c549 	.word	0x0800c549
 800c4f4:	0800c55d 	.word	0x0800c55d
 800c4f8:	0800c4d9 	.word	0x0800c4d9
 800c4fc:	0800c4d9 	.word	0x0800c4d9
 800c500:	0800c4d9 	.word	0x0800c4d9
 800c504:	0800c4d9 	.word	0x0800c4d9
 800c508:	0800c55d 	.word	0x0800c55d
 800c50c:	0800c4d9 	.word	0x0800c4d9
 800c510:	0800c4d9 	.word	0x0800c4d9
 800c514:	0800c4d9 	.word	0x0800c4d9
 800c518:	0800c4d9 	.word	0x0800c4d9
 800c51c:	0800c65b 	.word	0x0800c65b
 800c520:	0800c587 	.word	0x0800c587
 800c524:	0800c615 	.word	0x0800c615
 800c528:	0800c4d9 	.word	0x0800c4d9
 800c52c:	0800c4d9 	.word	0x0800c4d9
 800c530:	0800c67d 	.word	0x0800c67d
 800c534:	0800c4d9 	.word	0x0800c4d9
 800c538:	0800c587 	.word	0x0800c587
 800c53c:	0800c4d9 	.word	0x0800c4d9
 800c540:	0800c4d9 	.word	0x0800c4d9
 800c544:	0800c61d 	.word	0x0800c61d
 800c548:	6833      	ldr	r3, [r6, #0]
 800c54a:	1d1a      	adds	r2, r3, #4
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6032      	str	r2, [r6, #0]
 800c550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c554:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c558:	2301      	movs	r3, #1
 800c55a:	e09c      	b.n	800c696 <_printf_i+0x1e6>
 800c55c:	6833      	ldr	r3, [r6, #0]
 800c55e:	6820      	ldr	r0, [r4, #0]
 800c560:	1d19      	adds	r1, r3, #4
 800c562:	6031      	str	r1, [r6, #0]
 800c564:	0606      	lsls	r6, r0, #24
 800c566:	d501      	bpl.n	800c56c <_printf_i+0xbc>
 800c568:	681d      	ldr	r5, [r3, #0]
 800c56a:	e003      	b.n	800c574 <_printf_i+0xc4>
 800c56c:	0645      	lsls	r5, r0, #25
 800c56e:	d5fb      	bpl.n	800c568 <_printf_i+0xb8>
 800c570:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c574:	2d00      	cmp	r5, #0
 800c576:	da03      	bge.n	800c580 <_printf_i+0xd0>
 800c578:	232d      	movs	r3, #45	@ 0x2d
 800c57a:	426d      	negs	r5, r5
 800c57c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c580:	4858      	ldr	r0, [pc, #352]	@ (800c6e4 <_printf_i+0x234>)
 800c582:	230a      	movs	r3, #10
 800c584:	e011      	b.n	800c5aa <_printf_i+0xfa>
 800c586:	6821      	ldr	r1, [r4, #0]
 800c588:	6833      	ldr	r3, [r6, #0]
 800c58a:	0608      	lsls	r0, r1, #24
 800c58c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c590:	d402      	bmi.n	800c598 <_printf_i+0xe8>
 800c592:	0649      	lsls	r1, r1, #25
 800c594:	bf48      	it	mi
 800c596:	b2ad      	uxthmi	r5, r5
 800c598:	2f6f      	cmp	r7, #111	@ 0x6f
 800c59a:	4852      	ldr	r0, [pc, #328]	@ (800c6e4 <_printf_i+0x234>)
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	bf14      	ite	ne
 800c5a0:	230a      	movne	r3, #10
 800c5a2:	2308      	moveq	r3, #8
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c5aa:	6866      	ldr	r6, [r4, #4]
 800c5ac:	60a6      	str	r6, [r4, #8]
 800c5ae:	2e00      	cmp	r6, #0
 800c5b0:	db05      	blt.n	800c5be <_printf_i+0x10e>
 800c5b2:	6821      	ldr	r1, [r4, #0]
 800c5b4:	432e      	orrs	r6, r5
 800c5b6:	f021 0104 	bic.w	r1, r1, #4
 800c5ba:	6021      	str	r1, [r4, #0]
 800c5bc:	d04b      	beq.n	800c656 <_printf_i+0x1a6>
 800c5be:	4616      	mov	r6, r2
 800c5c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5c4:	fb03 5711 	mls	r7, r3, r1, r5
 800c5c8:	5dc7      	ldrb	r7, [r0, r7]
 800c5ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5ce:	462f      	mov	r7, r5
 800c5d0:	42bb      	cmp	r3, r7
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	d9f4      	bls.n	800c5c0 <_printf_i+0x110>
 800c5d6:	2b08      	cmp	r3, #8
 800c5d8:	d10b      	bne.n	800c5f2 <_printf_i+0x142>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	07df      	lsls	r7, r3, #31
 800c5de:	d508      	bpl.n	800c5f2 <_printf_i+0x142>
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	6861      	ldr	r1, [r4, #4]
 800c5e4:	4299      	cmp	r1, r3
 800c5e6:	bfde      	ittt	le
 800c5e8:	2330      	movle	r3, #48	@ 0x30
 800c5ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5f2:	1b92      	subs	r2, r2, r6
 800c5f4:	6122      	str	r2, [r4, #16]
 800c5f6:	f8cd a000 	str.w	sl, [sp]
 800c5fa:	464b      	mov	r3, r9
 800c5fc:	aa03      	add	r2, sp, #12
 800c5fe:	4621      	mov	r1, r4
 800c600:	4640      	mov	r0, r8
 800c602:	f7ff fee7 	bl	800c3d4 <_printf_common>
 800c606:	3001      	adds	r0, #1
 800c608:	d14a      	bne.n	800c6a0 <_printf_i+0x1f0>
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295
 800c60e:	b004      	add	sp, #16
 800c610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	f043 0320 	orr.w	r3, r3, #32
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	4832      	ldr	r0, [pc, #200]	@ (800c6e8 <_printf_i+0x238>)
 800c61e:	2778      	movs	r7, #120	@ 0x78
 800c620:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	6831      	ldr	r1, [r6, #0]
 800c628:	061f      	lsls	r7, r3, #24
 800c62a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c62e:	d402      	bmi.n	800c636 <_printf_i+0x186>
 800c630:	065f      	lsls	r7, r3, #25
 800c632:	bf48      	it	mi
 800c634:	b2ad      	uxthmi	r5, r5
 800c636:	6031      	str	r1, [r6, #0]
 800c638:	07d9      	lsls	r1, r3, #31
 800c63a:	bf44      	itt	mi
 800c63c:	f043 0320 	orrmi.w	r3, r3, #32
 800c640:	6023      	strmi	r3, [r4, #0]
 800c642:	b11d      	cbz	r5, 800c64c <_printf_i+0x19c>
 800c644:	2310      	movs	r3, #16
 800c646:	e7ad      	b.n	800c5a4 <_printf_i+0xf4>
 800c648:	4826      	ldr	r0, [pc, #152]	@ (800c6e4 <_printf_i+0x234>)
 800c64a:	e7e9      	b.n	800c620 <_printf_i+0x170>
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	f023 0320 	bic.w	r3, r3, #32
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	e7f6      	b.n	800c644 <_printf_i+0x194>
 800c656:	4616      	mov	r6, r2
 800c658:	e7bd      	b.n	800c5d6 <_printf_i+0x126>
 800c65a:	6833      	ldr	r3, [r6, #0]
 800c65c:	6825      	ldr	r5, [r4, #0]
 800c65e:	6961      	ldr	r1, [r4, #20]
 800c660:	1d18      	adds	r0, r3, #4
 800c662:	6030      	str	r0, [r6, #0]
 800c664:	062e      	lsls	r6, r5, #24
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	d501      	bpl.n	800c66e <_printf_i+0x1be>
 800c66a:	6019      	str	r1, [r3, #0]
 800c66c:	e002      	b.n	800c674 <_printf_i+0x1c4>
 800c66e:	0668      	lsls	r0, r5, #25
 800c670:	d5fb      	bpl.n	800c66a <_printf_i+0x1ba>
 800c672:	8019      	strh	r1, [r3, #0]
 800c674:	2300      	movs	r3, #0
 800c676:	6123      	str	r3, [r4, #16]
 800c678:	4616      	mov	r6, r2
 800c67a:	e7bc      	b.n	800c5f6 <_printf_i+0x146>
 800c67c:	6833      	ldr	r3, [r6, #0]
 800c67e:	1d1a      	adds	r2, r3, #4
 800c680:	6032      	str	r2, [r6, #0]
 800c682:	681e      	ldr	r6, [r3, #0]
 800c684:	6862      	ldr	r2, [r4, #4]
 800c686:	2100      	movs	r1, #0
 800c688:	4630      	mov	r0, r6
 800c68a:	f7f3 fda1 	bl	80001d0 <memchr>
 800c68e:	b108      	cbz	r0, 800c694 <_printf_i+0x1e4>
 800c690:	1b80      	subs	r0, r0, r6
 800c692:	6060      	str	r0, [r4, #4]
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	6123      	str	r3, [r4, #16]
 800c698:	2300      	movs	r3, #0
 800c69a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c69e:	e7aa      	b.n	800c5f6 <_printf_i+0x146>
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	4632      	mov	r2, r6
 800c6a4:	4649      	mov	r1, r9
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	47d0      	blx	sl
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d0ad      	beq.n	800c60a <_printf_i+0x15a>
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	079b      	lsls	r3, r3, #30
 800c6b2:	d413      	bmi.n	800c6dc <_printf_i+0x22c>
 800c6b4:	68e0      	ldr	r0, [r4, #12]
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	4298      	cmp	r0, r3
 800c6ba:	bfb8      	it	lt
 800c6bc:	4618      	movlt	r0, r3
 800c6be:	e7a6      	b.n	800c60e <_printf_i+0x15e>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	47d0      	blx	sl
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	d09d      	beq.n	800c60a <_printf_i+0x15a>
 800c6ce:	3501      	adds	r5, #1
 800c6d0:	68e3      	ldr	r3, [r4, #12]
 800c6d2:	9903      	ldr	r1, [sp, #12]
 800c6d4:	1a5b      	subs	r3, r3, r1
 800c6d6:	42ab      	cmp	r3, r5
 800c6d8:	dcf2      	bgt.n	800c6c0 <_printf_i+0x210>
 800c6da:	e7eb      	b.n	800c6b4 <_printf_i+0x204>
 800c6dc:	2500      	movs	r5, #0
 800c6de:	f104 0619 	add.w	r6, r4, #25
 800c6e2:	e7f5      	b.n	800c6d0 <_printf_i+0x220>
 800c6e4:	0800eef6 	.word	0x0800eef6
 800c6e8:	0800ef07 	.word	0x0800ef07

0800c6ec <std>:
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c6f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6fa:	6083      	str	r3, [r0, #8]
 800c6fc:	8181      	strh	r1, [r0, #12]
 800c6fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800c700:	81c2      	strh	r2, [r0, #14]
 800c702:	6183      	str	r3, [r0, #24]
 800c704:	4619      	mov	r1, r3
 800c706:	2208      	movs	r2, #8
 800c708:	305c      	adds	r0, #92	@ 0x5c
 800c70a:	f000 f967 	bl	800c9dc <memset>
 800c70e:	4b0d      	ldr	r3, [pc, #52]	@ (800c744 <std+0x58>)
 800c710:	6263      	str	r3, [r4, #36]	@ 0x24
 800c712:	4b0d      	ldr	r3, [pc, #52]	@ (800c748 <std+0x5c>)
 800c714:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c716:	4b0d      	ldr	r3, [pc, #52]	@ (800c74c <std+0x60>)
 800c718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c71a:	4b0d      	ldr	r3, [pc, #52]	@ (800c750 <std+0x64>)
 800c71c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c71e:	4b0d      	ldr	r3, [pc, #52]	@ (800c754 <std+0x68>)
 800c720:	6224      	str	r4, [r4, #32]
 800c722:	429c      	cmp	r4, r3
 800c724:	d006      	beq.n	800c734 <std+0x48>
 800c726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c72a:	4294      	cmp	r4, r2
 800c72c:	d002      	beq.n	800c734 <std+0x48>
 800c72e:	33d0      	adds	r3, #208	@ 0xd0
 800c730:	429c      	cmp	r4, r3
 800c732:	d105      	bne.n	800c740 <std+0x54>
 800c734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c73c:	f000 ba3a 	b.w	800cbb4 <__retarget_lock_init_recursive>
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	0800c8dd 	.word	0x0800c8dd
 800c748:	0800c8ff 	.word	0x0800c8ff
 800c74c:	0800c937 	.word	0x0800c937
 800c750:	0800c95b 	.word	0x0800c95b
 800c754:	20003404 	.word	0x20003404

0800c758 <stdio_exit_handler>:
 800c758:	4a02      	ldr	r2, [pc, #8]	@ (800c764 <stdio_exit_handler+0xc>)
 800c75a:	4903      	ldr	r1, [pc, #12]	@ (800c768 <stdio_exit_handler+0x10>)
 800c75c:	4803      	ldr	r0, [pc, #12]	@ (800c76c <stdio_exit_handler+0x14>)
 800c75e:	f000 b869 	b.w	800c834 <_fwalk_sglue>
 800c762:	bf00      	nop
 800c764:	20000010 	.word	0x20000010
 800c768:	0800e7b9 	.word	0x0800e7b9
 800c76c:	20000020 	.word	0x20000020

0800c770 <cleanup_stdio>:
 800c770:	6841      	ldr	r1, [r0, #4]
 800c772:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a4 <cleanup_stdio+0x34>)
 800c774:	4299      	cmp	r1, r3
 800c776:	b510      	push	{r4, lr}
 800c778:	4604      	mov	r4, r0
 800c77a:	d001      	beq.n	800c780 <cleanup_stdio+0x10>
 800c77c:	f002 f81c 	bl	800e7b8 <_fflush_r>
 800c780:	68a1      	ldr	r1, [r4, #8]
 800c782:	4b09      	ldr	r3, [pc, #36]	@ (800c7a8 <cleanup_stdio+0x38>)
 800c784:	4299      	cmp	r1, r3
 800c786:	d002      	beq.n	800c78e <cleanup_stdio+0x1e>
 800c788:	4620      	mov	r0, r4
 800c78a:	f002 f815 	bl	800e7b8 <_fflush_r>
 800c78e:	68e1      	ldr	r1, [r4, #12]
 800c790:	4b06      	ldr	r3, [pc, #24]	@ (800c7ac <cleanup_stdio+0x3c>)
 800c792:	4299      	cmp	r1, r3
 800c794:	d004      	beq.n	800c7a0 <cleanup_stdio+0x30>
 800c796:	4620      	mov	r0, r4
 800c798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c79c:	f002 b80c 	b.w	800e7b8 <_fflush_r>
 800c7a0:	bd10      	pop	{r4, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20003404 	.word	0x20003404
 800c7a8:	2000346c 	.word	0x2000346c
 800c7ac:	200034d4 	.word	0x200034d4

0800c7b0 <global_stdio_init.part.0>:
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c7e0 <global_stdio_init.part.0+0x30>)
 800c7b4:	4c0b      	ldr	r4, [pc, #44]	@ (800c7e4 <global_stdio_init.part.0+0x34>)
 800c7b6:	4a0c      	ldr	r2, [pc, #48]	@ (800c7e8 <global_stdio_init.part.0+0x38>)
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	2200      	movs	r2, #0
 800c7be:	2104      	movs	r1, #4
 800c7c0:	f7ff ff94 	bl	800c6ec <std>
 800c7c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	2109      	movs	r1, #9
 800c7cc:	f7ff ff8e 	bl	800c6ec <std>
 800c7d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c7d4:	2202      	movs	r2, #2
 800c7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7da:	2112      	movs	r1, #18
 800c7dc:	f7ff bf86 	b.w	800c6ec <std>
 800c7e0:	2000353c 	.word	0x2000353c
 800c7e4:	20003404 	.word	0x20003404
 800c7e8:	0800c759 	.word	0x0800c759

0800c7ec <__sfp_lock_acquire>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	@ (800c7f4 <__sfp_lock_acquire+0x8>)
 800c7ee:	f000 b9e2 	b.w	800cbb6 <__retarget_lock_acquire_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	20003545 	.word	0x20003545

0800c7f8 <__sfp_lock_release>:
 800c7f8:	4801      	ldr	r0, [pc, #4]	@ (800c800 <__sfp_lock_release+0x8>)
 800c7fa:	f000 b9dd 	b.w	800cbb8 <__retarget_lock_release_recursive>
 800c7fe:	bf00      	nop
 800c800:	20003545 	.word	0x20003545

0800c804 <__sinit>:
 800c804:	b510      	push	{r4, lr}
 800c806:	4604      	mov	r4, r0
 800c808:	f7ff fff0 	bl	800c7ec <__sfp_lock_acquire>
 800c80c:	6a23      	ldr	r3, [r4, #32]
 800c80e:	b11b      	cbz	r3, 800c818 <__sinit+0x14>
 800c810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c814:	f7ff bff0 	b.w	800c7f8 <__sfp_lock_release>
 800c818:	4b04      	ldr	r3, [pc, #16]	@ (800c82c <__sinit+0x28>)
 800c81a:	6223      	str	r3, [r4, #32]
 800c81c:	4b04      	ldr	r3, [pc, #16]	@ (800c830 <__sinit+0x2c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1f5      	bne.n	800c810 <__sinit+0xc>
 800c824:	f7ff ffc4 	bl	800c7b0 <global_stdio_init.part.0>
 800c828:	e7f2      	b.n	800c810 <__sinit+0xc>
 800c82a:	bf00      	nop
 800c82c:	0800c771 	.word	0x0800c771
 800c830:	2000353c 	.word	0x2000353c

0800c834 <_fwalk_sglue>:
 800c834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c838:	4607      	mov	r7, r0
 800c83a:	4688      	mov	r8, r1
 800c83c:	4614      	mov	r4, r2
 800c83e:	2600      	movs	r6, #0
 800c840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c844:	f1b9 0901 	subs.w	r9, r9, #1
 800c848:	d505      	bpl.n	800c856 <_fwalk_sglue+0x22>
 800c84a:	6824      	ldr	r4, [r4, #0]
 800c84c:	2c00      	cmp	r4, #0
 800c84e:	d1f7      	bne.n	800c840 <_fwalk_sglue+0xc>
 800c850:	4630      	mov	r0, r6
 800c852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c856:	89ab      	ldrh	r3, [r5, #12]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d907      	bls.n	800c86c <_fwalk_sglue+0x38>
 800c85c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c860:	3301      	adds	r3, #1
 800c862:	d003      	beq.n	800c86c <_fwalk_sglue+0x38>
 800c864:	4629      	mov	r1, r5
 800c866:	4638      	mov	r0, r7
 800c868:	47c0      	blx	r8
 800c86a:	4306      	orrs	r6, r0
 800c86c:	3568      	adds	r5, #104	@ 0x68
 800c86e:	e7e9      	b.n	800c844 <_fwalk_sglue+0x10>

0800c870 <sniprintf>:
 800c870:	b40c      	push	{r2, r3}
 800c872:	b530      	push	{r4, r5, lr}
 800c874:	4b18      	ldr	r3, [pc, #96]	@ (800c8d8 <sniprintf+0x68>)
 800c876:	1e0c      	subs	r4, r1, #0
 800c878:	681d      	ldr	r5, [r3, #0]
 800c87a:	b09d      	sub	sp, #116	@ 0x74
 800c87c:	da08      	bge.n	800c890 <sniprintf+0x20>
 800c87e:	238b      	movs	r3, #139	@ 0x8b
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	f04f 30ff 	mov.w	r0, #4294967295
 800c886:	b01d      	add	sp, #116	@ 0x74
 800c888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c88c:	b002      	add	sp, #8
 800c88e:	4770      	bx	lr
 800c890:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c894:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c898:	f04f 0300 	mov.w	r3, #0
 800c89c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c89e:	bf14      	ite	ne
 800c8a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c8a4:	4623      	moveq	r3, r4
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	9307      	str	r3, [sp, #28]
 800c8aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c8ae:	9002      	str	r0, [sp, #8]
 800c8b0:	9006      	str	r0, [sp, #24]
 800c8b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c8b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c8b8:	ab21      	add	r3, sp, #132	@ 0x84
 800c8ba:	a902      	add	r1, sp, #8
 800c8bc:	4628      	mov	r0, r5
 800c8be:	9301      	str	r3, [sp, #4]
 800c8c0:	f001 fcb8 	bl	800e234 <_svfiprintf_r>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	bfbc      	itt	lt
 800c8c8:	238b      	movlt	r3, #139	@ 0x8b
 800c8ca:	602b      	strlt	r3, [r5, #0]
 800c8cc:	2c00      	cmp	r4, #0
 800c8ce:	d0da      	beq.n	800c886 <sniprintf+0x16>
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	701a      	strb	r2, [r3, #0]
 800c8d6:	e7d6      	b.n	800c886 <sniprintf+0x16>
 800c8d8:	2000001c 	.word	0x2000001c

0800c8dc <__sread>:
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	460c      	mov	r4, r1
 800c8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e4:	f000 f918 	bl	800cb18 <_read_r>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	bfab      	itete	ge
 800c8ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c8ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c8f0:	181b      	addge	r3, r3, r0
 800c8f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c8f6:	bfac      	ite	ge
 800c8f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c8fa:	81a3      	strhlt	r3, [r4, #12]
 800c8fc:	bd10      	pop	{r4, pc}

0800c8fe <__swrite>:
 800c8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c902:	461f      	mov	r7, r3
 800c904:	898b      	ldrh	r3, [r1, #12]
 800c906:	05db      	lsls	r3, r3, #23
 800c908:	4605      	mov	r5, r0
 800c90a:	460c      	mov	r4, r1
 800c90c:	4616      	mov	r6, r2
 800c90e:	d505      	bpl.n	800c91c <__swrite+0x1e>
 800c910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c914:	2302      	movs	r3, #2
 800c916:	2200      	movs	r2, #0
 800c918:	f000 f8ec 	bl	800caf4 <_lseek_r>
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	4632      	mov	r2, r6
 800c92a:	463b      	mov	r3, r7
 800c92c:	4628      	mov	r0, r5
 800c92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	f000 b903 	b.w	800cb3c <_write_r>

0800c936 <__sseek>:
 800c936:	b510      	push	{r4, lr}
 800c938:	460c      	mov	r4, r1
 800c93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93e:	f000 f8d9 	bl	800caf4 <_lseek_r>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	bf15      	itete	ne
 800c948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c94a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c94e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c952:	81a3      	strheq	r3, [r4, #12]
 800c954:	bf18      	it	ne
 800c956:	81a3      	strhne	r3, [r4, #12]
 800c958:	bd10      	pop	{r4, pc}

0800c95a <__sclose>:
 800c95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95e:	f000 b85b 	b.w	800ca18 <_close_r>

0800c962 <_vsniprintf_r>:
 800c962:	b530      	push	{r4, r5, lr}
 800c964:	4614      	mov	r4, r2
 800c966:	2c00      	cmp	r4, #0
 800c968:	b09b      	sub	sp, #108	@ 0x6c
 800c96a:	4605      	mov	r5, r0
 800c96c:	461a      	mov	r2, r3
 800c96e:	da05      	bge.n	800c97c <_vsniprintf_r+0x1a>
 800c970:	238b      	movs	r3, #139	@ 0x8b
 800c972:	6003      	str	r3, [r0, #0]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	b01b      	add	sp, #108	@ 0x6c
 800c97a:	bd30      	pop	{r4, r5, pc}
 800c97c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c980:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c984:	f04f 0300 	mov.w	r3, #0
 800c988:	9319      	str	r3, [sp, #100]	@ 0x64
 800c98a:	bf14      	ite	ne
 800c98c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c990:	4623      	moveq	r3, r4
 800c992:	9302      	str	r3, [sp, #8]
 800c994:	9305      	str	r3, [sp, #20]
 800c996:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c99a:	9100      	str	r1, [sp, #0]
 800c99c:	9104      	str	r1, [sp, #16]
 800c99e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c9a2:	4669      	mov	r1, sp
 800c9a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c9a6:	f001 fc45 	bl	800e234 <_svfiprintf_r>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	bfbc      	itt	lt
 800c9ae:	238b      	movlt	r3, #139	@ 0x8b
 800c9b0:	602b      	strlt	r3, [r5, #0]
 800c9b2:	2c00      	cmp	r4, #0
 800c9b4:	d0e0      	beq.n	800c978 <_vsniprintf_r+0x16>
 800c9b6:	9b00      	ldr	r3, [sp, #0]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	e7dc      	b.n	800c978 <_vsniprintf_r+0x16>
	...

0800c9c0 <vsniprintf>:
 800c9c0:	b507      	push	{r0, r1, r2, lr}
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	460a      	mov	r2, r1
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	4803      	ldr	r0, [pc, #12]	@ (800c9d8 <vsniprintf+0x18>)
 800c9cc:	6800      	ldr	r0, [r0, #0]
 800c9ce:	f7ff ffc8 	bl	800c962 <_vsniprintf_r>
 800c9d2:	b003      	add	sp, #12
 800c9d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9d8:	2000001c 	.word	0x2000001c

0800c9dc <memset>:
 800c9dc:	4402      	add	r2, r0
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d100      	bne.n	800c9e6 <memset+0xa>
 800c9e4:	4770      	bx	lr
 800c9e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ea:	e7f9      	b.n	800c9e0 <memset+0x4>

0800c9ec <strncmp>:
 800c9ec:	b510      	push	{r4, lr}
 800c9ee:	b16a      	cbz	r2, 800ca0c <strncmp+0x20>
 800c9f0:	3901      	subs	r1, #1
 800c9f2:	1884      	adds	r4, r0, r2
 800c9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d103      	bne.n	800ca08 <strncmp+0x1c>
 800ca00:	42a0      	cmp	r0, r4
 800ca02:	d001      	beq.n	800ca08 <strncmp+0x1c>
 800ca04:	2a00      	cmp	r2, #0
 800ca06:	d1f5      	bne.n	800c9f4 <strncmp+0x8>
 800ca08:	1ad0      	subs	r0, r2, r3
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	e7fc      	b.n	800ca0a <strncmp+0x1e>

0800ca10 <_localeconv_r>:
 800ca10:	4800      	ldr	r0, [pc, #0]	@ (800ca14 <_localeconv_r+0x4>)
 800ca12:	4770      	bx	lr
 800ca14:	2000015c 	.word	0x2000015c

0800ca18 <_close_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d06      	ldr	r5, [pc, #24]	@ (800ca34 <_close_r+0x1c>)
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	602b      	str	r3, [r5, #0]
 800ca24:	f7f5 f97c 	bl	8001d20 <_close>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_close_r+0x1a>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_close_r+0x1a>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	20003540 	.word	0x20003540

0800ca38 <_reclaim_reent>:
 800ca38:	4b2d      	ldr	r3, [pc, #180]	@ (800caf0 <_reclaim_reent+0xb8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4283      	cmp	r3, r0
 800ca3e:	b570      	push	{r4, r5, r6, lr}
 800ca40:	4604      	mov	r4, r0
 800ca42:	d053      	beq.n	800caec <_reclaim_reent+0xb4>
 800ca44:	69c3      	ldr	r3, [r0, #28]
 800ca46:	b31b      	cbz	r3, 800ca90 <_reclaim_reent+0x58>
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	b163      	cbz	r3, 800ca66 <_reclaim_reent+0x2e>
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	69e3      	ldr	r3, [r4, #28]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	5959      	ldr	r1, [r3, r5]
 800ca54:	b9b1      	cbnz	r1, 800ca84 <_reclaim_reent+0x4c>
 800ca56:	3504      	adds	r5, #4
 800ca58:	2d80      	cmp	r5, #128	@ 0x80
 800ca5a:	d1f8      	bne.n	800ca4e <_reclaim_reent+0x16>
 800ca5c:	69e3      	ldr	r3, [r4, #28]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	68d9      	ldr	r1, [r3, #12]
 800ca62:	f000 ff11 	bl	800d888 <_free_r>
 800ca66:	69e3      	ldr	r3, [r4, #28]
 800ca68:	6819      	ldr	r1, [r3, #0]
 800ca6a:	b111      	cbz	r1, 800ca72 <_reclaim_reent+0x3a>
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 ff0b 	bl	800d888 <_free_r>
 800ca72:	69e3      	ldr	r3, [r4, #28]
 800ca74:	689d      	ldr	r5, [r3, #8]
 800ca76:	b15d      	cbz	r5, 800ca90 <_reclaim_reent+0x58>
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	682d      	ldr	r5, [r5, #0]
 800ca7e:	f000 ff03 	bl	800d888 <_free_r>
 800ca82:	e7f8      	b.n	800ca76 <_reclaim_reent+0x3e>
 800ca84:	680e      	ldr	r6, [r1, #0]
 800ca86:	4620      	mov	r0, r4
 800ca88:	f000 fefe 	bl	800d888 <_free_r>
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	e7e1      	b.n	800ca54 <_reclaim_reent+0x1c>
 800ca90:	6961      	ldr	r1, [r4, #20]
 800ca92:	b111      	cbz	r1, 800ca9a <_reclaim_reent+0x62>
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fef7 	bl	800d888 <_free_r>
 800ca9a:	69e1      	ldr	r1, [r4, #28]
 800ca9c:	b111      	cbz	r1, 800caa4 <_reclaim_reent+0x6c>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 fef2 	bl	800d888 <_free_r>
 800caa4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800caa6:	b111      	cbz	r1, 800caae <_reclaim_reent+0x76>
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 feed 	bl	800d888 <_free_r>
 800caae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cab0:	b111      	cbz	r1, 800cab8 <_reclaim_reent+0x80>
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 fee8 	bl	800d888 <_free_r>
 800cab8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800caba:	b111      	cbz	r1, 800cac2 <_reclaim_reent+0x8a>
 800cabc:	4620      	mov	r0, r4
 800cabe:	f000 fee3 	bl	800d888 <_free_r>
 800cac2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cac4:	b111      	cbz	r1, 800cacc <_reclaim_reent+0x94>
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 fede 	bl	800d888 <_free_r>
 800cacc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cace:	b111      	cbz	r1, 800cad6 <_reclaim_reent+0x9e>
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 fed9 	bl	800d888 <_free_r>
 800cad6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cad8:	b111      	cbz	r1, 800cae0 <_reclaim_reent+0xa8>
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 fed4 	bl	800d888 <_free_r>
 800cae0:	6a23      	ldr	r3, [r4, #32]
 800cae2:	b11b      	cbz	r3, 800caec <_reclaim_reent+0xb4>
 800cae4:	4620      	mov	r0, r4
 800cae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800caea:	4718      	bx	r3
 800caec:	bd70      	pop	{r4, r5, r6, pc}
 800caee:	bf00      	nop
 800caf0:	2000001c 	.word	0x2000001c

0800caf4 <_lseek_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d07      	ldr	r5, [pc, #28]	@ (800cb14 <_lseek_r+0x20>)
 800caf8:	4604      	mov	r4, r0
 800cafa:	4608      	mov	r0, r1
 800cafc:	4611      	mov	r1, r2
 800cafe:	2200      	movs	r2, #0
 800cb00:	602a      	str	r2, [r5, #0]
 800cb02:	461a      	mov	r2, r3
 800cb04:	f7f5 f933 	bl	8001d6e <_lseek>
 800cb08:	1c43      	adds	r3, r0, #1
 800cb0a:	d102      	bne.n	800cb12 <_lseek_r+0x1e>
 800cb0c:	682b      	ldr	r3, [r5, #0]
 800cb0e:	b103      	cbz	r3, 800cb12 <_lseek_r+0x1e>
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	bd38      	pop	{r3, r4, r5, pc}
 800cb14:	20003540 	.word	0x20003540

0800cb18 <_read_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d07      	ldr	r5, [pc, #28]	@ (800cb38 <_read_r+0x20>)
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	4608      	mov	r0, r1
 800cb20:	4611      	mov	r1, r2
 800cb22:	2200      	movs	r2, #0
 800cb24:	602a      	str	r2, [r5, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	f7f5 f8c1 	bl	8001cae <_read>
 800cb2c:	1c43      	adds	r3, r0, #1
 800cb2e:	d102      	bne.n	800cb36 <_read_r+0x1e>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	b103      	cbz	r3, 800cb36 <_read_r+0x1e>
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	bd38      	pop	{r3, r4, r5, pc}
 800cb38:	20003540 	.word	0x20003540

0800cb3c <_write_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4d07      	ldr	r5, [pc, #28]	@ (800cb5c <_write_r+0x20>)
 800cb40:	4604      	mov	r4, r0
 800cb42:	4608      	mov	r0, r1
 800cb44:	4611      	mov	r1, r2
 800cb46:	2200      	movs	r2, #0
 800cb48:	602a      	str	r2, [r5, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	f7f5 f8cc 	bl	8001ce8 <_write>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	d102      	bne.n	800cb5a <_write_r+0x1e>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	b103      	cbz	r3, 800cb5a <_write_r+0x1e>
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	20003540 	.word	0x20003540

0800cb60 <__errno>:
 800cb60:	4b01      	ldr	r3, [pc, #4]	@ (800cb68 <__errno+0x8>)
 800cb62:	6818      	ldr	r0, [r3, #0]
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	2000001c 	.word	0x2000001c

0800cb6c <__libc_init_array>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	4d0d      	ldr	r5, [pc, #52]	@ (800cba4 <__libc_init_array+0x38>)
 800cb70:	4c0d      	ldr	r4, [pc, #52]	@ (800cba8 <__libc_init_array+0x3c>)
 800cb72:	1b64      	subs	r4, r4, r5
 800cb74:	10a4      	asrs	r4, r4, #2
 800cb76:	2600      	movs	r6, #0
 800cb78:	42a6      	cmp	r6, r4
 800cb7a:	d109      	bne.n	800cb90 <__libc_init_array+0x24>
 800cb7c:	4d0b      	ldr	r5, [pc, #44]	@ (800cbac <__libc_init_array+0x40>)
 800cb7e:	4c0c      	ldr	r4, [pc, #48]	@ (800cbb0 <__libc_init_array+0x44>)
 800cb80:	f002 f86a 	bl	800ec58 <_init>
 800cb84:	1b64      	subs	r4, r4, r5
 800cb86:	10a4      	asrs	r4, r4, #2
 800cb88:	2600      	movs	r6, #0
 800cb8a:	42a6      	cmp	r6, r4
 800cb8c:	d105      	bne.n	800cb9a <__libc_init_array+0x2e>
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb94:	4798      	blx	r3
 800cb96:	3601      	adds	r6, #1
 800cb98:	e7ee      	b.n	800cb78 <__libc_init_array+0xc>
 800cb9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb9e:	4798      	blx	r3
 800cba0:	3601      	adds	r6, #1
 800cba2:	e7f2      	b.n	800cb8a <__libc_init_array+0x1e>
 800cba4:	0800f264 	.word	0x0800f264
 800cba8:	0800f264 	.word	0x0800f264
 800cbac:	0800f264 	.word	0x0800f264
 800cbb0:	0800f268 	.word	0x0800f268

0800cbb4 <__retarget_lock_init_recursive>:
 800cbb4:	4770      	bx	lr

0800cbb6 <__retarget_lock_acquire_recursive>:
 800cbb6:	4770      	bx	lr

0800cbb8 <__retarget_lock_release_recursive>:
 800cbb8:	4770      	bx	lr

0800cbba <memcpy>:
 800cbba:	440a      	add	r2, r1
 800cbbc:	4291      	cmp	r1, r2
 800cbbe:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbc2:	d100      	bne.n	800cbc6 <memcpy+0xc>
 800cbc4:	4770      	bx	lr
 800cbc6:	b510      	push	{r4, lr}
 800cbc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbd0:	4291      	cmp	r1, r2
 800cbd2:	d1f9      	bne.n	800cbc8 <memcpy+0xe>
 800cbd4:	bd10      	pop	{r4, pc}

0800cbd6 <quorem>:
 800cbd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbda:	6903      	ldr	r3, [r0, #16]
 800cbdc:	690c      	ldr	r4, [r1, #16]
 800cbde:	42a3      	cmp	r3, r4
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	db7e      	blt.n	800cce2 <quorem+0x10c>
 800cbe4:	3c01      	subs	r4, #1
 800cbe6:	f101 0814 	add.w	r8, r1, #20
 800cbea:	00a3      	lsls	r3, r4, #2
 800cbec:	f100 0514 	add.w	r5, r0, #20
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbf6:	9301      	str	r3, [sp, #4]
 800cbf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc00:	3301      	adds	r3, #1
 800cc02:	429a      	cmp	r2, r3
 800cc04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc08:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc0c:	d32e      	bcc.n	800cc6c <quorem+0x96>
 800cc0e:	f04f 0a00 	mov.w	sl, #0
 800cc12:	46c4      	mov	ip, r8
 800cc14:	46ae      	mov	lr, r5
 800cc16:	46d3      	mov	fp, sl
 800cc18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc1c:	b298      	uxth	r0, r3
 800cc1e:	fb06 a000 	mla	r0, r6, r0, sl
 800cc22:	0c02      	lsrs	r2, r0, #16
 800cc24:	0c1b      	lsrs	r3, r3, #16
 800cc26:	fb06 2303 	mla	r3, r6, r3, r2
 800cc2a:	f8de 2000 	ldr.w	r2, [lr]
 800cc2e:	b280      	uxth	r0, r0
 800cc30:	b292      	uxth	r2, r2
 800cc32:	1a12      	subs	r2, r2, r0
 800cc34:	445a      	add	r2, fp
 800cc36:	f8de 0000 	ldr.w	r0, [lr]
 800cc3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cc44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc48:	b292      	uxth	r2, r2
 800cc4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc4e:	45e1      	cmp	r9, ip
 800cc50:	f84e 2b04 	str.w	r2, [lr], #4
 800cc54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc58:	d2de      	bcs.n	800cc18 <quorem+0x42>
 800cc5a:	9b00      	ldr	r3, [sp, #0]
 800cc5c:	58eb      	ldr	r3, [r5, r3]
 800cc5e:	b92b      	cbnz	r3, 800cc6c <quorem+0x96>
 800cc60:	9b01      	ldr	r3, [sp, #4]
 800cc62:	3b04      	subs	r3, #4
 800cc64:	429d      	cmp	r5, r3
 800cc66:	461a      	mov	r2, r3
 800cc68:	d32f      	bcc.n	800ccca <quorem+0xf4>
 800cc6a:	613c      	str	r4, [r7, #16]
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	f001 f97d 	bl	800df6c <__mcmp>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	db25      	blt.n	800ccc2 <quorem+0xec>
 800cc76:	4629      	mov	r1, r5
 800cc78:	2000      	movs	r0, #0
 800cc7a:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc7e:	f8d1 c000 	ldr.w	ip, [r1]
 800cc82:	fa1f fe82 	uxth.w	lr, r2
 800cc86:	fa1f f38c 	uxth.w	r3, ip
 800cc8a:	eba3 030e 	sub.w	r3, r3, lr
 800cc8e:	4403      	add	r3, r0
 800cc90:	0c12      	lsrs	r2, r2, #16
 800cc92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cca0:	45c1      	cmp	r9, r8
 800cca2:	f841 3b04 	str.w	r3, [r1], #4
 800cca6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ccaa:	d2e6      	bcs.n	800cc7a <quorem+0xa4>
 800ccac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccb4:	b922      	cbnz	r2, 800ccc0 <quorem+0xea>
 800ccb6:	3b04      	subs	r3, #4
 800ccb8:	429d      	cmp	r5, r3
 800ccba:	461a      	mov	r2, r3
 800ccbc:	d30b      	bcc.n	800ccd6 <quorem+0x100>
 800ccbe:	613c      	str	r4, [r7, #16]
 800ccc0:	3601      	adds	r6, #1
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	b003      	add	sp, #12
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	6812      	ldr	r2, [r2, #0]
 800cccc:	3b04      	subs	r3, #4
 800ccce:	2a00      	cmp	r2, #0
 800ccd0:	d1cb      	bne.n	800cc6a <quorem+0x94>
 800ccd2:	3c01      	subs	r4, #1
 800ccd4:	e7c6      	b.n	800cc64 <quorem+0x8e>
 800ccd6:	6812      	ldr	r2, [r2, #0]
 800ccd8:	3b04      	subs	r3, #4
 800ccda:	2a00      	cmp	r2, #0
 800ccdc:	d1ef      	bne.n	800ccbe <quorem+0xe8>
 800ccde:	3c01      	subs	r4, #1
 800cce0:	e7ea      	b.n	800ccb8 <quorem+0xe2>
 800cce2:	2000      	movs	r0, #0
 800cce4:	e7ee      	b.n	800ccc4 <quorem+0xee>
	...

0800cce8 <_dtoa_r>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	69c7      	ldr	r7, [r0, #28]
 800ccee:	b097      	sub	sp, #92	@ 0x5c
 800ccf0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ccf4:	ec55 4b10 	vmov	r4, r5, d0
 800ccf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ccfa:	9107      	str	r1, [sp, #28]
 800ccfc:	4681      	mov	r9, r0
 800ccfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd00:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd02:	b97f      	cbnz	r7, 800cd24 <_dtoa_r+0x3c>
 800cd04:	2010      	movs	r0, #16
 800cd06:	f000 fe09 	bl	800d91c <malloc>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800cd10:	b920      	cbnz	r0, 800cd1c <_dtoa_r+0x34>
 800cd12:	4ba9      	ldr	r3, [pc, #676]	@ (800cfb8 <_dtoa_r+0x2d0>)
 800cd14:	21ef      	movs	r1, #239	@ 0xef
 800cd16:	48a9      	ldr	r0, [pc, #676]	@ (800cfbc <_dtoa_r+0x2d4>)
 800cd18:	f001 fe34 	bl	800e984 <__assert_func>
 800cd1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cd20:	6007      	str	r7, [r0, #0]
 800cd22:	60c7      	str	r7, [r0, #12]
 800cd24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd28:	6819      	ldr	r1, [r3, #0]
 800cd2a:	b159      	cbz	r1, 800cd44 <_dtoa_r+0x5c>
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	604a      	str	r2, [r1, #4]
 800cd30:	2301      	movs	r3, #1
 800cd32:	4093      	lsls	r3, r2
 800cd34:	608b      	str	r3, [r1, #8]
 800cd36:	4648      	mov	r0, r9
 800cd38:	f000 fee6 	bl	800db08 <_Bfree>
 800cd3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cd40:	2200      	movs	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	1e2b      	subs	r3, r5, #0
 800cd46:	bfb9      	ittee	lt
 800cd48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd4c:	9305      	strlt	r3, [sp, #20]
 800cd4e:	2300      	movge	r3, #0
 800cd50:	6033      	strge	r3, [r6, #0]
 800cd52:	9f05      	ldr	r7, [sp, #20]
 800cd54:	4b9a      	ldr	r3, [pc, #616]	@ (800cfc0 <_dtoa_r+0x2d8>)
 800cd56:	bfbc      	itt	lt
 800cd58:	2201      	movlt	r2, #1
 800cd5a:	6032      	strlt	r2, [r6, #0]
 800cd5c:	43bb      	bics	r3, r7
 800cd5e:	d112      	bne.n	800cd86 <_dtoa_r+0x9e>
 800cd60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cd62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd66:	6013      	str	r3, [r2, #0]
 800cd68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd6c:	4323      	orrs	r3, r4
 800cd6e:	f000 855a 	beq.w	800d826 <_dtoa_r+0xb3e>
 800cd72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cfd4 <_dtoa_r+0x2ec>
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 855c 	beq.w	800d836 <_dtoa_r+0xb4e>
 800cd7e:	f10a 0303 	add.w	r3, sl, #3
 800cd82:	f000 bd56 	b.w	800d832 <_dtoa_r+0xb4a>
 800cd86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	ec51 0b17 	vmov	r0, r1, d7
 800cd90:	2300      	movs	r3, #0
 800cd92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cd96:	f7f3 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd9a:	4680      	mov	r8, r0
 800cd9c:	b158      	cbz	r0, 800cdb6 <_dtoa_r+0xce>
 800cd9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cda0:	2301      	movs	r3, #1
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cda6:	b113      	cbz	r3, 800cdae <_dtoa_r+0xc6>
 800cda8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cdaa:	4b86      	ldr	r3, [pc, #536]	@ (800cfc4 <_dtoa_r+0x2dc>)
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cfd8 <_dtoa_r+0x2f0>
 800cdb2:	f000 bd40 	b.w	800d836 <_dtoa_r+0xb4e>
 800cdb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cdba:	aa14      	add	r2, sp, #80	@ 0x50
 800cdbc:	a915      	add	r1, sp, #84	@ 0x54
 800cdbe:	4648      	mov	r0, r9
 800cdc0:	f001 f984 	bl	800e0cc <__d2b>
 800cdc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cdc8:	9002      	str	r0, [sp, #8]
 800cdca:	2e00      	cmp	r6, #0
 800cdcc:	d078      	beq.n	800cec0 <_dtoa_r+0x1d8>
 800cdce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cdd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cddc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cde0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cde4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cde8:	4619      	mov	r1, r3
 800cdea:	2200      	movs	r2, #0
 800cdec:	4b76      	ldr	r3, [pc, #472]	@ (800cfc8 <_dtoa_r+0x2e0>)
 800cdee:	f7f3 fa4b 	bl	8000288 <__aeabi_dsub>
 800cdf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800cfa0 <_dtoa_r+0x2b8>)
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	f7f3 fbfe 	bl	80005f8 <__aeabi_dmul>
 800cdfc:	a36a      	add	r3, pc, #424	@ (adr r3, 800cfa8 <_dtoa_r+0x2c0>)
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	f7f3 fa43 	bl	800028c <__adddf3>
 800ce06:	4604      	mov	r4, r0
 800ce08:	4630      	mov	r0, r6
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	f7f3 fb8a 	bl	8000524 <__aeabi_i2d>
 800ce10:	a367      	add	r3, pc, #412	@ (adr r3, 800cfb0 <_dtoa_r+0x2c8>)
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	f7f3 fbef 	bl	80005f8 <__aeabi_dmul>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	4620      	mov	r0, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7f3 fa33 	bl	800028c <__adddf3>
 800ce26:	4604      	mov	r4, r0
 800ce28:	460d      	mov	r5, r1
 800ce2a:	f7f3 fe95 	bl	8000b58 <__aeabi_d2iz>
 800ce2e:	2200      	movs	r2, #0
 800ce30:	4607      	mov	r7, r0
 800ce32:	2300      	movs	r3, #0
 800ce34:	4620      	mov	r0, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	f7f3 fe50 	bl	8000adc <__aeabi_dcmplt>
 800ce3c:	b140      	cbz	r0, 800ce50 <_dtoa_r+0x168>
 800ce3e:	4638      	mov	r0, r7
 800ce40:	f7f3 fb70 	bl	8000524 <__aeabi_i2d>
 800ce44:	4622      	mov	r2, r4
 800ce46:	462b      	mov	r3, r5
 800ce48:	f7f3 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce4c:	b900      	cbnz	r0, 800ce50 <_dtoa_r+0x168>
 800ce4e:	3f01      	subs	r7, #1
 800ce50:	2f16      	cmp	r7, #22
 800ce52:	d852      	bhi.n	800cefa <_dtoa_r+0x212>
 800ce54:	4b5d      	ldr	r3, [pc, #372]	@ (800cfcc <_dtoa_r+0x2e4>)
 800ce56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ce62:	f7f3 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d049      	beq.n	800cefe <_dtoa_r+0x216>
 800ce6a:	3f01      	subs	r7, #1
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce72:	1b9b      	subs	r3, r3, r6
 800ce74:	1e5a      	subs	r2, r3, #1
 800ce76:	bf45      	ittet	mi
 800ce78:	f1c3 0301 	rsbmi	r3, r3, #1
 800ce7c:	9300      	strmi	r3, [sp, #0]
 800ce7e:	2300      	movpl	r3, #0
 800ce80:	2300      	movmi	r3, #0
 800ce82:	9206      	str	r2, [sp, #24]
 800ce84:	bf54      	ite	pl
 800ce86:	9300      	strpl	r3, [sp, #0]
 800ce88:	9306      	strmi	r3, [sp, #24]
 800ce8a:	2f00      	cmp	r7, #0
 800ce8c:	db39      	blt.n	800cf02 <_dtoa_r+0x21a>
 800ce8e:	9b06      	ldr	r3, [sp, #24]
 800ce90:	970d      	str	r7, [sp, #52]	@ 0x34
 800ce92:	443b      	add	r3, r7
 800ce94:	9306      	str	r3, [sp, #24]
 800ce96:	2300      	movs	r3, #0
 800ce98:	9308      	str	r3, [sp, #32]
 800ce9a:	9b07      	ldr	r3, [sp, #28]
 800ce9c:	2b09      	cmp	r3, #9
 800ce9e:	d863      	bhi.n	800cf68 <_dtoa_r+0x280>
 800cea0:	2b05      	cmp	r3, #5
 800cea2:	bfc4      	itt	gt
 800cea4:	3b04      	subgt	r3, #4
 800cea6:	9307      	strgt	r3, [sp, #28]
 800cea8:	9b07      	ldr	r3, [sp, #28]
 800ceaa:	f1a3 0302 	sub.w	r3, r3, #2
 800ceae:	bfcc      	ite	gt
 800ceb0:	2400      	movgt	r4, #0
 800ceb2:	2401      	movle	r4, #1
 800ceb4:	2b03      	cmp	r3, #3
 800ceb6:	d863      	bhi.n	800cf80 <_dtoa_r+0x298>
 800ceb8:	e8df f003 	tbb	[pc, r3]
 800cebc:	2b375452 	.word	0x2b375452
 800cec0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cec4:	441e      	add	r6, r3
 800cec6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ceca:	2b20      	cmp	r3, #32
 800cecc:	bfc1      	itttt	gt
 800cece:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ced2:	409f      	lslgt	r7, r3
 800ced4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ced8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cedc:	bfd6      	itet	le
 800cede:	f1c3 0320 	rsble	r3, r3, #32
 800cee2:	ea47 0003 	orrgt.w	r0, r7, r3
 800cee6:	fa04 f003 	lslle.w	r0, r4, r3
 800ceea:	f7f3 fb0b 	bl	8000504 <__aeabi_ui2d>
 800ceee:	2201      	movs	r2, #1
 800cef0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cef4:	3e01      	subs	r6, #1
 800cef6:	9212      	str	r2, [sp, #72]	@ 0x48
 800cef8:	e776      	b.n	800cde8 <_dtoa_r+0x100>
 800cefa:	2301      	movs	r3, #1
 800cefc:	e7b7      	b.n	800ce6e <_dtoa_r+0x186>
 800cefe:	9010      	str	r0, [sp, #64]	@ 0x40
 800cf00:	e7b6      	b.n	800ce70 <_dtoa_r+0x188>
 800cf02:	9b00      	ldr	r3, [sp, #0]
 800cf04:	1bdb      	subs	r3, r3, r7
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	427b      	negs	r3, r7
 800cf0a:	9308      	str	r3, [sp, #32]
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cf10:	e7c3      	b.n	800ce9a <_dtoa_r+0x1b2>
 800cf12:	2301      	movs	r3, #1
 800cf14:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf18:	eb07 0b03 	add.w	fp, r7, r3
 800cf1c:	f10b 0301 	add.w	r3, fp, #1
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	9303      	str	r3, [sp, #12]
 800cf24:	bfb8      	it	lt
 800cf26:	2301      	movlt	r3, #1
 800cf28:	e006      	b.n	800cf38 <_dtoa_r+0x250>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	dd28      	ble.n	800cf86 <_dtoa_r+0x29e>
 800cf34:	469b      	mov	fp, r3
 800cf36:	9303      	str	r3, [sp, #12]
 800cf38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	2204      	movs	r2, #4
 800cf40:	f102 0514 	add.w	r5, r2, #20
 800cf44:	429d      	cmp	r5, r3
 800cf46:	d926      	bls.n	800cf96 <_dtoa_r+0x2ae>
 800cf48:	6041      	str	r1, [r0, #4]
 800cf4a:	4648      	mov	r0, r9
 800cf4c:	f000 fd9c 	bl	800da88 <_Balloc>
 800cf50:	4682      	mov	sl, r0
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d142      	bne.n	800cfdc <_dtoa_r+0x2f4>
 800cf56:	4b1e      	ldr	r3, [pc, #120]	@ (800cfd0 <_dtoa_r+0x2e8>)
 800cf58:	4602      	mov	r2, r0
 800cf5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf5e:	e6da      	b.n	800cd16 <_dtoa_r+0x2e>
 800cf60:	2300      	movs	r3, #0
 800cf62:	e7e3      	b.n	800cf2c <_dtoa_r+0x244>
 800cf64:	2300      	movs	r3, #0
 800cf66:	e7d5      	b.n	800cf14 <_dtoa_r+0x22c>
 800cf68:	2401      	movs	r4, #1
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	9307      	str	r3, [sp, #28]
 800cf6e:	9409      	str	r4, [sp, #36]	@ 0x24
 800cf70:	f04f 3bff 	mov.w	fp, #4294967295
 800cf74:	2200      	movs	r2, #0
 800cf76:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf7a:	2312      	movs	r3, #18
 800cf7c:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf7e:	e7db      	b.n	800cf38 <_dtoa_r+0x250>
 800cf80:	2301      	movs	r3, #1
 800cf82:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf84:	e7f4      	b.n	800cf70 <_dtoa_r+0x288>
 800cf86:	f04f 0b01 	mov.w	fp, #1
 800cf8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf8e:	465b      	mov	r3, fp
 800cf90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cf94:	e7d0      	b.n	800cf38 <_dtoa_r+0x250>
 800cf96:	3101      	adds	r1, #1
 800cf98:	0052      	lsls	r2, r2, #1
 800cf9a:	e7d1      	b.n	800cf40 <_dtoa_r+0x258>
 800cf9c:	f3af 8000 	nop.w
 800cfa0:	636f4361 	.word	0x636f4361
 800cfa4:	3fd287a7 	.word	0x3fd287a7
 800cfa8:	8b60c8b3 	.word	0x8b60c8b3
 800cfac:	3fc68a28 	.word	0x3fc68a28
 800cfb0:	509f79fb 	.word	0x509f79fb
 800cfb4:	3fd34413 	.word	0x3fd34413
 800cfb8:	0800ef25 	.word	0x0800ef25
 800cfbc:	0800ef3c 	.word	0x0800ef3c
 800cfc0:	7ff00000 	.word	0x7ff00000
 800cfc4:	0800eef5 	.word	0x0800eef5
 800cfc8:	3ff80000 	.word	0x3ff80000
 800cfcc:	0800f090 	.word	0x0800f090
 800cfd0:	0800ef94 	.word	0x0800ef94
 800cfd4:	0800ef21 	.word	0x0800ef21
 800cfd8:	0800eef4 	.word	0x0800eef4
 800cfdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfe0:	6018      	str	r0, [r3, #0]
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	2b0e      	cmp	r3, #14
 800cfe6:	f200 80a1 	bhi.w	800d12c <_dtoa_r+0x444>
 800cfea:	2c00      	cmp	r4, #0
 800cfec:	f000 809e 	beq.w	800d12c <_dtoa_r+0x444>
 800cff0:	2f00      	cmp	r7, #0
 800cff2:	dd33      	ble.n	800d05c <_dtoa_r+0x374>
 800cff4:	4b9c      	ldr	r3, [pc, #624]	@ (800d268 <_dtoa_r+0x580>)
 800cff6:	f007 020f 	and.w	r2, r7, #15
 800cffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cffe:	ed93 7b00 	vldr	d7, [r3]
 800d002:	05f8      	lsls	r0, r7, #23
 800d004:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d00c:	d516      	bpl.n	800d03c <_dtoa_r+0x354>
 800d00e:	4b97      	ldr	r3, [pc, #604]	@ (800d26c <_dtoa_r+0x584>)
 800d010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d018:	f7f3 fc18 	bl	800084c <__aeabi_ddiv>
 800d01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d020:	f004 040f 	and.w	r4, r4, #15
 800d024:	2603      	movs	r6, #3
 800d026:	4d91      	ldr	r5, [pc, #580]	@ (800d26c <_dtoa_r+0x584>)
 800d028:	b954      	cbnz	r4, 800d040 <_dtoa_r+0x358>
 800d02a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d02e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d032:	f7f3 fc0b 	bl	800084c <__aeabi_ddiv>
 800d036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d03a:	e028      	b.n	800d08e <_dtoa_r+0x3a6>
 800d03c:	2602      	movs	r6, #2
 800d03e:	e7f2      	b.n	800d026 <_dtoa_r+0x33e>
 800d040:	07e1      	lsls	r1, r4, #31
 800d042:	d508      	bpl.n	800d056 <_dtoa_r+0x36e>
 800d044:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d04c:	f7f3 fad4 	bl	80005f8 <__aeabi_dmul>
 800d050:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d054:	3601      	adds	r6, #1
 800d056:	1064      	asrs	r4, r4, #1
 800d058:	3508      	adds	r5, #8
 800d05a:	e7e5      	b.n	800d028 <_dtoa_r+0x340>
 800d05c:	f000 80af 	beq.w	800d1be <_dtoa_r+0x4d6>
 800d060:	427c      	negs	r4, r7
 800d062:	4b81      	ldr	r3, [pc, #516]	@ (800d268 <_dtoa_r+0x580>)
 800d064:	4d81      	ldr	r5, [pc, #516]	@ (800d26c <_dtoa_r+0x584>)
 800d066:	f004 020f 	and.w	r2, r4, #15
 800d06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d07e:	1124      	asrs	r4, r4, #4
 800d080:	2300      	movs	r3, #0
 800d082:	2602      	movs	r6, #2
 800d084:	2c00      	cmp	r4, #0
 800d086:	f040 808f 	bne.w	800d1a8 <_dtoa_r+0x4c0>
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1d3      	bne.n	800d036 <_dtoa_r+0x34e>
 800d08e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d090:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d094:	2b00      	cmp	r3, #0
 800d096:	f000 8094 	beq.w	800d1c2 <_dtoa_r+0x4da>
 800d09a:	4b75      	ldr	r3, [pc, #468]	@ (800d270 <_dtoa_r+0x588>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	4620      	mov	r0, r4
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	f7f3 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	f000 808b 	beq.w	800d1c2 <_dtoa_r+0x4da>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f000 8087 	beq.w	800d1c2 <_dtoa_r+0x4da>
 800d0b4:	f1bb 0f00 	cmp.w	fp, #0
 800d0b8:	dd34      	ble.n	800d124 <_dtoa_r+0x43c>
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	4b6d      	ldr	r3, [pc, #436]	@ (800d274 <_dtoa_r+0x58c>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	f7f3 fa99 	bl	80005f8 <__aeabi_dmul>
 800d0c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0ca:	f107 38ff 	add.w	r8, r7, #4294967295
 800d0ce:	3601      	adds	r6, #1
 800d0d0:	465c      	mov	r4, fp
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7f3 fa26 	bl	8000524 <__aeabi_i2d>
 800d0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0dc:	f7f3 fa8c 	bl	80005f8 <__aeabi_dmul>
 800d0e0:	4b65      	ldr	r3, [pc, #404]	@ (800d278 <_dtoa_r+0x590>)
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f7f3 f8d2 	bl	800028c <__adddf3>
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d0ee:	2c00      	cmp	r4, #0
 800d0f0:	d16a      	bne.n	800d1c8 <_dtoa_r+0x4e0>
 800d0f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0f6:	4b61      	ldr	r3, [pc, #388]	@ (800d27c <_dtoa_r+0x594>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f7f3 f8c5 	bl	8000288 <__aeabi_dsub>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d106:	462a      	mov	r2, r5
 800d108:	4633      	mov	r3, r6
 800d10a:	f7f3 fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800d10e:	2800      	cmp	r0, #0
 800d110:	f040 8298 	bne.w	800d644 <_dtoa_r+0x95c>
 800d114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d118:	462a      	mov	r2, r5
 800d11a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d11e:	f7f3 fcdd 	bl	8000adc <__aeabi_dcmplt>
 800d122:	bb38      	cbnz	r0, 800d174 <_dtoa_r+0x48c>
 800d124:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d128:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d12c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f2c0 8157 	blt.w	800d3e2 <_dtoa_r+0x6fa>
 800d134:	2f0e      	cmp	r7, #14
 800d136:	f300 8154 	bgt.w	800d3e2 <_dtoa_r+0x6fa>
 800d13a:	4b4b      	ldr	r3, [pc, #300]	@ (800d268 <_dtoa_r+0x580>)
 800d13c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d140:	ed93 7b00 	vldr	d7, [r3]
 800d144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d146:	2b00      	cmp	r3, #0
 800d148:	ed8d 7b00 	vstr	d7, [sp]
 800d14c:	f280 80e5 	bge.w	800d31a <_dtoa_r+0x632>
 800d150:	9b03      	ldr	r3, [sp, #12]
 800d152:	2b00      	cmp	r3, #0
 800d154:	f300 80e1 	bgt.w	800d31a <_dtoa_r+0x632>
 800d158:	d10c      	bne.n	800d174 <_dtoa_r+0x48c>
 800d15a:	4b48      	ldr	r3, [pc, #288]	@ (800d27c <_dtoa_r+0x594>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	ec51 0b17 	vmov	r0, r1, d7
 800d162:	f7f3 fa49 	bl	80005f8 <__aeabi_dmul>
 800d166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d16a:	f7f3 fccb 	bl	8000b04 <__aeabi_dcmpge>
 800d16e:	2800      	cmp	r0, #0
 800d170:	f000 8266 	beq.w	800d640 <_dtoa_r+0x958>
 800d174:	2400      	movs	r4, #0
 800d176:	4625      	mov	r5, r4
 800d178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d17a:	4656      	mov	r6, sl
 800d17c:	ea6f 0803 	mvn.w	r8, r3
 800d180:	2700      	movs	r7, #0
 800d182:	4621      	mov	r1, r4
 800d184:	4648      	mov	r0, r9
 800d186:	f000 fcbf 	bl	800db08 <_Bfree>
 800d18a:	2d00      	cmp	r5, #0
 800d18c:	f000 80bd 	beq.w	800d30a <_dtoa_r+0x622>
 800d190:	b12f      	cbz	r7, 800d19e <_dtoa_r+0x4b6>
 800d192:	42af      	cmp	r7, r5
 800d194:	d003      	beq.n	800d19e <_dtoa_r+0x4b6>
 800d196:	4639      	mov	r1, r7
 800d198:	4648      	mov	r0, r9
 800d19a:	f000 fcb5 	bl	800db08 <_Bfree>
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4648      	mov	r0, r9
 800d1a2:	f000 fcb1 	bl	800db08 <_Bfree>
 800d1a6:	e0b0      	b.n	800d30a <_dtoa_r+0x622>
 800d1a8:	07e2      	lsls	r2, r4, #31
 800d1aa:	d505      	bpl.n	800d1b8 <_dtoa_r+0x4d0>
 800d1ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1b0:	f7f3 fa22 	bl	80005f8 <__aeabi_dmul>
 800d1b4:	3601      	adds	r6, #1
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	1064      	asrs	r4, r4, #1
 800d1ba:	3508      	adds	r5, #8
 800d1bc:	e762      	b.n	800d084 <_dtoa_r+0x39c>
 800d1be:	2602      	movs	r6, #2
 800d1c0:	e765      	b.n	800d08e <_dtoa_r+0x3a6>
 800d1c2:	9c03      	ldr	r4, [sp, #12]
 800d1c4:	46b8      	mov	r8, r7
 800d1c6:	e784      	b.n	800d0d2 <_dtoa_r+0x3ea>
 800d1c8:	4b27      	ldr	r3, [pc, #156]	@ (800d268 <_dtoa_r+0x580>)
 800d1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d1d4:	4454      	add	r4, sl
 800d1d6:	2900      	cmp	r1, #0
 800d1d8:	d054      	beq.n	800d284 <_dtoa_r+0x59c>
 800d1da:	4929      	ldr	r1, [pc, #164]	@ (800d280 <_dtoa_r+0x598>)
 800d1dc:	2000      	movs	r0, #0
 800d1de:	f7f3 fb35 	bl	800084c <__aeabi_ddiv>
 800d1e2:	4633      	mov	r3, r6
 800d1e4:	462a      	mov	r2, r5
 800d1e6:	f7f3 f84f 	bl	8000288 <__aeabi_dsub>
 800d1ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1ee:	4656      	mov	r6, sl
 800d1f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1f4:	f7f3 fcb0 	bl	8000b58 <__aeabi_d2iz>
 800d1f8:	4605      	mov	r5, r0
 800d1fa:	f7f3 f993 	bl	8000524 <__aeabi_i2d>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d206:	f7f3 f83f 	bl	8000288 <__aeabi_dsub>
 800d20a:	3530      	adds	r5, #48	@ 0x30
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d214:	f806 5b01 	strb.w	r5, [r6], #1
 800d218:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d21c:	f7f3 fc5e 	bl	8000adc <__aeabi_dcmplt>
 800d220:	2800      	cmp	r0, #0
 800d222:	d172      	bne.n	800d30a <_dtoa_r+0x622>
 800d224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d228:	4911      	ldr	r1, [pc, #68]	@ (800d270 <_dtoa_r+0x588>)
 800d22a:	2000      	movs	r0, #0
 800d22c:	f7f3 f82c 	bl	8000288 <__aeabi_dsub>
 800d230:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d234:	f7f3 fc52 	bl	8000adc <__aeabi_dcmplt>
 800d238:	2800      	cmp	r0, #0
 800d23a:	f040 80b4 	bne.w	800d3a6 <_dtoa_r+0x6be>
 800d23e:	42a6      	cmp	r6, r4
 800d240:	f43f af70 	beq.w	800d124 <_dtoa_r+0x43c>
 800d244:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d248:	4b0a      	ldr	r3, [pc, #40]	@ (800d274 <_dtoa_r+0x58c>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	f7f3 f9d4 	bl	80005f8 <__aeabi_dmul>
 800d250:	4b08      	ldr	r3, [pc, #32]	@ (800d274 <_dtoa_r+0x58c>)
 800d252:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d256:	2200      	movs	r2, #0
 800d258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d25c:	f7f3 f9cc 	bl	80005f8 <__aeabi_dmul>
 800d260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d264:	e7c4      	b.n	800d1f0 <_dtoa_r+0x508>
 800d266:	bf00      	nop
 800d268:	0800f090 	.word	0x0800f090
 800d26c:	0800f068 	.word	0x0800f068
 800d270:	3ff00000 	.word	0x3ff00000
 800d274:	40240000 	.word	0x40240000
 800d278:	401c0000 	.word	0x401c0000
 800d27c:	40140000 	.word	0x40140000
 800d280:	3fe00000 	.word	0x3fe00000
 800d284:	4631      	mov	r1, r6
 800d286:	4628      	mov	r0, r5
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d290:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d292:	4656      	mov	r6, sl
 800d294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d298:	f7f3 fc5e 	bl	8000b58 <__aeabi_d2iz>
 800d29c:	4605      	mov	r5, r0
 800d29e:	f7f3 f941 	bl	8000524 <__aeabi_i2d>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2aa:	f7f2 ffed 	bl	8000288 <__aeabi_dsub>
 800d2ae:	3530      	adds	r5, #48	@ 0x30
 800d2b0:	f806 5b01 	strb.w	r5, [r6], #1
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	42a6      	cmp	r6, r4
 800d2ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d2be:	f04f 0200 	mov.w	r2, #0
 800d2c2:	d124      	bne.n	800d30e <_dtoa_r+0x626>
 800d2c4:	4baf      	ldr	r3, [pc, #700]	@ (800d584 <_dtoa_r+0x89c>)
 800d2c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d2ca:	f7f2 ffdf 	bl	800028c <__adddf3>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2d6:	f7f3 fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d163      	bne.n	800d3a6 <_dtoa_r+0x6be>
 800d2de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d2e2:	49a8      	ldr	r1, [pc, #672]	@ (800d584 <_dtoa_r+0x89c>)
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	f7f2 ffcf 	bl	8000288 <__aeabi_dsub>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2f2:	f7f3 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f43f af14 	beq.w	800d124 <_dtoa_r+0x43c>
 800d2fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d2fe:	1e73      	subs	r3, r6, #1
 800d300:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d302:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d306:	2b30      	cmp	r3, #48	@ 0x30
 800d308:	d0f8      	beq.n	800d2fc <_dtoa_r+0x614>
 800d30a:	4647      	mov	r7, r8
 800d30c:	e03b      	b.n	800d386 <_dtoa_r+0x69e>
 800d30e:	4b9e      	ldr	r3, [pc, #632]	@ (800d588 <_dtoa_r+0x8a0>)
 800d310:	f7f3 f972 	bl	80005f8 <__aeabi_dmul>
 800d314:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d318:	e7bc      	b.n	800d294 <_dtoa_r+0x5ac>
 800d31a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d31e:	4656      	mov	r6, sl
 800d320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d324:	4620      	mov	r0, r4
 800d326:	4629      	mov	r1, r5
 800d328:	f7f3 fa90 	bl	800084c <__aeabi_ddiv>
 800d32c:	f7f3 fc14 	bl	8000b58 <__aeabi_d2iz>
 800d330:	4680      	mov	r8, r0
 800d332:	f7f3 f8f7 	bl	8000524 <__aeabi_i2d>
 800d336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d33a:	f7f3 f95d 	bl	80005f8 <__aeabi_dmul>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4620      	mov	r0, r4
 800d344:	4629      	mov	r1, r5
 800d346:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d34a:	f7f2 ff9d 	bl	8000288 <__aeabi_dsub>
 800d34e:	f806 4b01 	strb.w	r4, [r6], #1
 800d352:	9d03      	ldr	r5, [sp, #12]
 800d354:	eba6 040a 	sub.w	r4, r6, sl
 800d358:	42a5      	cmp	r5, r4
 800d35a:	4602      	mov	r2, r0
 800d35c:	460b      	mov	r3, r1
 800d35e:	d133      	bne.n	800d3c8 <_dtoa_r+0x6e0>
 800d360:	f7f2 ff94 	bl	800028c <__adddf3>
 800d364:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	f7f3 fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 800d370:	b9c0      	cbnz	r0, 800d3a4 <_dtoa_r+0x6bc>
 800d372:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d376:	4620      	mov	r0, r4
 800d378:	4629      	mov	r1, r5
 800d37a:	f7f3 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d37e:	b110      	cbz	r0, 800d386 <_dtoa_r+0x69e>
 800d380:	f018 0f01 	tst.w	r8, #1
 800d384:	d10e      	bne.n	800d3a4 <_dtoa_r+0x6bc>
 800d386:	9902      	ldr	r1, [sp, #8]
 800d388:	4648      	mov	r0, r9
 800d38a:	f000 fbbd 	bl	800db08 <_Bfree>
 800d38e:	2300      	movs	r3, #0
 800d390:	7033      	strb	r3, [r6, #0]
 800d392:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d394:	3701      	adds	r7, #1
 800d396:	601f      	str	r7, [r3, #0]
 800d398:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 824b 	beq.w	800d836 <_dtoa_r+0xb4e>
 800d3a0:	601e      	str	r6, [r3, #0]
 800d3a2:	e248      	b.n	800d836 <_dtoa_r+0xb4e>
 800d3a4:	46b8      	mov	r8, r7
 800d3a6:	4633      	mov	r3, r6
 800d3a8:	461e      	mov	r6, r3
 800d3aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3ae:	2a39      	cmp	r2, #57	@ 0x39
 800d3b0:	d106      	bne.n	800d3c0 <_dtoa_r+0x6d8>
 800d3b2:	459a      	cmp	sl, r3
 800d3b4:	d1f8      	bne.n	800d3a8 <_dtoa_r+0x6c0>
 800d3b6:	2230      	movs	r2, #48	@ 0x30
 800d3b8:	f108 0801 	add.w	r8, r8, #1
 800d3bc:	f88a 2000 	strb.w	r2, [sl]
 800d3c0:	781a      	ldrb	r2, [r3, #0]
 800d3c2:	3201      	adds	r2, #1
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	e7a0      	b.n	800d30a <_dtoa_r+0x622>
 800d3c8:	4b6f      	ldr	r3, [pc, #444]	@ (800d588 <_dtoa_r+0x8a0>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f7f3 f914 	bl	80005f8 <__aeabi_dmul>
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	460d      	mov	r5, r1
 800d3d8:	f7f3 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d09f      	beq.n	800d320 <_dtoa_r+0x638>
 800d3e0:	e7d1      	b.n	800d386 <_dtoa_r+0x69e>
 800d3e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3e4:	2a00      	cmp	r2, #0
 800d3e6:	f000 80ea 	beq.w	800d5be <_dtoa_r+0x8d6>
 800d3ea:	9a07      	ldr	r2, [sp, #28]
 800d3ec:	2a01      	cmp	r2, #1
 800d3ee:	f300 80cd 	bgt.w	800d58c <_dtoa_r+0x8a4>
 800d3f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	f000 80c1 	beq.w	800d57c <_dtoa_r+0x894>
 800d3fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d3fe:	9c08      	ldr	r4, [sp, #32]
 800d400:	9e00      	ldr	r6, [sp, #0]
 800d402:	9a00      	ldr	r2, [sp, #0]
 800d404:	441a      	add	r2, r3
 800d406:	9200      	str	r2, [sp, #0]
 800d408:	9a06      	ldr	r2, [sp, #24]
 800d40a:	2101      	movs	r1, #1
 800d40c:	441a      	add	r2, r3
 800d40e:	4648      	mov	r0, r9
 800d410:	9206      	str	r2, [sp, #24]
 800d412:	f000 fc2d 	bl	800dc70 <__i2b>
 800d416:	4605      	mov	r5, r0
 800d418:	b166      	cbz	r6, 800d434 <_dtoa_r+0x74c>
 800d41a:	9b06      	ldr	r3, [sp, #24]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	dd09      	ble.n	800d434 <_dtoa_r+0x74c>
 800d420:	42b3      	cmp	r3, r6
 800d422:	9a00      	ldr	r2, [sp, #0]
 800d424:	bfa8      	it	ge
 800d426:	4633      	movge	r3, r6
 800d428:	1ad2      	subs	r2, r2, r3
 800d42a:	9200      	str	r2, [sp, #0]
 800d42c:	9a06      	ldr	r2, [sp, #24]
 800d42e:	1af6      	subs	r6, r6, r3
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	9306      	str	r3, [sp, #24]
 800d434:	9b08      	ldr	r3, [sp, #32]
 800d436:	b30b      	cbz	r3, 800d47c <_dtoa_r+0x794>
 800d438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f000 80c6 	beq.w	800d5cc <_dtoa_r+0x8e4>
 800d440:	2c00      	cmp	r4, #0
 800d442:	f000 80c0 	beq.w	800d5c6 <_dtoa_r+0x8de>
 800d446:	4629      	mov	r1, r5
 800d448:	4622      	mov	r2, r4
 800d44a:	4648      	mov	r0, r9
 800d44c:	f000 fcc8 	bl	800dde0 <__pow5mult>
 800d450:	9a02      	ldr	r2, [sp, #8]
 800d452:	4601      	mov	r1, r0
 800d454:	4605      	mov	r5, r0
 800d456:	4648      	mov	r0, r9
 800d458:	f000 fc20 	bl	800dc9c <__multiply>
 800d45c:	9902      	ldr	r1, [sp, #8]
 800d45e:	4680      	mov	r8, r0
 800d460:	4648      	mov	r0, r9
 800d462:	f000 fb51 	bl	800db08 <_Bfree>
 800d466:	9b08      	ldr	r3, [sp, #32]
 800d468:	1b1b      	subs	r3, r3, r4
 800d46a:	9308      	str	r3, [sp, #32]
 800d46c:	f000 80b1 	beq.w	800d5d2 <_dtoa_r+0x8ea>
 800d470:	9a08      	ldr	r2, [sp, #32]
 800d472:	4641      	mov	r1, r8
 800d474:	4648      	mov	r0, r9
 800d476:	f000 fcb3 	bl	800dde0 <__pow5mult>
 800d47a:	9002      	str	r0, [sp, #8]
 800d47c:	2101      	movs	r1, #1
 800d47e:	4648      	mov	r0, r9
 800d480:	f000 fbf6 	bl	800dc70 <__i2b>
 800d484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d486:	4604      	mov	r4, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 81d8 	beq.w	800d83e <_dtoa_r+0xb56>
 800d48e:	461a      	mov	r2, r3
 800d490:	4601      	mov	r1, r0
 800d492:	4648      	mov	r0, r9
 800d494:	f000 fca4 	bl	800dde0 <__pow5mult>
 800d498:	9b07      	ldr	r3, [sp, #28]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	4604      	mov	r4, r0
 800d49e:	f300 809f 	bgt.w	800d5e0 <_dtoa_r+0x8f8>
 800d4a2:	9b04      	ldr	r3, [sp, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f040 8097 	bne.w	800d5d8 <_dtoa_r+0x8f0>
 800d4aa:	9b05      	ldr	r3, [sp, #20]
 800d4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f040 8093 	bne.w	800d5dc <_dtoa_r+0x8f4>
 800d4b6:	9b05      	ldr	r3, [sp, #20]
 800d4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d4bc:	0d1b      	lsrs	r3, r3, #20
 800d4be:	051b      	lsls	r3, r3, #20
 800d4c0:	b133      	cbz	r3, 800d4d0 <_dtoa_r+0x7e8>
 800d4c2:	9b00      	ldr	r3, [sp, #0]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	9b06      	ldr	r3, [sp, #24]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	9306      	str	r3, [sp, #24]
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	9308      	str	r3, [sp, #32]
 800d4d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 81b8 	beq.w	800d84a <_dtoa_r+0xb62>
 800d4da:	6923      	ldr	r3, [r4, #16]
 800d4dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4e0:	6918      	ldr	r0, [r3, #16]
 800d4e2:	f000 fb79 	bl	800dbd8 <__hi0bits>
 800d4e6:	f1c0 0020 	rsb	r0, r0, #32
 800d4ea:	9b06      	ldr	r3, [sp, #24]
 800d4ec:	4418      	add	r0, r3
 800d4ee:	f010 001f 	ands.w	r0, r0, #31
 800d4f2:	f000 8082 	beq.w	800d5fa <_dtoa_r+0x912>
 800d4f6:	f1c0 0320 	rsb	r3, r0, #32
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	dd73      	ble.n	800d5e6 <_dtoa_r+0x8fe>
 800d4fe:	9b00      	ldr	r3, [sp, #0]
 800d500:	f1c0 001c 	rsb	r0, r0, #28
 800d504:	4403      	add	r3, r0
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	9b06      	ldr	r3, [sp, #24]
 800d50a:	4403      	add	r3, r0
 800d50c:	4406      	add	r6, r0
 800d50e:	9306      	str	r3, [sp, #24]
 800d510:	9b00      	ldr	r3, [sp, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	dd05      	ble.n	800d522 <_dtoa_r+0x83a>
 800d516:	9902      	ldr	r1, [sp, #8]
 800d518:	461a      	mov	r2, r3
 800d51a:	4648      	mov	r0, r9
 800d51c:	f000 fcba 	bl	800de94 <__lshift>
 800d520:	9002      	str	r0, [sp, #8]
 800d522:	9b06      	ldr	r3, [sp, #24]
 800d524:	2b00      	cmp	r3, #0
 800d526:	dd05      	ble.n	800d534 <_dtoa_r+0x84c>
 800d528:	4621      	mov	r1, r4
 800d52a:	461a      	mov	r2, r3
 800d52c:	4648      	mov	r0, r9
 800d52e:	f000 fcb1 	bl	800de94 <__lshift>
 800d532:	4604      	mov	r4, r0
 800d534:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d536:	2b00      	cmp	r3, #0
 800d538:	d061      	beq.n	800d5fe <_dtoa_r+0x916>
 800d53a:	9802      	ldr	r0, [sp, #8]
 800d53c:	4621      	mov	r1, r4
 800d53e:	f000 fd15 	bl	800df6c <__mcmp>
 800d542:	2800      	cmp	r0, #0
 800d544:	da5b      	bge.n	800d5fe <_dtoa_r+0x916>
 800d546:	2300      	movs	r3, #0
 800d548:	9902      	ldr	r1, [sp, #8]
 800d54a:	220a      	movs	r2, #10
 800d54c:	4648      	mov	r0, r9
 800d54e:	f000 fafd 	bl	800db4c <__multadd>
 800d552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d554:	9002      	str	r0, [sp, #8]
 800d556:	f107 38ff 	add.w	r8, r7, #4294967295
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 8177 	beq.w	800d84e <_dtoa_r+0xb66>
 800d560:	4629      	mov	r1, r5
 800d562:	2300      	movs	r3, #0
 800d564:	220a      	movs	r2, #10
 800d566:	4648      	mov	r0, r9
 800d568:	f000 faf0 	bl	800db4c <__multadd>
 800d56c:	f1bb 0f00 	cmp.w	fp, #0
 800d570:	4605      	mov	r5, r0
 800d572:	dc6f      	bgt.n	800d654 <_dtoa_r+0x96c>
 800d574:	9b07      	ldr	r3, [sp, #28]
 800d576:	2b02      	cmp	r3, #2
 800d578:	dc49      	bgt.n	800d60e <_dtoa_r+0x926>
 800d57a:	e06b      	b.n	800d654 <_dtoa_r+0x96c>
 800d57c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d57e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d582:	e73c      	b.n	800d3fe <_dtoa_r+0x716>
 800d584:	3fe00000 	.word	0x3fe00000
 800d588:	40240000 	.word	0x40240000
 800d58c:	9b03      	ldr	r3, [sp, #12]
 800d58e:	1e5c      	subs	r4, r3, #1
 800d590:	9b08      	ldr	r3, [sp, #32]
 800d592:	42a3      	cmp	r3, r4
 800d594:	db09      	blt.n	800d5aa <_dtoa_r+0x8c2>
 800d596:	1b1c      	subs	r4, r3, r4
 800d598:	9b03      	ldr	r3, [sp, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f6bf af30 	bge.w	800d400 <_dtoa_r+0x718>
 800d5a0:	9b00      	ldr	r3, [sp, #0]
 800d5a2:	9a03      	ldr	r2, [sp, #12]
 800d5a4:	1a9e      	subs	r6, r3, r2
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e72b      	b.n	800d402 <_dtoa_r+0x71a>
 800d5aa:	9b08      	ldr	r3, [sp, #32]
 800d5ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5ae:	9408      	str	r4, [sp, #32]
 800d5b0:	1ae3      	subs	r3, r4, r3
 800d5b2:	441a      	add	r2, r3
 800d5b4:	9e00      	ldr	r6, [sp, #0]
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800d5ba:	2400      	movs	r4, #0
 800d5bc:	e721      	b.n	800d402 <_dtoa_r+0x71a>
 800d5be:	9c08      	ldr	r4, [sp, #32]
 800d5c0:	9e00      	ldr	r6, [sp, #0]
 800d5c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d5c4:	e728      	b.n	800d418 <_dtoa_r+0x730>
 800d5c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d5ca:	e751      	b.n	800d470 <_dtoa_r+0x788>
 800d5cc:	9a08      	ldr	r2, [sp, #32]
 800d5ce:	9902      	ldr	r1, [sp, #8]
 800d5d0:	e750      	b.n	800d474 <_dtoa_r+0x78c>
 800d5d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800d5d6:	e751      	b.n	800d47c <_dtoa_r+0x794>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	e779      	b.n	800d4d0 <_dtoa_r+0x7e8>
 800d5dc:	9b04      	ldr	r3, [sp, #16]
 800d5de:	e777      	b.n	800d4d0 <_dtoa_r+0x7e8>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9308      	str	r3, [sp, #32]
 800d5e4:	e779      	b.n	800d4da <_dtoa_r+0x7f2>
 800d5e6:	d093      	beq.n	800d510 <_dtoa_r+0x828>
 800d5e8:	9a00      	ldr	r2, [sp, #0]
 800d5ea:	331c      	adds	r3, #28
 800d5ec:	441a      	add	r2, r3
 800d5ee:	9200      	str	r2, [sp, #0]
 800d5f0:	9a06      	ldr	r2, [sp, #24]
 800d5f2:	441a      	add	r2, r3
 800d5f4:	441e      	add	r6, r3
 800d5f6:	9206      	str	r2, [sp, #24]
 800d5f8:	e78a      	b.n	800d510 <_dtoa_r+0x828>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	e7f4      	b.n	800d5e8 <_dtoa_r+0x900>
 800d5fe:	9b03      	ldr	r3, [sp, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	46b8      	mov	r8, r7
 800d604:	dc20      	bgt.n	800d648 <_dtoa_r+0x960>
 800d606:	469b      	mov	fp, r3
 800d608:	9b07      	ldr	r3, [sp, #28]
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	dd1e      	ble.n	800d64c <_dtoa_r+0x964>
 800d60e:	f1bb 0f00 	cmp.w	fp, #0
 800d612:	f47f adb1 	bne.w	800d178 <_dtoa_r+0x490>
 800d616:	4621      	mov	r1, r4
 800d618:	465b      	mov	r3, fp
 800d61a:	2205      	movs	r2, #5
 800d61c:	4648      	mov	r0, r9
 800d61e:	f000 fa95 	bl	800db4c <__multadd>
 800d622:	4601      	mov	r1, r0
 800d624:	4604      	mov	r4, r0
 800d626:	9802      	ldr	r0, [sp, #8]
 800d628:	f000 fca0 	bl	800df6c <__mcmp>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	f77f ada3 	ble.w	800d178 <_dtoa_r+0x490>
 800d632:	4656      	mov	r6, sl
 800d634:	2331      	movs	r3, #49	@ 0x31
 800d636:	f806 3b01 	strb.w	r3, [r6], #1
 800d63a:	f108 0801 	add.w	r8, r8, #1
 800d63e:	e59f      	b.n	800d180 <_dtoa_r+0x498>
 800d640:	9c03      	ldr	r4, [sp, #12]
 800d642:	46b8      	mov	r8, r7
 800d644:	4625      	mov	r5, r4
 800d646:	e7f4      	b.n	800d632 <_dtoa_r+0x94a>
 800d648:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 8101 	beq.w	800d856 <_dtoa_r+0xb6e>
 800d654:	2e00      	cmp	r6, #0
 800d656:	dd05      	ble.n	800d664 <_dtoa_r+0x97c>
 800d658:	4629      	mov	r1, r5
 800d65a:	4632      	mov	r2, r6
 800d65c:	4648      	mov	r0, r9
 800d65e:	f000 fc19 	bl	800de94 <__lshift>
 800d662:	4605      	mov	r5, r0
 800d664:	9b08      	ldr	r3, [sp, #32]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d05c      	beq.n	800d724 <_dtoa_r+0xa3c>
 800d66a:	6869      	ldr	r1, [r5, #4]
 800d66c:	4648      	mov	r0, r9
 800d66e:	f000 fa0b 	bl	800da88 <_Balloc>
 800d672:	4606      	mov	r6, r0
 800d674:	b928      	cbnz	r0, 800d682 <_dtoa_r+0x99a>
 800d676:	4b82      	ldr	r3, [pc, #520]	@ (800d880 <_dtoa_r+0xb98>)
 800d678:	4602      	mov	r2, r0
 800d67a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d67e:	f7ff bb4a 	b.w	800cd16 <_dtoa_r+0x2e>
 800d682:	692a      	ldr	r2, [r5, #16]
 800d684:	3202      	adds	r2, #2
 800d686:	0092      	lsls	r2, r2, #2
 800d688:	f105 010c 	add.w	r1, r5, #12
 800d68c:	300c      	adds	r0, #12
 800d68e:	f7ff fa94 	bl	800cbba <memcpy>
 800d692:	2201      	movs	r2, #1
 800d694:	4631      	mov	r1, r6
 800d696:	4648      	mov	r0, r9
 800d698:	f000 fbfc 	bl	800de94 <__lshift>
 800d69c:	f10a 0301 	add.w	r3, sl, #1
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	eb0a 030b 	add.w	r3, sl, fp
 800d6a6:	9308      	str	r3, [sp, #32]
 800d6a8:	9b04      	ldr	r3, [sp, #16]
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	462f      	mov	r7, r5
 800d6b0:	9306      	str	r3, [sp, #24]
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	9b00      	ldr	r3, [sp, #0]
 800d6b6:	9802      	ldr	r0, [sp, #8]
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800d6be:	f7ff fa8a 	bl	800cbd6 <quorem>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	3330      	adds	r3, #48	@ 0x30
 800d6c6:	9003      	str	r0, [sp, #12]
 800d6c8:	4639      	mov	r1, r7
 800d6ca:	9802      	ldr	r0, [sp, #8]
 800d6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ce:	f000 fc4d 	bl	800df6c <__mcmp>
 800d6d2:	462a      	mov	r2, r5
 800d6d4:	9004      	str	r0, [sp, #16]
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	4648      	mov	r0, r9
 800d6da:	f000 fc63 	bl	800dfa4 <__mdiff>
 800d6de:	68c2      	ldr	r2, [r0, #12]
 800d6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	bb02      	cbnz	r2, 800d728 <_dtoa_r+0xa40>
 800d6e6:	4601      	mov	r1, r0
 800d6e8:	9802      	ldr	r0, [sp, #8]
 800d6ea:	f000 fc3f 	bl	800df6c <__mcmp>
 800d6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	4648      	mov	r0, r9
 800d6f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6fa:	f000 fa05 	bl	800db08 <_Bfree>
 800d6fe:	9b07      	ldr	r3, [sp, #28]
 800d700:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d702:	9e00      	ldr	r6, [sp, #0]
 800d704:	ea42 0103 	orr.w	r1, r2, r3
 800d708:	9b06      	ldr	r3, [sp, #24]
 800d70a:	4319      	orrs	r1, r3
 800d70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d70e:	d10d      	bne.n	800d72c <_dtoa_r+0xa44>
 800d710:	2b39      	cmp	r3, #57	@ 0x39
 800d712:	d027      	beq.n	800d764 <_dtoa_r+0xa7c>
 800d714:	9a04      	ldr	r2, [sp, #16]
 800d716:	2a00      	cmp	r2, #0
 800d718:	dd01      	ble.n	800d71e <_dtoa_r+0xa36>
 800d71a:	9b03      	ldr	r3, [sp, #12]
 800d71c:	3331      	adds	r3, #49	@ 0x31
 800d71e:	f88b 3000 	strb.w	r3, [fp]
 800d722:	e52e      	b.n	800d182 <_dtoa_r+0x49a>
 800d724:	4628      	mov	r0, r5
 800d726:	e7b9      	b.n	800d69c <_dtoa_r+0x9b4>
 800d728:	2201      	movs	r2, #1
 800d72a:	e7e2      	b.n	800d6f2 <_dtoa_r+0xa0a>
 800d72c:	9904      	ldr	r1, [sp, #16]
 800d72e:	2900      	cmp	r1, #0
 800d730:	db04      	blt.n	800d73c <_dtoa_r+0xa54>
 800d732:	9807      	ldr	r0, [sp, #28]
 800d734:	4301      	orrs	r1, r0
 800d736:	9806      	ldr	r0, [sp, #24]
 800d738:	4301      	orrs	r1, r0
 800d73a:	d120      	bne.n	800d77e <_dtoa_r+0xa96>
 800d73c:	2a00      	cmp	r2, #0
 800d73e:	ddee      	ble.n	800d71e <_dtoa_r+0xa36>
 800d740:	9902      	ldr	r1, [sp, #8]
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	2201      	movs	r2, #1
 800d746:	4648      	mov	r0, r9
 800d748:	f000 fba4 	bl	800de94 <__lshift>
 800d74c:	4621      	mov	r1, r4
 800d74e:	9002      	str	r0, [sp, #8]
 800d750:	f000 fc0c 	bl	800df6c <__mcmp>
 800d754:	2800      	cmp	r0, #0
 800d756:	9b00      	ldr	r3, [sp, #0]
 800d758:	dc02      	bgt.n	800d760 <_dtoa_r+0xa78>
 800d75a:	d1e0      	bne.n	800d71e <_dtoa_r+0xa36>
 800d75c:	07da      	lsls	r2, r3, #31
 800d75e:	d5de      	bpl.n	800d71e <_dtoa_r+0xa36>
 800d760:	2b39      	cmp	r3, #57	@ 0x39
 800d762:	d1da      	bne.n	800d71a <_dtoa_r+0xa32>
 800d764:	2339      	movs	r3, #57	@ 0x39
 800d766:	f88b 3000 	strb.w	r3, [fp]
 800d76a:	4633      	mov	r3, r6
 800d76c:	461e      	mov	r6, r3
 800d76e:	3b01      	subs	r3, #1
 800d770:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d774:	2a39      	cmp	r2, #57	@ 0x39
 800d776:	d04e      	beq.n	800d816 <_dtoa_r+0xb2e>
 800d778:	3201      	adds	r2, #1
 800d77a:	701a      	strb	r2, [r3, #0]
 800d77c:	e501      	b.n	800d182 <_dtoa_r+0x49a>
 800d77e:	2a00      	cmp	r2, #0
 800d780:	dd03      	ble.n	800d78a <_dtoa_r+0xaa2>
 800d782:	2b39      	cmp	r3, #57	@ 0x39
 800d784:	d0ee      	beq.n	800d764 <_dtoa_r+0xa7c>
 800d786:	3301      	adds	r3, #1
 800d788:	e7c9      	b.n	800d71e <_dtoa_r+0xa36>
 800d78a:	9a00      	ldr	r2, [sp, #0]
 800d78c:	9908      	ldr	r1, [sp, #32]
 800d78e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d792:	428a      	cmp	r2, r1
 800d794:	d028      	beq.n	800d7e8 <_dtoa_r+0xb00>
 800d796:	9902      	ldr	r1, [sp, #8]
 800d798:	2300      	movs	r3, #0
 800d79a:	220a      	movs	r2, #10
 800d79c:	4648      	mov	r0, r9
 800d79e:	f000 f9d5 	bl	800db4c <__multadd>
 800d7a2:	42af      	cmp	r7, r5
 800d7a4:	9002      	str	r0, [sp, #8]
 800d7a6:	f04f 0300 	mov.w	r3, #0
 800d7aa:	f04f 020a 	mov.w	r2, #10
 800d7ae:	4639      	mov	r1, r7
 800d7b0:	4648      	mov	r0, r9
 800d7b2:	d107      	bne.n	800d7c4 <_dtoa_r+0xadc>
 800d7b4:	f000 f9ca 	bl	800db4c <__multadd>
 800d7b8:	4607      	mov	r7, r0
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	9b00      	ldr	r3, [sp, #0]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	e777      	b.n	800d6b4 <_dtoa_r+0x9cc>
 800d7c4:	f000 f9c2 	bl	800db4c <__multadd>
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	4607      	mov	r7, r0
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	220a      	movs	r2, #10
 800d7d0:	4648      	mov	r0, r9
 800d7d2:	f000 f9bb 	bl	800db4c <__multadd>
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	e7f0      	b.n	800d7bc <_dtoa_r+0xad4>
 800d7da:	f1bb 0f00 	cmp.w	fp, #0
 800d7de:	bfcc      	ite	gt
 800d7e0:	465e      	movgt	r6, fp
 800d7e2:	2601      	movle	r6, #1
 800d7e4:	4456      	add	r6, sl
 800d7e6:	2700      	movs	r7, #0
 800d7e8:	9902      	ldr	r1, [sp, #8]
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	4648      	mov	r0, r9
 800d7f0:	f000 fb50 	bl	800de94 <__lshift>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	9002      	str	r0, [sp, #8]
 800d7f8:	f000 fbb8 	bl	800df6c <__mcmp>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	dcb4      	bgt.n	800d76a <_dtoa_r+0xa82>
 800d800:	d102      	bne.n	800d808 <_dtoa_r+0xb20>
 800d802:	9b00      	ldr	r3, [sp, #0]
 800d804:	07db      	lsls	r3, r3, #31
 800d806:	d4b0      	bmi.n	800d76a <_dtoa_r+0xa82>
 800d808:	4633      	mov	r3, r6
 800d80a:	461e      	mov	r6, r3
 800d80c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d810:	2a30      	cmp	r2, #48	@ 0x30
 800d812:	d0fa      	beq.n	800d80a <_dtoa_r+0xb22>
 800d814:	e4b5      	b.n	800d182 <_dtoa_r+0x49a>
 800d816:	459a      	cmp	sl, r3
 800d818:	d1a8      	bne.n	800d76c <_dtoa_r+0xa84>
 800d81a:	2331      	movs	r3, #49	@ 0x31
 800d81c:	f108 0801 	add.w	r8, r8, #1
 800d820:	f88a 3000 	strb.w	r3, [sl]
 800d824:	e4ad      	b.n	800d182 <_dtoa_r+0x49a>
 800d826:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d828:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d884 <_dtoa_r+0xb9c>
 800d82c:	b11b      	cbz	r3, 800d836 <_dtoa_r+0xb4e>
 800d82e:	f10a 0308 	add.w	r3, sl, #8
 800d832:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	4650      	mov	r0, sl
 800d838:	b017      	add	sp, #92	@ 0x5c
 800d83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d83e:	9b07      	ldr	r3, [sp, #28]
 800d840:	2b01      	cmp	r3, #1
 800d842:	f77f ae2e 	ble.w	800d4a2 <_dtoa_r+0x7ba>
 800d846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d848:	9308      	str	r3, [sp, #32]
 800d84a:	2001      	movs	r0, #1
 800d84c:	e64d      	b.n	800d4ea <_dtoa_r+0x802>
 800d84e:	f1bb 0f00 	cmp.w	fp, #0
 800d852:	f77f aed9 	ble.w	800d608 <_dtoa_r+0x920>
 800d856:	4656      	mov	r6, sl
 800d858:	9802      	ldr	r0, [sp, #8]
 800d85a:	4621      	mov	r1, r4
 800d85c:	f7ff f9bb 	bl	800cbd6 <quorem>
 800d860:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d864:	f806 3b01 	strb.w	r3, [r6], #1
 800d868:	eba6 020a 	sub.w	r2, r6, sl
 800d86c:	4593      	cmp	fp, r2
 800d86e:	ddb4      	ble.n	800d7da <_dtoa_r+0xaf2>
 800d870:	9902      	ldr	r1, [sp, #8]
 800d872:	2300      	movs	r3, #0
 800d874:	220a      	movs	r2, #10
 800d876:	4648      	mov	r0, r9
 800d878:	f000 f968 	bl	800db4c <__multadd>
 800d87c:	9002      	str	r0, [sp, #8]
 800d87e:	e7eb      	b.n	800d858 <_dtoa_r+0xb70>
 800d880:	0800ef94 	.word	0x0800ef94
 800d884:	0800ef18 	.word	0x0800ef18

0800d888 <_free_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	4605      	mov	r5, r0
 800d88c:	2900      	cmp	r1, #0
 800d88e:	d041      	beq.n	800d914 <_free_r+0x8c>
 800d890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d894:	1f0c      	subs	r4, r1, #4
 800d896:	2b00      	cmp	r3, #0
 800d898:	bfb8      	it	lt
 800d89a:	18e4      	addlt	r4, r4, r3
 800d89c:	f000 f8e8 	bl	800da70 <__malloc_lock>
 800d8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d918 <_free_r+0x90>)
 800d8a2:	6813      	ldr	r3, [r2, #0]
 800d8a4:	b933      	cbnz	r3, 800d8b4 <_free_r+0x2c>
 800d8a6:	6063      	str	r3, [r4, #4]
 800d8a8:	6014      	str	r4, [r2, #0]
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8b0:	f000 b8e4 	b.w	800da7c <__malloc_unlock>
 800d8b4:	42a3      	cmp	r3, r4
 800d8b6:	d908      	bls.n	800d8ca <_free_r+0x42>
 800d8b8:	6820      	ldr	r0, [r4, #0]
 800d8ba:	1821      	adds	r1, r4, r0
 800d8bc:	428b      	cmp	r3, r1
 800d8be:	bf01      	itttt	eq
 800d8c0:	6819      	ldreq	r1, [r3, #0]
 800d8c2:	685b      	ldreq	r3, [r3, #4]
 800d8c4:	1809      	addeq	r1, r1, r0
 800d8c6:	6021      	streq	r1, [r4, #0]
 800d8c8:	e7ed      	b.n	800d8a6 <_free_r+0x1e>
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	b10b      	cbz	r3, 800d8d4 <_free_r+0x4c>
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	d9fa      	bls.n	800d8ca <_free_r+0x42>
 800d8d4:	6811      	ldr	r1, [r2, #0]
 800d8d6:	1850      	adds	r0, r2, r1
 800d8d8:	42a0      	cmp	r0, r4
 800d8da:	d10b      	bne.n	800d8f4 <_free_r+0x6c>
 800d8dc:	6820      	ldr	r0, [r4, #0]
 800d8de:	4401      	add	r1, r0
 800d8e0:	1850      	adds	r0, r2, r1
 800d8e2:	4283      	cmp	r3, r0
 800d8e4:	6011      	str	r1, [r2, #0]
 800d8e6:	d1e0      	bne.n	800d8aa <_free_r+0x22>
 800d8e8:	6818      	ldr	r0, [r3, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	6053      	str	r3, [r2, #4]
 800d8ee:	4408      	add	r0, r1
 800d8f0:	6010      	str	r0, [r2, #0]
 800d8f2:	e7da      	b.n	800d8aa <_free_r+0x22>
 800d8f4:	d902      	bls.n	800d8fc <_free_r+0x74>
 800d8f6:	230c      	movs	r3, #12
 800d8f8:	602b      	str	r3, [r5, #0]
 800d8fa:	e7d6      	b.n	800d8aa <_free_r+0x22>
 800d8fc:	6820      	ldr	r0, [r4, #0]
 800d8fe:	1821      	adds	r1, r4, r0
 800d900:	428b      	cmp	r3, r1
 800d902:	bf04      	itt	eq
 800d904:	6819      	ldreq	r1, [r3, #0]
 800d906:	685b      	ldreq	r3, [r3, #4]
 800d908:	6063      	str	r3, [r4, #4]
 800d90a:	bf04      	itt	eq
 800d90c:	1809      	addeq	r1, r1, r0
 800d90e:	6021      	streq	r1, [r4, #0]
 800d910:	6054      	str	r4, [r2, #4]
 800d912:	e7ca      	b.n	800d8aa <_free_r+0x22>
 800d914:	bd38      	pop	{r3, r4, r5, pc}
 800d916:	bf00      	nop
 800d918:	2000354c 	.word	0x2000354c

0800d91c <malloc>:
 800d91c:	4b02      	ldr	r3, [pc, #8]	@ (800d928 <malloc+0xc>)
 800d91e:	4601      	mov	r1, r0
 800d920:	6818      	ldr	r0, [r3, #0]
 800d922:	f000 b825 	b.w	800d970 <_malloc_r>
 800d926:	bf00      	nop
 800d928:	2000001c 	.word	0x2000001c

0800d92c <sbrk_aligned>:
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	4e0f      	ldr	r6, [pc, #60]	@ (800d96c <sbrk_aligned+0x40>)
 800d930:	460c      	mov	r4, r1
 800d932:	6831      	ldr	r1, [r6, #0]
 800d934:	4605      	mov	r5, r0
 800d936:	b911      	cbnz	r1, 800d93e <sbrk_aligned+0x12>
 800d938:	f001 f814 	bl	800e964 <_sbrk_r>
 800d93c:	6030      	str	r0, [r6, #0]
 800d93e:	4621      	mov	r1, r4
 800d940:	4628      	mov	r0, r5
 800d942:	f001 f80f 	bl	800e964 <_sbrk_r>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d103      	bne.n	800d952 <sbrk_aligned+0x26>
 800d94a:	f04f 34ff 	mov.w	r4, #4294967295
 800d94e:	4620      	mov	r0, r4
 800d950:	bd70      	pop	{r4, r5, r6, pc}
 800d952:	1cc4      	adds	r4, r0, #3
 800d954:	f024 0403 	bic.w	r4, r4, #3
 800d958:	42a0      	cmp	r0, r4
 800d95a:	d0f8      	beq.n	800d94e <sbrk_aligned+0x22>
 800d95c:	1a21      	subs	r1, r4, r0
 800d95e:	4628      	mov	r0, r5
 800d960:	f001 f800 	bl	800e964 <_sbrk_r>
 800d964:	3001      	adds	r0, #1
 800d966:	d1f2      	bne.n	800d94e <sbrk_aligned+0x22>
 800d968:	e7ef      	b.n	800d94a <sbrk_aligned+0x1e>
 800d96a:	bf00      	nop
 800d96c:	20003548 	.word	0x20003548

0800d970 <_malloc_r>:
 800d970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d974:	1ccd      	adds	r5, r1, #3
 800d976:	f025 0503 	bic.w	r5, r5, #3
 800d97a:	3508      	adds	r5, #8
 800d97c:	2d0c      	cmp	r5, #12
 800d97e:	bf38      	it	cc
 800d980:	250c      	movcc	r5, #12
 800d982:	2d00      	cmp	r5, #0
 800d984:	4606      	mov	r6, r0
 800d986:	db01      	blt.n	800d98c <_malloc_r+0x1c>
 800d988:	42a9      	cmp	r1, r5
 800d98a:	d904      	bls.n	800d996 <_malloc_r+0x26>
 800d98c:	230c      	movs	r3, #12
 800d98e:	6033      	str	r3, [r6, #0]
 800d990:	2000      	movs	r0, #0
 800d992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da6c <_malloc_r+0xfc>
 800d99a:	f000 f869 	bl	800da70 <__malloc_lock>
 800d99e:	f8d8 3000 	ldr.w	r3, [r8]
 800d9a2:	461c      	mov	r4, r3
 800d9a4:	bb44      	cbnz	r4, 800d9f8 <_malloc_r+0x88>
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7ff ffbf 	bl	800d92c <sbrk_aligned>
 800d9ae:	1c43      	adds	r3, r0, #1
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	d158      	bne.n	800da66 <_malloc_r+0xf6>
 800d9b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d9b8:	4627      	mov	r7, r4
 800d9ba:	2f00      	cmp	r7, #0
 800d9bc:	d143      	bne.n	800da46 <_malloc_r+0xd6>
 800d9be:	2c00      	cmp	r4, #0
 800d9c0:	d04b      	beq.n	800da5a <_malloc_r+0xea>
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	eb04 0903 	add.w	r9, r4, r3
 800d9cc:	f000 ffca 	bl	800e964 <_sbrk_r>
 800d9d0:	4581      	cmp	r9, r0
 800d9d2:	d142      	bne.n	800da5a <_malloc_r+0xea>
 800d9d4:	6821      	ldr	r1, [r4, #0]
 800d9d6:	1a6d      	subs	r5, r5, r1
 800d9d8:	4629      	mov	r1, r5
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff ffa6 	bl	800d92c <sbrk_aligned>
 800d9e0:	3001      	adds	r0, #1
 800d9e2:	d03a      	beq.n	800da5a <_malloc_r+0xea>
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	442b      	add	r3, r5
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	bb62      	cbnz	r2, 800da4c <_malloc_r+0xdc>
 800d9f2:	f8c8 7000 	str.w	r7, [r8]
 800d9f6:	e00f      	b.n	800da18 <_malloc_r+0xa8>
 800d9f8:	6822      	ldr	r2, [r4, #0]
 800d9fa:	1b52      	subs	r2, r2, r5
 800d9fc:	d420      	bmi.n	800da40 <_malloc_r+0xd0>
 800d9fe:	2a0b      	cmp	r2, #11
 800da00:	d917      	bls.n	800da32 <_malloc_r+0xc2>
 800da02:	1961      	adds	r1, r4, r5
 800da04:	42a3      	cmp	r3, r4
 800da06:	6025      	str	r5, [r4, #0]
 800da08:	bf18      	it	ne
 800da0a:	6059      	strne	r1, [r3, #4]
 800da0c:	6863      	ldr	r3, [r4, #4]
 800da0e:	bf08      	it	eq
 800da10:	f8c8 1000 	streq.w	r1, [r8]
 800da14:	5162      	str	r2, [r4, r5]
 800da16:	604b      	str	r3, [r1, #4]
 800da18:	4630      	mov	r0, r6
 800da1a:	f000 f82f 	bl	800da7c <__malloc_unlock>
 800da1e:	f104 000b 	add.w	r0, r4, #11
 800da22:	1d23      	adds	r3, r4, #4
 800da24:	f020 0007 	bic.w	r0, r0, #7
 800da28:	1ac2      	subs	r2, r0, r3
 800da2a:	bf1c      	itt	ne
 800da2c:	1a1b      	subne	r3, r3, r0
 800da2e:	50a3      	strne	r3, [r4, r2]
 800da30:	e7af      	b.n	800d992 <_malloc_r+0x22>
 800da32:	6862      	ldr	r2, [r4, #4]
 800da34:	42a3      	cmp	r3, r4
 800da36:	bf0c      	ite	eq
 800da38:	f8c8 2000 	streq.w	r2, [r8]
 800da3c:	605a      	strne	r2, [r3, #4]
 800da3e:	e7eb      	b.n	800da18 <_malloc_r+0xa8>
 800da40:	4623      	mov	r3, r4
 800da42:	6864      	ldr	r4, [r4, #4]
 800da44:	e7ae      	b.n	800d9a4 <_malloc_r+0x34>
 800da46:	463c      	mov	r4, r7
 800da48:	687f      	ldr	r7, [r7, #4]
 800da4a:	e7b6      	b.n	800d9ba <_malloc_r+0x4a>
 800da4c:	461a      	mov	r2, r3
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	42a3      	cmp	r3, r4
 800da52:	d1fb      	bne.n	800da4c <_malloc_r+0xdc>
 800da54:	2300      	movs	r3, #0
 800da56:	6053      	str	r3, [r2, #4]
 800da58:	e7de      	b.n	800da18 <_malloc_r+0xa8>
 800da5a:	230c      	movs	r3, #12
 800da5c:	6033      	str	r3, [r6, #0]
 800da5e:	4630      	mov	r0, r6
 800da60:	f000 f80c 	bl	800da7c <__malloc_unlock>
 800da64:	e794      	b.n	800d990 <_malloc_r+0x20>
 800da66:	6005      	str	r5, [r0, #0]
 800da68:	e7d6      	b.n	800da18 <_malloc_r+0xa8>
 800da6a:	bf00      	nop
 800da6c:	2000354c 	.word	0x2000354c

0800da70 <__malloc_lock>:
 800da70:	4801      	ldr	r0, [pc, #4]	@ (800da78 <__malloc_lock+0x8>)
 800da72:	f7ff b8a0 	b.w	800cbb6 <__retarget_lock_acquire_recursive>
 800da76:	bf00      	nop
 800da78:	20003544 	.word	0x20003544

0800da7c <__malloc_unlock>:
 800da7c:	4801      	ldr	r0, [pc, #4]	@ (800da84 <__malloc_unlock+0x8>)
 800da7e:	f7ff b89b 	b.w	800cbb8 <__retarget_lock_release_recursive>
 800da82:	bf00      	nop
 800da84:	20003544 	.word	0x20003544

0800da88 <_Balloc>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	69c6      	ldr	r6, [r0, #28]
 800da8c:	4604      	mov	r4, r0
 800da8e:	460d      	mov	r5, r1
 800da90:	b976      	cbnz	r6, 800dab0 <_Balloc+0x28>
 800da92:	2010      	movs	r0, #16
 800da94:	f7ff ff42 	bl	800d91c <malloc>
 800da98:	4602      	mov	r2, r0
 800da9a:	61e0      	str	r0, [r4, #28]
 800da9c:	b920      	cbnz	r0, 800daa8 <_Balloc+0x20>
 800da9e:	4b18      	ldr	r3, [pc, #96]	@ (800db00 <_Balloc+0x78>)
 800daa0:	4818      	ldr	r0, [pc, #96]	@ (800db04 <_Balloc+0x7c>)
 800daa2:	216b      	movs	r1, #107	@ 0x6b
 800daa4:	f000 ff6e 	bl	800e984 <__assert_func>
 800daa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800daac:	6006      	str	r6, [r0, #0]
 800daae:	60c6      	str	r6, [r0, #12]
 800dab0:	69e6      	ldr	r6, [r4, #28]
 800dab2:	68f3      	ldr	r3, [r6, #12]
 800dab4:	b183      	cbz	r3, 800dad8 <_Balloc+0x50>
 800dab6:	69e3      	ldr	r3, [r4, #28]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dabe:	b9b8      	cbnz	r0, 800daf0 <_Balloc+0x68>
 800dac0:	2101      	movs	r1, #1
 800dac2:	fa01 f605 	lsl.w	r6, r1, r5
 800dac6:	1d72      	adds	r2, r6, #5
 800dac8:	0092      	lsls	r2, r2, #2
 800daca:	4620      	mov	r0, r4
 800dacc:	f000 ff78 	bl	800e9c0 <_calloc_r>
 800dad0:	b160      	cbz	r0, 800daec <_Balloc+0x64>
 800dad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dad6:	e00e      	b.n	800daf6 <_Balloc+0x6e>
 800dad8:	2221      	movs	r2, #33	@ 0x21
 800dada:	2104      	movs	r1, #4
 800dadc:	4620      	mov	r0, r4
 800dade:	f000 ff6f 	bl	800e9c0 <_calloc_r>
 800dae2:	69e3      	ldr	r3, [r4, #28]
 800dae4:	60f0      	str	r0, [r6, #12]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1e4      	bne.n	800dab6 <_Balloc+0x2e>
 800daec:	2000      	movs	r0, #0
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	6802      	ldr	r2, [r0, #0]
 800daf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daf6:	2300      	movs	r3, #0
 800daf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dafc:	e7f7      	b.n	800daee <_Balloc+0x66>
 800dafe:	bf00      	nop
 800db00:	0800ef25 	.word	0x0800ef25
 800db04:	0800efa5 	.word	0x0800efa5

0800db08 <_Bfree>:
 800db08:	b570      	push	{r4, r5, r6, lr}
 800db0a:	69c6      	ldr	r6, [r0, #28]
 800db0c:	4605      	mov	r5, r0
 800db0e:	460c      	mov	r4, r1
 800db10:	b976      	cbnz	r6, 800db30 <_Bfree+0x28>
 800db12:	2010      	movs	r0, #16
 800db14:	f7ff ff02 	bl	800d91c <malloc>
 800db18:	4602      	mov	r2, r0
 800db1a:	61e8      	str	r0, [r5, #28]
 800db1c:	b920      	cbnz	r0, 800db28 <_Bfree+0x20>
 800db1e:	4b09      	ldr	r3, [pc, #36]	@ (800db44 <_Bfree+0x3c>)
 800db20:	4809      	ldr	r0, [pc, #36]	@ (800db48 <_Bfree+0x40>)
 800db22:	218f      	movs	r1, #143	@ 0x8f
 800db24:	f000 ff2e 	bl	800e984 <__assert_func>
 800db28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db2c:	6006      	str	r6, [r0, #0]
 800db2e:	60c6      	str	r6, [r0, #12]
 800db30:	b13c      	cbz	r4, 800db42 <_Bfree+0x3a>
 800db32:	69eb      	ldr	r3, [r5, #28]
 800db34:	6862      	ldr	r2, [r4, #4]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db3c:	6021      	str	r1, [r4, #0]
 800db3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	0800ef25 	.word	0x0800ef25
 800db48:	0800efa5 	.word	0x0800efa5

0800db4c <__multadd>:
 800db4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	690d      	ldr	r5, [r1, #16]
 800db52:	4607      	mov	r7, r0
 800db54:	460c      	mov	r4, r1
 800db56:	461e      	mov	r6, r3
 800db58:	f101 0c14 	add.w	ip, r1, #20
 800db5c:	2000      	movs	r0, #0
 800db5e:	f8dc 3000 	ldr.w	r3, [ip]
 800db62:	b299      	uxth	r1, r3
 800db64:	fb02 6101 	mla	r1, r2, r1, r6
 800db68:	0c1e      	lsrs	r6, r3, #16
 800db6a:	0c0b      	lsrs	r3, r1, #16
 800db6c:	fb02 3306 	mla	r3, r2, r6, r3
 800db70:	b289      	uxth	r1, r1
 800db72:	3001      	adds	r0, #1
 800db74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db78:	4285      	cmp	r5, r0
 800db7a:	f84c 1b04 	str.w	r1, [ip], #4
 800db7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db82:	dcec      	bgt.n	800db5e <__multadd+0x12>
 800db84:	b30e      	cbz	r6, 800dbca <__multadd+0x7e>
 800db86:	68a3      	ldr	r3, [r4, #8]
 800db88:	42ab      	cmp	r3, r5
 800db8a:	dc19      	bgt.n	800dbc0 <__multadd+0x74>
 800db8c:	6861      	ldr	r1, [r4, #4]
 800db8e:	4638      	mov	r0, r7
 800db90:	3101      	adds	r1, #1
 800db92:	f7ff ff79 	bl	800da88 <_Balloc>
 800db96:	4680      	mov	r8, r0
 800db98:	b928      	cbnz	r0, 800dba6 <__multadd+0x5a>
 800db9a:	4602      	mov	r2, r0
 800db9c:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd0 <__multadd+0x84>)
 800db9e:	480d      	ldr	r0, [pc, #52]	@ (800dbd4 <__multadd+0x88>)
 800dba0:	21ba      	movs	r1, #186	@ 0xba
 800dba2:	f000 feef 	bl	800e984 <__assert_func>
 800dba6:	6922      	ldr	r2, [r4, #16]
 800dba8:	3202      	adds	r2, #2
 800dbaa:	f104 010c 	add.w	r1, r4, #12
 800dbae:	0092      	lsls	r2, r2, #2
 800dbb0:	300c      	adds	r0, #12
 800dbb2:	f7ff f802 	bl	800cbba <memcpy>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4638      	mov	r0, r7
 800dbba:	f7ff ffa5 	bl	800db08 <_Bfree>
 800dbbe:	4644      	mov	r4, r8
 800dbc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbc4:	3501      	adds	r5, #1
 800dbc6:	615e      	str	r6, [r3, #20]
 800dbc8:	6125      	str	r5, [r4, #16]
 800dbca:	4620      	mov	r0, r4
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	0800ef94 	.word	0x0800ef94
 800dbd4:	0800efa5 	.word	0x0800efa5

0800dbd8 <__hi0bits>:
 800dbd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dbdc:	4603      	mov	r3, r0
 800dbde:	bf36      	itet	cc
 800dbe0:	0403      	lslcc	r3, r0, #16
 800dbe2:	2000      	movcs	r0, #0
 800dbe4:	2010      	movcc	r0, #16
 800dbe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbea:	bf3c      	itt	cc
 800dbec:	021b      	lslcc	r3, r3, #8
 800dbee:	3008      	addcc	r0, #8
 800dbf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dbf4:	bf3c      	itt	cc
 800dbf6:	011b      	lslcc	r3, r3, #4
 800dbf8:	3004      	addcc	r0, #4
 800dbfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbfe:	bf3c      	itt	cc
 800dc00:	009b      	lslcc	r3, r3, #2
 800dc02:	3002      	addcc	r0, #2
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	db05      	blt.n	800dc14 <__hi0bits+0x3c>
 800dc08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dc0c:	f100 0001 	add.w	r0, r0, #1
 800dc10:	bf08      	it	eq
 800dc12:	2020      	moveq	r0, #32
 800dc14:	4770      	bx	lr

0800dc16 <__lo0bits>:
 800dc16:	6803      	ldr	r3, [r0, #0]
 800dc18:	4602      	mov	r2, r0
 800dc1a:	f013 0007 	ands.w	r0, r3, #7
 800dc1e:	d00b      	beq.n	800dc38 <__lo0bits+0x22>
 800dc20:	07d9      	lsls	r1, r3, #31
 800dc22:	d421      	bmi.n	800dc68 <__lo0bits+0x52>
 800dc24:	0798      	lsls	r0, r3, #30
 800dc26:	bf49      	itett	mi
 800dc28:	085b      	lsrmi	r3, r3, #1
 800dc2a:	089b      	lsrpl	r3, r3, #2
 800dc2c:	2001      	movmi	r0, #1
 800dc2e:	6013      	strmi	r3, [r2, #0]
 800dc30:	bf5c      	itt	pl
 800dc32:	6013      	strpl	r3, [r2, #0]
 800dc34:	2002      	movpl	r0, #2
 800dc36:	4770      	bx	lr
 800dc38:	b299      	uxth	r1, r3
 800dc3a:	b909      	cbnz	r1, 800dc40 <__lo0bits+0x2a>
 800dc3c:	0c1b      	lsrs	r3, r3, #16
 800dc3e:	2010      	movs	r0, #16
 800dc40:	b2d9      	uxtb	r1, r3
 800dc42:	b909      	cbnz	r1, 800dc48 <__lo0bits+0x32>
 800dc44:	3008      	adds	r0, #8
 800dc46:	0a1b      	lsrs	r3, r3, #8
 800dc48:	0719      	lsls	r1, r3, #28
 800dc4a:	bf04      	itt	eq
 800dc4c:	091b      	lsreq	r3, r3, #4
 800dc4e:	3004      	addeq	r0, #4
 800dc50:	0799      	lsls	r1, r3, #30
 800dc52:	bf04      	itt	eq
 800dc54:	089b      	lsreq	r3, r3, #2
 800dc56:	3002      	addeq	r0, #2
 800dc58:	07d9      	lsls	r1, r3, #31
 800dc5a:	d403      	bmi.n	800dc64 <__lo0bits+0x4e>
 800dc5c:	085b      	lsrs	r3, r3, #1
 800dc5e:	f100 0001 	add.w	r0, r0, #1
 800dc62:	d003      	beq.n	800dc6c <__lo0bits+0x56>
 800dc64:	6013      	str	r3, [r2, #0]
 800dc66:	4770      	bx	lr
 800dc68:	2000      	movs	r0, #0
 800dc6a:	4770      	bx	lr
 800dc6c:	2020      	movs	r0, #32
 800dc6e:	4770      	bx	lr

0800dc70 <__i2b>:
 800dc70:	b510      	push	{r4, lr}
 800dc72:	460c      	mov	r4, r1
 800dc74:	2101      	movs	r1, #1
 800dc76:	f7ff ff07 	bl	800da88 <_Balloc>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	b928      	cbnz	r0, 800dc8a <__i2b+0x1a>
 800dc7e:	4b05      	ldr	r3, [pc, #20]	@ (800dc94 <__i2b+0x24>)
 800dc80:	4805      	ldr	r0, [pc, #20]	@ (800dc98 <__i2b+0x28>)
 800dc82:	f240 1145 	movw	r1, #325	@ 0x145
 800dc86:	f000 fe7d 	bl	800e984 <__assert_func>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	6144      	str	r4, [r0, #20]
 800dc8e:	6103      	str	r3, [r0, #16]
 800dc90:	bd10      	pop	{r4, pc}
 800dc92:	bf00      	nop
 800dc94:	0800ef94 	.word	0x0800ef94
 800dc98:	0800efa5 	.word	0x0800efa5

0800dc9c <__multiply>:
 800dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca0:	4617      	mov	r7, r2
 800dca2:	690a      	ldr	r2, [r1, #16]
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	bfa8      	it	ge
 800dcaa:	463b      	movge	r3, r7
 800dcac:	4689      	mov	r9, r1
 800dcae:	bfa4      	itt	ge
 800dcb0:	460f      	movge	r7, r1
 800dcb2:	4699      	movge	r9, r3
 800dcb4:	693d      	ldr	r5, [r7, #16]
 800dcb6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	eb05 060a 	add.w	r6, r5, sl
 800dcc2:	42b3      	cmp	r3, r6
 800dcc4:	b085      	sub	sp, #20
 800dcc6:	bfb8      	it	lt
 800dcc8:	3101      	addlt	r1, #1
 800dcca:	f7ff fedd 	bl	800da88 <_Balloc>
 800dcce:	b930      	cbnz	r0, 800dcde <__multiply+0x42>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	4b41      	ldr	r3, [pc, #260]	@ (800ddd8 <__multiply+0x13c>)
 800dcd4:	4841      	ldr	r0, [pc, #260]	@ (800dddc <__multiply+0x140>)
 800dcd6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dcda:	f000 fe53 	bl	800e984 <__assert_func>
 800dcde:	f100 0414 	add.w	r4, r0, #20
 800dce2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dce6:	4623      	mov	r3, r4
 800dce8:	2200      	movs	r2, #0
 800dcea:	4573      	cmp	r3, lr
 800dcec:	d320      	bcc.n	800dd30 <__multiply+0x94>
 800dcee:	f107 0814 	add.w	r8, r7, #20
 800dcf2:	f109 0114 	add.w	r1, r9, #20
 800dcf6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dcfa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	1beb      	subs	r3, r5, r7
 800dd02:	3b15      	subs	r3, #21
 800dd04:	f023 0303 	bic.w	r3, r3, #3
 800dd08:	3304      	adds	r3, #4
 800dd0a:	3715      	adds	r7, #21
 800dd0c:	42bd      	cmp	r5, r7
 800dd0e:	bf38      	it	cc
 800dd10:	2304      	movcc	r3, #4
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	9b02      	ldr	r3, [sp, #8]
 800dd16:	9103      	str	r1, [sp, #12]
 800dd18:	428b      	cmp	r3, r1
 800dd1a:	d80c      	bhi.n	800dd36 <__multiply+0x9a>
 800dd1c:	2e00      	cmp	r6, #0
 800dd1e:	dd03      	ble.n	800dd28 <__multiply+0x8c>
 800dd20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d055      	beq.n	800ddd4 <__multiply+0x138>
 800dd28:	6106      	str	r6, [r0, #16]
 800dd2a:	b005      	add	sp, #20
 800dd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd30:	f843 2b04 	str.w	r2, [r3], #4
 800dd34:	e7d9      	b.n	800dcea <__multiply+0x4e>
 800dd36:	f8b1 a000 	ldrh.w	sl, [r1]
 800dd3a:	f1ba 0f00 	cmp.w	sl, #0
 800dd3e:	d01f      	beq.n	800dd80 <__multiply+0xe4>
 800dd40:	46c4      	mov	ip, r8
 800dd42:	46a1      	mov	r9, r4
 800dd44:	2700      	movs	r7, #0
 800dd46:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd4a:	f8d9 3000 	ldr.w	r3, [r9]
 800dd4e:	fa1f fb82 	uxth.w	fp, r2
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	fb0a 330b 	mla	r3, sl, fp, r3
 800dd58:	443b      	add	r3, r7
 800dd5a:	f8d9 7000 	ldr.w	r7, [r9]
 800dd5e:	0c12      	lsrs	r2, r2, #16
 800dd60:	0c3f      	lsrs	r7, r7, #16
 800dd62:	fb0a 7202 	mla	r2, sl, r2, r7
 800dd66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd70:	4565      	cmp	r5, ip
 800dd72:	f849 3b04 	str.w	r3, [r9], #4
 800dd76:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dd7a:	d8e4      	bhi.n	800dd46 <__multiply+0xaa>
 800dd7c:	9b01      	ldr	r3, [sp, #4]
 800dd7e:	50e7      	str	r7, [r4, r3]
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd86:	3104      	adds	r1, #4
 800dd88:	f1b9 0f00 	cmp.w	r9, #0
 800dd8c:	d020      	beq.n	800ddd0 <__multiply+0x134>
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	4647      	mov	r7, r8
 800dd92:	46a4      	mov	ip, r4
 800dd94:	f04f 0a00 	mov.w	sl, #0
 800dd98:	f8b7 b000 	ldrh.w	fp, [r7]
 800dd9c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dda0:	fb09 220b 	mla	r2, r9, fp, r2
 800dda4:	4452      	add	r2, sl
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddac:	f84c 3b04 	str.w	r3, [ip], #4
 800ddb0:	f857 3b04 	ldr.w	r3, [r7], #4
 800ddb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddb8:	f8bc 3000 	ldrh.w	r3, [ip]
 800ddbc:	fb09 330a 	mla	r3, r9, sl, r3
 800ddc0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ddc4:	42bd      	cmp	r5, r7
 800ddc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddca:	d8e5      	bhi.n	800dd98 <__multiply+0xfc>
 800ddcc:	9a01      	ldr	r2, [sp, #4]
 800ddce:	50a3      	str	r3, [r4, r2]
 800ddd0:	3404      	adds	r4, #4
 800ddd2:	e79f      	b.n	800dd14 <__multiply+0x78>
 800ddd4:	3e01      	subs	r6, #1
 800ddd6:	e7a1      	b.n	800dd1c <__multiply+0x80>
 800ddd8:	0800ef94 	.word	0x0800ef94
 800dddc:	0800efa5 	.word	0x0800efa5

0800dde0 <__pow5mult>:
 800dde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dde4:	4615      	mov	r5, r2
 800dde6:	f012 0203 	ands.w	r2, r2, #3
 800ddea:	4607      	mov	r7, r0
 800ddec:	460e      	mov	r6, r1
 800ddee:	d007      	beq.n	800de00 <__pow5mult+0x20>
 800ddf0:	4c25      	ldr	r4, [pc, #148]	@ (800de88 <__pow5mult+0xa8>)
 800ddf2:	3a01      	subs	r2, #1
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddfa:	f7ff fea7 	bl	800db4c <__multadd>
 800ddfe:	4606      	mov	r6, r0
 800de00:	10ad      	asrs	r5, r5, #2
 800de02:	d03d      	beq.n	800de80 <__pow5mult+0xa0>
 800de04:	69fc      	ldr	r4, [r7, #28]
 800de06:	b97c      	cbnz	r4, 800de28 <__pow5mult+0x48>
 800de08:	2010      	movs	r0, #16
 800de0a:	f7ff fd87 	bl	800d91c <malloc>
 800de0e:	4602      	mov	r2, r0
 800de10:	61f8      	str	r0, [r7, #28]
 800de12:	b928      	cbnz	r0, 800de20 <__pow5mult+0x40>
 800de14:	4b1d      	ldr	r3, [pc, #116]	@ (800de8c <__pow5mult+0xac>)
 800de16:	481e      	ldr	r0, [pc, #120]	@ (800de90 <__pow5mult+0xb0>)
 800de18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800de1c:	f000 fdb2 	bl	800e984 <__assert_func>
 800de20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de24:	6004      	str	r4, [r0, #0]
 800de26:	60c4      	str	r4, [r0, #12]
 800de28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800de2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de30:	b94c      	cbnz	r4, 800de46 <__pow5mult+0x66>
 800de32:	f240 2171 	movw	r1, #625	@ 0x271
 800de36:	4638      	mov	r0, r7
 800de38:	f7ff ff1a 	bl	800dc70 <__i2b>
 800de3c:	2300      	movs	r3, #0
 800de3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800de42:	4604      	mov	r4, r0
 800de44:	6003      	str	r3, [r0, #0]
 800de46:	f04f 0900 	mov.w	r9, #0
 800de4a:	07eb      	lsls	r3, r5, #31
 800de4c:	d50a      	bpl.n	800de64 <__pow5mult+0x84>
 800de4e:	4631      	mov	r1, r6
 800de50:	4622      	mov	r2, r4
 800de52:	4638      	mov	r0, r7
 800de54:	f7ff ff22 	bl	800dc9c <__multiply>
 800de58:	4631      	mov	r1, r6
 800de5a:	4680      	mov	r8, r0
 800de5c:	4638      	mov	r0, r7
 800de5e:	f7ff fe53 	bl	800db08 <_Bfree>
 800de62:	4646      	mov	r6, r8
 800de64:	106d      	asrs	r5, r5, #1
 800de66:	d00b      	beq.n	800de80 <__pow5mult+0xa0>
 800de68:	6820      	ldr	r0, [r4, #0]
 800de6a:	b938      	cbnz	r0, 800de7c <__pow5mult+0x9c>
 800de6c:	4622      	mov	r2, r4
 800de6e:	4621      	mov	r1, r4
 800de70:	4638      	mov	r0, r7
 800de72:	f7ff ff13 	bl	800dc9c <__multiply>
 800de76:	6020      	str	r0, [r4, #0]
 800de78:	f8c0 9000 	str.w	r9, [r0]
 800de7c:	4604      	mov	r4, r0
 800de7e:	e7e4      	b.n	800de4a <__pow5mult+0x6a>
 800de80:	4630      	mov	r0, r6
 800de82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de86:	bf00      	nop
 800de88:	0800f058 	.word	0x0800f058
 800de8c:	0800ef25 	.word	0x0800ef25
 800de90:	0800efa5 	.word	0x0800efa5

0800de94 <__lshift>:
 800de94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de98:	460c      	mov	r4, r1
 800de9a:	6849      	ldr	r1, [r1, #4]
 800de9c:	6923      	ldr	r3, [r4, #16]
 800de9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dea2:	68a3      	ldr	r3, [r4, #8]
 800dea4:	4607      	mov	r7, r0
 800dea6:	4691      	mov	r9, r2
 800dea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800deac:	f108 0601 	add.w	r6, r8, #1
 800deb0:	42b3      	cmp	r3, r6
 800deb2:	db0b      	blt.n	800decc <__lshift+0x38>
 800deb4:	4638      	mov	r0, r7
 800deb6:	f7ff fde7 	bl	800da88 <_Balloc>
 800deba:	4605      	mov	r5, r0
 800debc:	b948      	cbnz	r0, 800ded2 <__lshift+0x3e>
 800debe:	4602      	mov	r2, r0
 800dec0:	4b28      	ldr	r3, [pc, #160]	@ (800df64 <__lshift+0xd0>)
 800dec2:	4829      	ldr	r0, [pc, #164]	@ (800df68 <__lshift+0xd4>)
 800dec4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dec8:	f000 fd5c 	bl	800e984 <__assert_func>
 800decc:	3101      	adds	r1, #1
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	e7ee      	b.n	800deb0 <__lshift+0x1c>
 800ded2:	2300      	movs	r3, #0
 800ded4:	f100 0114 	add.w	r1, r0, #20
 800ded8:	f100 0210 	add.w	r2, r0, #16
 800dedc:	4618      	mov	r0, r3
 800dede:	4553      	cmp	r3, sl
 800dee0:	db33      	blt.n	800df4a <__lshift+0xb6>
 800dee2:	6920      	ldr	r0, [r4, #16]
 800dee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dee8:	f104 0314 	add.w	r3, r4, #20
 800deec:	f019 091f 	ands.w	r9, r9, #31
 800def0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800def4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800def8:	d02b      	beq.n	800df52 <__lshift+0xbe>
 800defa:	f1c9 0e20 	rsb	lr, r9, #32
 800defe:	468a      	mov	sl, r1
 800df00:	2200      	movs	r2, #0
 800df02:	6818      	ldr	r0, [r3, #0]
 800df04:	fa00 f009 	lsl.w	r0, r0, r9
 800df08:	4310      	orrs	r0, r2
 800df0a:	f84a 0b04 	str.w	r0, [sl], #4
 800df0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800df12:	459c      	cmp	ip, r3
 800df14:	fa22 f20e 	lsr.w	r2, r2, lr
 800df18:	d8f3      	bhi.n	800df02 <__lshift+0x6e>
 800df1a:	ebac 0304 	sub.w	r3, ip, r4
 800df1e:	3b15      	subs	r3, #21
 800df20:	f023 0303 	bic.w	r3, r3, #3
 800df24:	3304      	adds	r3, #4
 800df26:	f104 0015 	add.w	r0, r4, #21
 800df2a:	4560      	cmp	r0, ip
 800df2c:	bf88      	it	hi
 800df2e:	2304      	movhi	r3, #4
 800df30:	50ca      	str	r2, [r1, r3]
 800df32:	b10a      	cbz	r2, 800df38 <__lshift+0xa4>
 800df34:	f108 0602 	add.w	r6, r8, #2
 800df38:	3e01      	subs	r6, #1
 800df3a:	4638      	mov	r0, r7
 800df3c:	612e      	str	r6, [r5, #16]
 800df3e:	4621      	mov	r1, r4
 800df40:	f7ff fde2 	bl	800db08 <_Bfree>
 800df44:	4628      	mov	r0, r5
 800df46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df4e:	3301      	adds	r3, #1
 800df50:	e7c5      	b.n	800dede <__lshift+0x4a>
 800df52:	3904      	subs	r1, #4
 800df54:	f853 2b04 	ldr.w	r2, [r3], #4
 800df58:	f841 2f04 	str.w	r2, [r1, #4]!
 800df5c:	459c      	cmp	ip, r3
 800df5e:	d8f9      	bhi.n	800df54 <__lshift+0xc0>
 800df60:	e7ea      	b.n	800df38 <__lshift+0xa4>
 800df62:	bf00      	nop
 800df64:	0800ef94 	.word	0x0800ef94
 800df68:	0800efa5 	.word	0x0800efa5

0800df6c <__mcmp>:
 800df6c:	690a      	ldr	r2, [r1, #16]
 800df6e:	4603      	mov	r3, r0
 800df70:	6900      	ldr	r0, [r0, #16]
 800df72:	1a80      	subs	r0, r0, r2
 800df74:	b530      	push	{r4, r5, lr}
 800df76:	d10e      	bne.n	800df96 <__mcmp+0x2a>
 800df78:	3314      	adds	r3, #20
 800df7a:	3114      	adds	r1, #20
 800df7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df8c:	4295      	cmp	r5, r2
 800df8e:	d003      	beq.n	800df98 <__mcmp+0x2c>
 800df90:	d205      	bcs.n	800df9e <__mcmp+0x32>
 800df92:	f04f 30ff 	mov.w	r0, #4294967295
 800df96:	bd30      	pop	{r4, r5, pc}
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d3f3      	bcc.n	800df84 <__mcmp+0x18>
 800df9c:	e7fb      	b.n	800df96 <__mcmp+0x2a>
 800df9e:	2001      	movs	r0, #1
 800dfa0:	e7f9      	b.n	800df96 <__mcmp+0x2a>
	...

0800dfa4 <__mdiff>:
 800dfa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa8:	4689      	mov	r9, r1
 800dfaa:	4606      	mov	r6, r0
 800dfac:	4611      	mov	r1, r2
 800dfae:	4648      	mov	r0, r9
 800dfb0:	4614      	mov	r4, r2
 800dfb2:	f7ff ffdb 	bl	800df6c <__mcmp>
 800dfb6:	1e05      	subs	r5, r0, #0
 800dfb8:	d112      	bne.n	800dfe0 <__mdiff+0x3c>
 800dfba:	4629      	mov	r1, r5
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	f7ff fd63 	bl	800da88 <_Balloc>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	b928      	cbnz	r0, 800dfd2 <__mdiff+0x2e>
 800dfc6:	4b3f      	ldr	r3, [pc, #252]	@ (800e0c4 <__mdiff+0x120>)
 800dfc8:	f240 2137 	movw	r1, #567	@ 0x237
 800dfcc:	483e      	ldr	r0, [pc, #248]	@ (800e0c8 <__mdiff+0x124>)
 800dfce:	f000 fcd9 	bl	800e984 <__assert_func>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfd8:	4610      	mov	r0, r2
 800dfda:	b003      	add	sp, #12
 800dfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	bfbc      	itt	lt
 800dfe2:	464b      	movlt	r3, r9
 800dfe4:	46a1      	movlt	r9, r4
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dfec:	bfba      	itte	lt
 800dfee:	461c      	movlt	r4, r3
 800dff0:	2501      	movlt	r5, #1
 800dff2:	2500      	movge	r5, #0
 800dff4:	f7ff fd48 	bl	800da88 <_Balloc>
 800dff8:	4602      	mov	r2, r0
 800dffa:	b918      	cbnz	r0, 800e004 <__mdiff+0x60>
 800dffc:	4b31      	ldr	r3, [pc, #196]	@ (800e0c4 <__mdiff+0x120>)
 800dffe:	f240 2145 	movw	r1, #581	@ 0x245
 800e002:	e7e3      	b.n	800dfcc <__mdiff+0x28>
 800e004:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e008:	6926      	ldr	r6, [r4, #16]
 800e00a:	60c5      	str	r5, [r0, #12]
 800e00c:	f109 0310 	add.w	r3, r9, #16
 800e010:	f109 0514 	add.w	r5, r9, #20
 800e014:	f104 0e14 	add.w	lr, r4, #20
 800e018:	f100 0b14 	add.w	fp, r0, #20
 800e01c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e020:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e024:	9301      	str	r3, [sp, #4]
 800e026:	46d9      	mov	r9, fp
 800e028:	f04f 0c00 	mov.w	ip, #0
 800e02c:	9b01      	ldr	r3, [sp, #4]
 800e02e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e032:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e036:	9301      	str	r3, [sp, #4]
 800e038:	fa1f f38a 	uxth.w	r3, sl
 800e03c:	4619      	mov	r1, r3
 800e03e:	b283      	uxth	r3, r0
 800e040:	1acb      	subs	r3, r1, r3
 800e042:	0c00      	lsrs	r0, r0, #16
 800e044:	4463      	add	r3, ip
 800e046:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e04a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e04e:	b29b      	uxth	r3, r3
 800e050:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e054:	4576      	cmp	r6, lr
 800e056:	f849 3b04 	str.w	r3, [r9], #4
 800e05a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e05e:	d8e5      	bhi.n	800e02c <__mdiff+0x88>
 800e060:	1b33      	subs	r3, r6, r4
 800e062:	3b15      	subs	r3, #21
 800e064:	f023 0303 	bic.w	r3, r3, #3
 800e068:	3415      	adds	r4, #21
 800e06a:	3304      	adds	r3, #4
 800e06c:	42a6      	cmp	r6, r4
 800e06e:	bf38      	it	cc
 800e070:	2304      	movcc	r3, #4
 800e072:	441d      	add	r5, r3
 800e074:	445b      	add	r3, fp
 800e076:	461e      	mov	r6, r3
 800e078:	462c      	mov	r4, r5
 800e07a:	4544      	cmp	r4, r8
 800e07c:	d30e      	bcc.n	800e09c <__mdiff+0xf8>
 800e07e:	f108 0103 	add.w	r1, r8, #3
 800e082:	1b49      	subs	r1, r1, r5
 800e084:	f021 0103 	bic.w	r1, r1, #3
 800e088:	3d03      	subs	r5, #3
 800e08a:	45a8      	cmp	r8, r5
 800e08c:	bf38      	it	cc
 800e08e:	2100      	movcc	r1, #0
 800e090:	440b      	add	r3, r1
 800e092:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e096:	b191      	cbz	r1, 800e0be <__mdiff+0x11a>
 800e098:	6117      	str	r7, [r2, #16]
 800e09a:	e79d      	b.n	800dfd8 <__mdiff+0x34>
 800e09c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e0a0:	46e6      	mov	lr, ip
 800e0a2:	0c08      	lsrs	r0, r1, #16
 800e0a4:	fa1c fc81 	uxtah	ip, ip, r1
 800e0a8:	4471      	add	r1, lr
 800e0aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e0ae:	b289      	uxth	r1, r1
 800e0b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e0b4:	f846 1b04 	str.w	r1, [r6], #4
 800e0b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e0bc:	e7dd      	b.n	800e07a <__mdiff+0xd6>
 800e0be:	3f01      	subs	r7, #1
 800e0c0:	e7e7      	b.n	800e092 <__mdiff+0xee>
 800e0c2:	bf00      	nop
 800e0c4:	0800ef94 	.word	0x0800ef94
 800e0c8:	0800efa5 	.word	0x0800efa5

0800e0cc <__d2b>:
 800e0cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	2101      	movs	r1, #1
 800e0d4:	ec59 8b10 	vmov	r8, r9, d0
 800e0d8:	4616      	mov	r6, r2
 800e0da:	f7ff fcd5 	bl	800da88 <_Balloc>
 800e0de:	4604      	mov	r4, r0
 800e0e0:	b930      	cbnz	r0, 800e0f0 <__d2b+0x24>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	4b23      	ldr	r3, [pc, #140]	@ (800e174 <__d2b+0xa8>)
 800e0e6:	4824      	ldr	r0, [pc, #144]	@ (800e178 <__d2b+0xac>)
 800e0e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e0ec:	f000 fc4a 	bl	800e984 <__assert_func>
 800e0f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0f8:	b10d      	cbz	r5, 800e0fe <__d2b+0x32>
 800e0fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0fe:	9301      	str	r3, [sp, #4]
 800e100:	f1b8 0300 	subs.w	r3, r8, #0
 800e104:	d023      	beq.n	800e14e <__d2b+0x82>
 800e106:	4668      	mov	r0, sp
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	f7ff fd84 	bl	800dc16 <__lo0bits>
 800e10e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e112:	b1d0      	cbz	r0, 800e14a <__d2b+0x7e>
 800e114:	f1c0 0320 	rsb	r3, r0, #32
 800e118:	fa02 f303 	lsl.w	r3, r2, r3
 800e11c:	430b      	orrs	r3, r1
 800e11e:	40c2      	lsrs	r2, r0
 800e120:	6163      	str	r3, [r4, #20]
 800e122:	9201      	str	r2, [sp, #4]
 800e124:	9b01      	ldr	r3, [sp, #4]
 800e126:	61a3      	str	r3, [r4, #24]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	bf0c      	ite	eq
 800e12c:	2201      	moveq	r2, #1
 800e12e:	2202      	movne	r2, #2
 800e130:	6122      	str	r2, [r4, #16]
 800e132:	b1a5      	cbz	r5, 800e15e <__d2b+0x92>
 800e134:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e138:	4405      	add	r5, r0
 800e13a:	603d      	str	r5, [r7, #0]
 800e13c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e140:	6030      	str	r0, [r6, #0]
 800e142:	4620      	mov	r0, r4
 800e144:	b003      	add	sp, #12
 800e146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e14a:	6161      	str	r1, [r4, #20]
 800e14c:	e7ea      	b.n	800e124 <__d2b+0x58>
 800e14e:	a801      	add	r0, sp, #4
 800e150:	f7ff fd61 	bl	800dc16 <__lo0bits>
 800e154:	9b01      	ldr	r3, [sp, #4]
 800e156:	6163      	str	r3, [r4, #20]
 800e158:	3020      	adds	r0, #32
 800e15a:	2201      	movs	r2, #1
 800e15c:	e7e8      	b.n	800e130 <__d2b+0x64>
 800e15e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e162:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e166:	6038      	str	r0, [r7, #0]
 800e168:	6918      	ldr	r0, [r3, #16]
 800e16a:	f7ff fd35 	bl	800dbd8 <__hi0bits>
 800e16e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e172:	e7e5      	b.n	800e140 <__d2b+0x74>
 800e174:	0800ef94 	.word	0x0800ef94
 800e178:	0800efa5 	.word	0x0800efa5

0800e17c <__ssputs_r>:
 800e17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e180:	688e      	ldr	r6, [r1, #8]
 800e182:	461f      	mov	r7, r3
 800e184:	42be      	cmp	r6, r7
 800e186:	680b      	ldr	r3, [r1, #0]
 800e188:	4682      	mov	sl, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	4690      	mov	r8, r2
 800e18e:	d82d      	bhi.n	800e1ec <__ssputs_r+0x70>
 800e190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e198:	d026      	beq.n	800e1e8 <__ssputs_r+0x6c>
 800e19a:	6965      	ldr	r5, [r4, #20]
 800e19c:	6909      	ldr	r1, [r1, #16]
 800e19e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1a2:	eba3 0901 	sub.w	r9, r3, r1
 800e1a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1aa:	1c7b      	adds	r3, r7, #1
 800e1ac:	444b      	add	r3, r9
 800e1ae:	106d      	asrs	r5, r5, #1
 800e1b0:	429d      	cmp	r5, r3
 800e1b2:	bf38      	it	cc
 800e1b4:	461d      	movcc	r5, r3
 800e1b6:	0553      	lsls	r3, r2, #21
 800e1b8:	d527      	bpl.n	800e20a <__ssputs_r+0x8e>
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	f7ff fbd8 	bl	800d970 <_malloc_r>
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	b360      	cbz	r0, 800e21e <__ssputs_r+0xa2>
 800e1c4:	6921      	ldr	r1, [r4, #16]
 800e1c6:	464a      	mov	r2, r9
 800e1c8:	f7fe fcf7 	bl	800cbba <memcpy>
 800e1cc:	89a3      	ldrh	r3, [r4, #12]
 800e1ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1d6:	81a3      	strh	r3, [r4, #12]
 800e1d8:	6126      	str	r6, [r4, #16]
 800e1da:	6165      	str	r5, [r4, #20]
 800e1dc:	444e      	add	r6, r9
 800e1de:	eba5 0509 	sub.w	r5, r5, r9
 800e1e2:	6026      	str	r6, [r4, #0]
 800e1e4:	60a5      	str	r5, [r4, #8]
 800e1e6:	463e      	mov	r6, r7
 800e1e8:	42be      	cmp	r6, r7
 800e1ea:	d900      	bls.n	800e1ee <__ssputs_r+0x72>
 800e1ec:	463e      	mov	r6, r7
 800e1ee:	6820      	ldr	r0, [r4, #0]
 800e1f0:	4632      	mov	r2, r6
 800e1f2:	4641      	mov	r1, r8
 800e1f4:	f000 fb9c 	bl	800e930 <memmove>
 800e1f8:	68a3      	ldr	r3, [r4, #8]
 800e1fa:	1b9b      	subs	r3, r3, r6
 800e1fc:	60a3      	str	r3, [r4, #8]
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	4433      	add	r3, r6
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	2000      	movs	r0, #0
 800e206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e20a:	462a      	mov	r2, r5
 800e20c:	f000 fbfe 	bl	800ea0c <_realloc_r>
 800e210:	4606      	mov	r6, r0
 800e212:	2800      	cmp	r0, #0
 800e214:	d1e0      	bne.n	800e1d8 <__ssputs_r+0x5c>
 800e216:	6921      	ldr	r1, [r4, #16]
 800e218:	4650      	mov	r0, sl
 800e21a:	f7ff fb35 	bl	800d888 <_free_r>
 800e21e:	230c      	movs	r3, #12
 800e220:	f8ca 3000 	str.w	r3, [sl]
 800e224:	89a3      	ldrh	r3, [r4, #12]
 800e226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e22a:	81a3      	strh	r3, [r4, #12]
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	e7e9      	b.n	800e206 <__ssputs_r+0x8a>
	...

0800e234 <_svfiprintf_r>:
 800e234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e238:	4698      	mov	r8, r3
 800e23a:	898b      	ldrh	r3, [r1, #12]
 800e23c:	061b      	lsls	r3, r3, #24
 800e23e:	b09d      	sub	sp, #116	@ 0x74
 800e240:	4607      	mov	r7, r0
 800e242:	460d      	mov	r5, r1
 800e244:	4614      	mov	r4, r2
 800e246:	d510      	bpl.n	800e26a <_svfiprintf_r+0x36>
 800e248:	690b      	ldr	r3, [r1, #16]
 800e24a:	b973      	cbnz	r3, 800e26a <_svfiprintf_r+0x36>
 800e24c:	2140      	movs	r1, #64	@ 0x40
 800e24e:	f7ff fb8f 	bl	800d970 <_malloc_r>
 800e252:	6028      	str	r0, [r5, #0]
 800e254:	6128      	str	r0, [r5, #16]
 800e256:	b930      	cbnz	r0, 800e266 <_svfiprintf_r+0x32>
 800e258:	230c      	movs	r3, #12
 800e25a:	603b      	str	r3, [r7, #0]
 800e25c:	f04f 30ff 	mov.w	r0, #4294967295
 800e260:	b01d      	add	sp, #116	@ 0x74
 800e262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e266:	2340      	movs	r3, #64	@ 0x40
 800e268:	616b      	str	r3, [r5, #20]
 800e26a:	2300      	movs	r3, #0
 800e26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e26e:	2320      	movs	r3, #32
 800e270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e274:	f8cd 800c 	str.w	r8, [sp, #12]
 800e278:	2330      	movs	r3, #48	@ 0x30
 800e27a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e418 <_svfiprintf_r+0x1e4>
 800e27e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e282:	f04f 0901 	mov.w	r9, #1
 800e286:	4623      	mov	r3, r4
 800e288:	469a      	mov	sl, r3
 800e28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e28e:	b10a      	cbz	r2, 800e294 <_svfiprintf_r+0x60>
 800e290:	2a25      	cmp	r2, #37	@ 0x25
 800e292:	d1f9      	bne.n	800e288 <_svfiprintf_r+0x54>
 800e294:	ebba 0b04 	subs.w	fp, sl, r4
 800e298:	d00b      	beq.n	800e2b2 <_svfiprintf_r+0x7e>
 800e29a:	465b      	mov	r3, fp
 800e29c:	4622      	mov	r2, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	f7ff ff6b 	bl	800e17c <__ssputs_r>
 800e2a6:	3001      	adds	r0, #1
 800e2a8:	f000 80a7 	beq.w	800e3fa <_svfiprintf_r+0x1c6>
 800e2ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2ae:	445a      	add	r2, fp
 800e2b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f000 809f 	beq.w	800e3fa <_svfiprintf_r+0x1c6>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2c6:	f10a 0a01 	add.w	sl, sl, #1
 800e2ca:	9304      	str	r3, [sp, #16]
 800e2cc:	9307      	str	r3, [sp, #28]
 800e2ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2d4:	4654      	mov	r4, sl
 800e2d6:	2205      	movs	r2, #5
 800e2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2dc:	484e      	ldr	r0, [pc, #312]	@ (800e418 <_svfiprintf_r+0x1e4>)
 800e2de:	f7f1 ff77 	bl	80001d0 <memchr>
 800e2e2:	9a04      	ldr	r2, [sp, #16]
 800e2e4:	b9d8      	cbnz	r0, 800e31e <_svfiprintf_r+0xea>
 800e2e6:	06d0      	lsls	r0, r2, #27
 800e2e8:	bf44      	itt	mi
 800e2ea:	2320      	movmi	r3, #32
 800e2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2f0:	0711      	lsls	r1, r2, #28
 800e2f2:	bf44      	itt	mi
 800e2f4:	232b      	movmi	r3, #43	@ 0x2b
 800e2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e2fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800e300:	d015      	beq.n	800e32e <_svfiprintf_r+0xfa>
 800e302:	9a07      	ldr	r2, [sp, #28]
 800e304:	4654      	mov	r4, sl
 800e306:	2000      	movs	r0, #0
 800e308:	f04f 0c0a 	mov.w	ip, #10
 800e30c:	4621      	mov	r1, r4
 800e30e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e312:	3b30      	subs	r3, #48	@ 0x30
 800e314:	2b09      	cmp	r3, #9
 800e316:	d94b      	bls.n	800e3b0 <_svfiprintf_r+0x17c>
 800e318:	b1b0      	cbz	r0, 800e348 <_svfiprintf_r+0x114>
 800e31a:	9207      	str	r2, [sp, #28]
 800e31c:	e014      	b.n	800e348 <_svfiprintf_r+0x114>
 800e31e:	eba0 0308 	sub.w	r3, r0, r8
 800e322:	fa09 f303 	lsl.w	r3, r9, r3
 800e326:	4313      	orrs	r3, r2
 800e328:	9304      	str	r3, [sp, #16]
 800e32a:	46a2      	mov	sl, r4
 800e32c:	e7d2      	b.n	800e2d4 <_svfiprintf_r+0xa0>
 800e32e:	9b03      	ldr	r3, [sp, #12]
 800e330:	1d19      	adds	r1, r3, #4
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	9103      	str	r1, [sp, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	bfbb      	ittet	lt
 800e33a:	425b      	neglt	r3, r3
 800e33c:	f042 0202 	orrlt.w	r2, r2, #2
 800e340:	9307      	strge	r3, [sp, #28]
 800e342:	9307      	strlt	r3, [sp, #28]
 800e344:	bfb8      	it	lt
 800e346:	9204      	strlt	r2, [sp, #16]
 800e348:	7823      	ldrb	r3, [r4, #0]
 800e34a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e34c:	d10a      	bne.n	800e364 <_svfiprintf_r+0x130>
 800e34e:	7863      	ldrb	r3, [r4, #1]
 800e350:	2b2a      	cmp	r3, #42	@ 0x2a
 800e352:	d132      	bne.n	800e3ba <_svfiprintf_r+0x186>
 800e354:	9b03      	ldr	r3, [sp, #12]
 800e356:	1d1a      	adds	r2, r3, #4
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	9203      	str	r2, [sp, #12]
 800e35c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e360:	3402      	adds	r4, #2
 800e362:	9305      	str	r3, [sp, #20]
 800e364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e428 <_svfiprintf_r+0x1f4>
 800e368:	7821      	ldrb	r1, [r4, #0]
 800e36a:	2203      	movs	r2, #3
 800e36c:	4650      	mov	r0, sl
 800e36e:	f7f1 ff2f 	bl	80001d0 <memchr>
 800e372:	b138      	cbz	r0, 800e384 <_svfiprintf_r+0x150>
 800e374:	9b04      	ldr	r3, [sp, #16]
 800e376:	eba0 000a 	sub.w	r0, r0, sl
 800e37a:	2240      	movs	r2, #64	@ 0x40
 800e37c:	4082      	lsls	r2, r0
 800e37e:	4313      	orrs	r3, r2
 800e380:	3401      	adds	r4, #1
 800e382:	9304      	str	r3, [sp, #16]
 800e384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e388:	4824      	ldr	r0, [pc, #144]	@ (800e41c <_svfiprintf_r+0x1e8>)
 800e38a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e38e:	2206      	movs	r2, #6
 800e390:	f7f1 ff1e 	bl	80001d0 <memchr>
 800e394:	2800      	cmp	r0, #0
 800e396:	d036      	beq.n	800e406 <_svfiprintf_r+0x1d2>
 800e398:	4b21      	ldr	r3, [pc, #132]	@ (800e420 <_svfiprintf_r+0x1ec>)
 800e39a:	bb1b      	cbnz	r3, 800e3e4 <_svfiprintf_r+0x1b0>
 800e39c:	9b03      	ldr	r3, [sp, #12]
 800e39e:	3307      	adds	r3, #7
 800e3a0:	f023 0307 	bic.w	r3, r3, #7
 800e3a4:	3308      	adds	r3, #8
 800e3a6:	9303      	str	r3, [sp, #12]
 800e3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3aa:	4433      	add	r3, r6
 800e3ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3ae:	e76a      	b.n	800e286 <_svfiprintf_r+0x52>
 800e3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3b4:	460c      	mov	r4, r1
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	e7a8      	b.n	800e30c <_svfiprintf_r+0xd8>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	3401      	adds	r4, #1
 800e3be:	9305      	str	r3, [sp, #20]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	f04f 0c0a 	mov.w	ip, #10
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3cc:	3a30      	subs	r2, #48	@ 0x30
 800e3ce:	2a09      	cmp	r2, #9
 800e3d0:	d903      	bls.n	800e3da <_svfiprintf_r+0x1a6>
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d0c6      	beq.n	800e364 <_svfiprintf_r+0x130>
 800e3d6:	9105      	str	r1, [sp, #20]
 800e3d8:	e7c4      	b.n	800e364 <_svfiprintf_r+0x130>
 800e3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3de:	4604      	mov	r4, r0
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e7f0      	b.n	800e3c6 <_svfiprintf_r+0x192>
 800e3e4:	ab03      	add	r3, sp, #12
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	462a      	mov	r2, r5
 800e3ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e424 <_svfiprintf_r+0x1f0>)
 800e3ec:	a904      	add	r1, sp, #16
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	f7fd fdc6 	bl	800bf80 <_printf_float>
 800e3f4:	1c42      	adds	r2, r0, #1
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	d1d6      	bne.n	800e3a8 <_svfiprintf_r+0x174>
 800e3fa:	89ab      	ldrh	r3, [r5, #12]
 800e3fc:	065b      	lsls	r3, r3, #25
 800e3fe:	f53f af2d 	bmi.w	800e25c <_svfiprintf_r+0x28>
 800e402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e404:	e72c      	b.n	800e260 <_svfiprintf_r+0x2c>
 800e406:	ab03      	add	r3, sp, #12
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	462a      	mov	r2, r5
 800e40c:	4b05      	ldr	r3, [pc, #20]	@ (800e424 <_svfiprintf_r+0x1f0>)
 800e40e:	a904      	add	r1, sp, #16
 800e410:	4638      	mov	r0, r7
 800e412:	f7fe f84d 	bl	800c4b0 <_printf_i>
 800e416:	e7ed      	b.n	800e3f4 <_svfiprintf_r+0x1c0>
 800e418:	0800effe 	.word	0x0800effe
 800e41c:	0800f008 	.word	0x0800f008
 800e420:	0800bf81 	.word	0x0800bf81
 800e424:	0800e17d 	.word	0x0800e17d
 800e428:	0800f004 	.word	0x0800f004

0800e42c <__sfputc_r>:
 800e42c:	6893      	ldr	r3, [r2, #8]
 800e42e:	3b01      	subs	r3, #1
 800e430:	2b00      	cmp	r3, #0
 800e432:	b410      	push	{r4}
 800e434:	6093      	str	r3, [r2, #8]
 800e436:	da08      	bge.n	800e44a <__sfputc_r+0x1e>
 800e438:	6994      	ldr	r4, [r2, #24]
 800e43a:	42a3      	cmp	r3, r4
 800e43c:	db01      	blt.n	800e442 <__sfputc_r+0x16>
 800e43e:	290a      	cmp	r1, #10
 800e440:	d103      	bne.n	800e44a <__sfputc_r+0x1e>
 800e442:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e446:	f000 b9df 	b.w	800e808 <__swbuf_r>
 800e44a:	6813      	ldr	r3, [r2, #0]
 800e44c:	1c58      	adds	r0, r3, #1
 800e44e:	6010      	str	r0, [r2, #0]
 800e450:	7019      	strb	r1, [r3, #0]
 800e452:	4608      	mov	r0, r1
 800e454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <__sfputs_r>:
 800e45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45c:	4606      	mov	r6, r0
 800e45e:	460f      	mov	r7, r1
 800e460:	4614      	mov	r4, r2
 800e462:	18d5      	adds	r5, r2, r3
 800e464:	42ac      	cmp	r4, r5
 800e466:	d101      	bne.n	800e46c <__sfputs_r+0x12>
 800e468:	2000      	movs	r0, #0
 800e46a:	e007      	b.n	800e47c <__sfputs_r+0x22>
 800e46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e470:	463a      	mov	r2, r7
 800e472:	4630      	mov	r0, r6
 800e474:	f7ff ffda 	bl	800e42c <__sfputc_r>
 800e478:	1c43      	adds	r3, r0, #1
 800e47a:	d1f3      	bne.n	800e464 <__sfputs_r+0xa>
 800e47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e480 <_vfiprintf_r>:
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	460d      	mov	r5, r1
 800e486:	b09d      	sub	sp, #116	@ 0x74
 800e488:	4614      	mov	r4, r2
 800e48a:	4698      	mov	r8, r3
 800e48c:	4606      	mov	r6, r0
 800e48e:	b118      	cbz	r0, 800e498 <_vfiprintf_r+0x18>
 800e490:	6a03      	ldr	r3, [r0, #32]
 800e492:	b90b      	cbnz	r3, 800e498 <_vfiprintf_r+0x18>
 800e494:	f7fe f9b6 	bl	800c804 <__sinit>
 800e498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e49a:	07d9      	lsls	r1, r3, #31
 800e49c:	d405      	bmi.n	800e4aa <_vfiprintf_r+0x2a>
 800e49e:	89ab      	ldrh	r3, [r5, #12]
 800e4a0:	059a      	lsls	r2, r3, #22
 800e4a2:	d402      	bmi.n	800e4aa <_vfiprintf_r+0x2a>
 800e4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4a6:	f7fe fb86 	bl	800cbb6 <__retarget_lock_acquire_recursive>
 800e4aa:	89ab      	ldrh	r3, [r5, #12]
 800e4ac:	071b      	lsls	r3, r3, #28
 800e4ae:	d501      	bpl.n	800e4b4 <_vfiprintf_r+0x34>
 800e4b0:	692b      	ldr	r3, [r5, #16]
 800e4b2:	b99b      	cbnz	r3, 800e4dc <_vfiprintf_r+0x5c>
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f000 f9e4 	bl	800e884 <__swsetup_r>
 800e4bc:	b170      	cbz	r0, 800e4dc <_vfiprintf_r+0x5c>
 800e4be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4c0:	07dc      	lsls	r4, r3, #31
 800e4c2:	d504      	bpl.n	800e4ce <_vfiprintf_r+0x4e>
 800e4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c8:	b01d      	add	sp, #116	@ 0x74
 800e4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ce:	89ab      	ldrh	r3, [r5, #12]
 800e4d0:	0598      	lsls	r0, r3, #22
 800e4d2:	d4f7      	bmi.n	800e4c4 <_vfiprintf_r+0x44>
 800e4d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4d6:	f7fe fb6f 	bl	800cbb8 <__retarget_lock_release_recursive>
 800e4da:	e7f3      	b.n	800e4c4 <_vfiprintf_r+0x44>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4e0:	2320      	movs	r3, #32
 800e4e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4ea:	2330      	movs	r3, #48	@ 0x30
 800e4ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e69c <_vfiprintf_r+0x21c>
 800e4f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4f4:	f04f 0901 	mov.w	r9, #1
 800e4f8:	4623      	mov	r3, r4
 800e4fa:	469a      	mov	sl, r3
 800e4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e500:	b10a      	cbz	r2, 800e506 <_vfiprintf_r+0x86>
 800e502:	2a25      	cmp	r2, #37	@ 0x25
 800e504:	d1f9      	bne.n	800e4fa <_vfiprintf_r+0x7a>
 800e506:	ebba 0b04 	subs.w	fp, sl, r4
 800e50a:	d00b      	beq.n	800e524 <_vfiprintf_r+0xa4>
 800e50c:	465b      	mov	r3, fp
 800e50e:	4622      	mov	r2, r4
 800e510:	4629      	mov	r1, r5
 800e512:	4630      	mov	r0, r6
 800e514:	f7ff ffa1 	bl	800e45a <__sfputs_r>
 800e518:	3001      	adds	r0, #1
 800e51a:	f000 80a7 	beq.w	800e66c <_vfiprintf_r+0x1ec>
 800e51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e520:	445a      	add	r2, fp
 800e522:	9209      	str	r2, [sp, #36]	@ 0x24
 800e524:	f89a 3000 	ldrb.w	r3, [sl]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f000 809f 	beq.w	800e66c <_vfiprintf_r+0x1ec>
 800e52e:	2300      	movs	r3, #0
 800e530:	f04f 32ff 	mov.w	r2, #4294967295
 800e534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e538:	f10a 0a01 	add.w	sl, sl, #1
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	9307      	str	r3, [sp, #28]
 800e540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e544:	931a      	str	r3, [sp, #104]	@ 0x68
 800e546:	4654      	mov	r4, sl
 800e548:	2205      	movs	r2, #5
 800e54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e54e:	4853      	ldr	r0, [pc, #332]	@ (800e69c <_vfiprintf_r+0x21c>)
 800e550:	f7f1 fe3e 	bl	80001d0 <memchr>
 800e554:	9a04      	ldr	r2, [sp, #16]
 800e556:	b9d8      	cbnz	r0, 800e590 <_vfiprintf_r+0x110>
 800e558:	06d1      	lsls	r1, r2, #27
 800e55a:	bf44      	itt	mi
 800e55c:	2320      	movmi	r3, #32
 800e55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e562:	0713      	lsls	r3, r2, #28
 800e564:	bf44      	itt	mi
 800e566:	232b      	movmi	r3, #43	@ 0x2b
 800e568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e56c:	f89a 3000 	ldrb.w	r3, [sl]
 800e570:	2b2a      	cmp	r3, #42	@ 0x2a
 800e572:	d015      	beq.n	800e5a0 <_vfiprintf_r+0x120>
 800e574:	9a07      	ldr	r2, [sp, #28]
 800e576:	4654      	mov	r4, sl
 800e578:	2000      	movs	r0, #0
 800e57a:	f04f 0c0a 	mov.w	ip, #10
 800e57e:	4621      	mov	r1, r4
 800e580:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e584:	3b30      	subs	r3, #48	@ 0x30
 800e586:	2b09      	cmp	r3, #9
 800e588:	d94b      	bls.n	800e622 <_vfiprintf_r+0x1a2>
 800e58a:	b1b0      	cbz	r0, 800e5ba <_vfiprintf_r+0x13a>
 800e58c:	9207      	str	r2, [sp, #28]
 800e58e:	e014      	b.n	800e5ba <_vfiprintf_r+0x13a>
 800e590:	eba0 0308 	sub.w	r3, r0, r8
 800e594:	fa09 f303 	lsl.w	r3, r9, r3
 800e598:	4313      	orrs	r3, r2
 800e59a:	9304      	str	r3, [sp, #16]
 800e59c:	46a2      	mov	sl, r4
 800e59e:	e7d2      	b.n	800e546 <_vfiprintf_r+0xc6>
 800e5a0:	9b03      	ldr	r3, [sp, #12]
 800e5a2:	1d19      	adds	r1, r3, #4
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	9103      	str	r1, [sp, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	bfbb      	ittet	lt
 800e5ac:	425b      	neglt	r3, r3
 800e5ae:	f042 0202 	orrlt.w	r2, r2, #2
 800e5b2:	9307      	strge	r3, [sp, #28]
 800e5b4:	9307      	strlt	r3, [sp, #28]
 800e5b6:	bfb8      	it	lt
 800e5b8:	9204      	strlt	r2, [sp, #16]
 800e5ba:	7823      	ldrb	r3, [r4, #0]
 800e5bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5be:	d10a      	bne.n	800e5d6 <_vfiprintf_r+0x156>
 800e5c0:	7863      	ldrb	r3, [r4, #1]
 800e5c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5c4:	d132      	bne.n	800e62c <_vfiprintf_r+0x1ac>
 800e5c6:	9b03      	ldr	r3, [sp, #12]
 800e5c8:	1d1a      	adds	r2, r3, #4
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	9203      	str	r2, [sp, #12]
 800e5ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5d2:	3402      	adds	r4, #2
 800e5d4:	9305      	str	r3, [sp, #20]
 800e5d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e6ac <_vfiprintf_r+0x22c>
 800e5da:	7821      	ldrb	r1, [r4, #0]
 800e5dc:	2203      	movs	r2, #3
 800e5de:	4650      	mov	r0, sl
 800e5e0:	f7f1 fdf6 	bl	80001d0 <memchr>
 800e5e4:	b138      	cbz	r0, 800e5f6 <_vfiprintf_r+0x176>
 800e5e6:	9b04      	ldr	r3, [sp, #16]
 800e5e8:	eba0 000a 	sub.w	r0, r0, sl
 800e5ec:	2240      	movs	r2, #64	@ 0x40
 800e5ee:	4082      	lsls	r2, r0
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	3401      	adds	r4, #1
 800e5f4:	9304      	str	r3, [sp, #16]
 800e5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fa:	4829      	ldr	r0, [pc, #164]	@ (800e6a0 <_vfiprintf_r+0x220>)
 800e5fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e600:	2206      	movs	r2, #6
 800e602:	f7f1 fde5 	bl	80001d0 <memchr>
 800e606:	2800      	cmp	r0, #0
 800e608:	d03f      	beq.n	800e68a <_vfiprintf_r+0x20a>
 800e60a:	4b26      	ldr	r3, [pc, #152]	@ (800e6a4 <_vfiprintf_r+0x224>)
 800e60c:	bb1b      	cbnz	r3, 800e656 <_vfiprintf_r+0x1d6>
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	3307      	adds	r3, #7
 800e612:	f023 0307 	bic.w	r3, r3, #7
 800e616:	3308      	adds	r3, #8
 800e618:	9303      	str	r3, [sp, #12]
 800e61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e61c:	443b      	add	r3, r7
 800e61e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e620:	e76a      	b.n	800e4f8 <_vfiprintf_r+0x78>
 800e622:	fb0c 3202 	mla	r2, ip, r2, r3
 800e626:	460c      	mov	r4, r1
 800e628:	2001      	movs	r0, #1
 800e62a:	e7a8      	b.n	800e57e <_vfiprintf_r+0xfe>
 800e62c:	2300      	movs	r3, #0
 800e62e:	3401      	adds	r4, #1
 800e630:	9305      	str	r3, [sp, #20]
 800e632:	4619      	mov	r1, r3
 800e634:	f04f 0c0a 	mov.w	ip, #10
 800e638:	4620      	mov	r0, r4
 800e63a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e63e:	3a30      	subs	r2, #48	@ 0x30
 800e640:	2a09      	cmp	r2, #9
 800e642:	d903      	bls.n	800e64c <_vfiprintf_r+0x1cc>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d0c6      	beq.n	800e5d6 <_vfiprintf_r+0x156>
 800e648:	9105      	str	r1, [sp, #20]
 800e64a:	e7c4      	b.n	800e5d6 <_vfiprintf_r+0x156>
 800e64c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e650:	4604      	mov	r4, r0
 800e652:	2301      	movs	r3, #1
 800e654:	e7f0      	b.n	800e638 <_vfiprintf_r+0x1b8>
 800e656:	ab03      	add	r3, sp, #12
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	462a      	mov	r2, r5
 800e65c:	4b12      	ldr	r3, [pc, #72]	@ (800e6a8 <_vfiprintf_r+0x228>)
 800e65e:	a904      	add	r1, sp, #16
 800e660:	4630      	mov	r0, r6
 800e662:	f7fd fc8d 	bl	800bf80 <_printf_float>
 800e666:	4607      	mov	r7, r0
 800e668:	1c78      	adds	r0, r7, #1
 800e66a:	d1d6      	bne.n	800e61a <_vfiprintf_r+0x19a>
 800e66c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e66e:	07d9      	lsls	r1, r3, #31
 800e670:	d405      	bmi.n	800e67e <_vfiprintf_r+0x1fe>
 800e672:	89ab      	ldrh	r3, [r5, #12]
 800e674:	059a      	lsls	r2, r3, #22
 800e676:	d402      	bmi.n	800e67e <_vfiprintf_r+0x1fe>
 800e678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e67a:	f7fe fa9d 	bl	800cbb8 <__retarget_lock_release_recursive>
 800e67e:	89ab      	ldrh	r3, [r5, #12]
 800e680:	065b      	lsls	r3, r3, #25
 800e682:	f53f af1f 	bmi.w	800e4c4 <_vfiprintf_r+0x44>
 800e686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e688:	e71e      	b.n	800e4c8 <_vfiprintf_r+0x48>
 800e68a:	ab03      	add	r3, sp, #12
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	462a      	mov	r2, r5
 800e690:	4b05      	ldr	r3, [pc, #20]	@ (800e6a8 <_vfiprintf_r+0x228>)
 800e692:	a904      	add	r1, sp, #16
 800e694:	4630      	mov	r0, r6
 800e696:	f7fd ff0b 	bl	800c4b0 <_printf_i>
 800e69a:	e7e4      	b.n	800e666 <_vfiprintf_r+0x1e6>
 800e69c:	0800effe 	.word	0x0800effe
 800e6a0:	0800f008 	.word	0x0800f008
 800e6a4:	0800bf81 	.word	0x0800bf81
 800e6a8:	0800e45b 	.word	0x0800e45b
 800e6ac:	0800f004 	.word	0x0800f004

0800e6b0 <__sflush_r>:
 800e6b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b8:	0716      	lsls	r6, r2, #28
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	460c      	mov	r4, r1
 800e6be:	d454      	bmi.n	800e76a <__sflush_r+0xba>
 800e6c0:	684b      	ldr	r3, [r1, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	dc02      	bgt.n	800e6cc <__sflush_r+0x1c>
 800e6c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dd48      	ble.n	800e75e <__sflush_r+0xae>
 800e6cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	d045      	beq.n	800e75e <__sflush_r+0xae>
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e6d8:	682f      	ldr	r7, [r5, #0]
 800e6da:	6a21      	ldr	r1, [r4, #32]
 800e6dc:	602b      	str	r3, [r5, #0]
 800e6de:	d030      	beq.n	800e742 <__sflush_r+0x92>
 800e6e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e6e2:	89a3      	ldrh	r3, [r4, #12]
 800e6e4:	0759      	lsls	r1, r3, #29
 800e6e6:	d505      	bpl.n	800e6f4 <__sflush_r+0x44>
 800e6e8:	6863      	ldr	r3, [r4, #4]
 800e6ea:	1ad2      	subs	r2, r2, r3
 800e6ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6ee:	b10b      	cbz	r3, 800e6f4 <__sflush_r+0x44>
 800e6f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6f2:	1ad2      	subs	r2, r2, r3
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6f8:	6a21      	ldr	r1, [r4, #32]
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	47b0      	blx	r6
 800e6fe:	1c43      	adds	r3, r0, #1
 800e700:	89a3      	ldrh	r3, [r4, #12]
 800e702:	d106      	bne.n	800e712 <__sflush_r+0x62>
 800e704:	6829      	ldr	r1, [r5, #0]
 800e706:	291d      	cmp	r1, #29
 800e708:	d82b      	bhi.n	800e762 <__sflush_r+0xb2>
 800e70a:	4a2a      	ldr	r2, [pc, #168]	@ (800e7b4 <__sflush_r+0x104>)
 800e70c:	40ca      	lsrs	r2, r1
 800e70e:	07d6      	lsls	r6, r2, #31
 800e710:	d527      	bpl.n	800e762 <__sflush_r+0xb2>
 800e712:	2200      	movs	r2, #0
 800e714:	6062      	str	r2, [r4, #4]
 800e716:	04d9      	lsls	r1, r3, #19
 800e718:	6922      	ldr	r2, [r4, #16]
 800e71a:	6022      	str	r2, [r4, #0]
 800e71c:	d504      	bpl.n	800e728 <__sflush_r+0x78>
 800e71e:	1c42      	adds	r2, r0, #1
 800e720:	d101      	bne.n	800e726 <__sflush_r+0x76>
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	b903      	cbnz	r3, 800e728 <__sflush_r+0x78>
 800e726:	6560      	str	r0, [r4, #84]	@ 0x54
 800e728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e72a:	602f      	str	r7, [r5, #0]
 800e72c:	b1b9      	cbz	r1, 800e75e <__sflush_r+0xae>
 800e72e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e732:	4299      	cmp	r1, r3
 800e734:	d002      	beq.n	800e73c <__sflush_r+0x8c>
 800e736:	4628      	mov	r0, r5
 800e738:	f7ff f8a6 	bl	800d888 <_free_r>
 800e73c:	2300      	movs	r3, #0
 800e73e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e740:	e00d      	b.n	800e75e <__sflush_r+0xae>
 800e742:	2301      	movs	r3, #1
 800e744:	4628      	mov	r0, r5
 800e746:	47b0      	blx	r6
 800e748:	4602      	mov	r2, r0
 800e74a:	1c50      	adds	r0, r2, #1
 800e74c:	d1c9      	bne.n	800e6e2 <__sflush_r+0x32>
 800e74e:	682b      	ldr	r3, [r5, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d0c6      	beq.n	800e6e2 <__sflush_r+0x32>
 800e754:	2b1d      	cmp	r3, #29
 800e756:	d001      	beq.n	800e75c <__sflush_r+0xac>
 800e758:	2b16      	cmp	r3, #22
 800e75a:	d11e      	bne.n	800e79a <__sflush_r+0xea>
 800e75c:	602f      	str	r7, [r5, #0]
 800e75e:	2000      	movs	r0, #0
 800e760:	e022      	b.n	800e7a8 <__sflush_r+0xf8>
 800e762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e766:	b21b      	sxth	r3, r3
 800e768:	e01b      	b.n	800e7a2 <__sflush_r+0xf2>
 800e76a:	690f      	ldr	r7, [r1, #16]
 800e76c:	2f00      	cmp	r7, #0
 800e76e:	d0f6      	beq.n	800e75e <__sflush_r+0xae>
 800e770:	0793      	lsls	r3, r2, #30
 800e772:	680e      	ldr	r6, [r1, #0]
 800e774:	bf08      	it	eq
 800e776:	694b      	ldreq	r3, [r1, #20]
 800e778:	600f      	str	r7, [r1, #0]
 800e77a:	bf18      	it	ne
 800e77c:	2300      	movne	r3, #0
 800e77e:	eba6 0807 	sub.w	r8, r6, r7
 800e782:	608b      	str	r3, [r1, #8]
 800e784:	f1b8 0f00 	cmp.w	r8, #0
 800e788:	dde9      	ble.n	800e75e <__sflush_r+0xae>
 800e78a:	6a21      	ldr	r1, [r4, #32]
 800e78c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e78e:	4643      	mov	r3, r8
 800e790:	463a      	mov	r2, r7
 800e792:	4628      	mov	r0, r5
 800e794:	47b0      	blx	r6
 800e796:	2800      	cmp	r0, #0
 800e798:	dc08      	bgt.n	800e7ac <__sflush_r+0xfc>
 800e79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7a2:	81a3      	strh	r3, [r4, #12]
 800e7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ac:	4407      	add	r7, r0
 800e7ae:	eba8 0800 	sub.w	r8, r8, r0
 800e7b2:	e7e7      	b.n	800e784 <__sflush_r+0xd4>
 800e7b4:	20400001 	.word	0x20400001

0800e7b8 <_fflush_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	690b      	ldr	r3, [r1, #16]
 800e7bc:	4605      	mov	r5, r0
 800e7be:	460c      	mov	r4, r1
 800e7c0:	b913      	cbnz	r3, 800e7c8 <_fflush_r+0x10>
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}
 800e7c8:	b118      	cbz	r0, 800e7d2 <_fflush_r+0x1a>
 800e7ca:	6a03      	ldr	r3, [r0, #32]
 800e7cc:	b90b      	cbnz	r3, 800e7d2 <_fflush_r+0x1a>
 800e7ce:	f7fe f819 	bl	800c804 <__sinit>
 800e7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d0f3      	beq.n	800e7c2 <_fflush_r+0xa>
 800e7da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7dc:	07d0      	lsls	r0, r2, #31
 800e7de:	d404      	bmi.n	800e7ea <_fflush_r+0x32>
 800e7e0:	0599      	lsls	r1, r3, #22
 800e7e2:	d402      	bmi.n	800e7ea <_fflush_r+0x32>
 800e7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7e6:	f7fe f9e6 	bl	800cbb6 <__retarget_lock_acquire_recursive>
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	4621      	mov	r1, r4
 800e7ee:	f7ff ff5f 	bl	800e6b0 <__sflush_r>
 800e7f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7f4:	07da      	lsls	r2, r3, #31
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	d4e4      	bmi.n	800e7c4 <_fflush_r+0xc>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	059b      	lsls	r3, r3, #22
 800e7fe:	d4e1      	bmi.n	800e7c4 <_fflush_r+0xc>
 800e800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e802:	f7fe f9d9 	bl	800cbb8 <__retarget_lock_release_recursive>
 800e806:	e7dd      	b.n	800e7c4 <_fflush_r+0xc>

0800e808 <__swbuf_r>:
 800e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80a:	460e      	mov	r6, r1
 800e80c:	4614      	mov	r4, r2
 800e80e:	4605      	mov	r5, r0
 800e810:	b118      	cbz	r0, 800e81a <__swbuf_r+0x12>
 800e812:	6a03      	ldr	r3, [r0, #32]
 800e814:	b90b      	cbnz	r3, 800e81a <__swbuf_r+0x12>
 800e816:	f7fd fff5 	bl	800c804 <__sinit>
 800e81a:	69a3      	ldr	r3, [r4, #24]
 800e81c:	60a3      	str	r3, [r4, #8]
 800e81e:	89a3      	ldrh	r3, [r4, #12]
 800e820:	071a      	lsls	r2, r3, #28
 800e822:	d501      	bpl.n	800e828 <__swbuf_r+0x20>
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	b943      	cbnz	r3, 800e83a <__swbuf_r+0x32>
 800e828:	4621      	mov	r1, r4
 800e82a:	4628      	mov	r0, r5
 800e82c:	f000 f82a 	bl	800e884 <__swsetup_r>
 800e830:	b118      	cbz	r0, 800e83a <__swbuf_r+0x32>
 800e832:	f04f 37ff 	mov.w	r7, #4294967295
 800e836:	4638      	mov	r0, r7
 800e838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e83a:	6823      	ldr	r3, [r4, #0]
 800e83c:	6922      	ldr	r2, [r4, #16]
 800e83e:	1a98      	subs	r0, r3, r2
 800e840:	6963      	ldr	r3, [r4, #20]
 800e842:	b2f6      	uxtb	r6, r6
 800e844:	4283      	cmp	r3, r0
 800e846:	4637      	mov	r7, r6
 800e848:	dc05      	bgt.n	800e856 <__swbuf_r+0x4e>
 800e84a:	4621      	mov	r1, r4
 800e84c:	4628      	mov	r0, r5
 800e84e:	f7ff ffb3 	bl	800e7b8 <_fflush_r>
 800e852:	2800      	cmp	r0, #0
 800e854:	d1ed      	bne.n	800e832 <__swbuf_r+0x2a>
 800e856:	68a3      	ldr	r3, [r4, #8]
 800e858:	3b01      	subs	r3, #1
 800e85a:	60a3      	str	r3, [r4, #8]
 800e85c:	6823      	ldr	r3, [r4, #0]
 800e85e:	1c5a      	adds	r2, r3, #1
 800e860:	6022      	str	r2, [r4, #0]
 800e862:	701e      	strb	r6, [r3, #0]
 800e864:	6962      	ldr	r2, [r4, #20]
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	429a      	cmp	r2, r3
 800e86a:	d004      	beq.n	800e876 <__swbuf_r+0x6e>
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	07db      	lsls	r3, r3, #31
 800e870:	d5e1      	bpl.n	800e836 <__swbuf_r+0x2e>
 800e872:	2e0a      	cmp	r6, #10
 800e874:	d1df      	bne.n	800e836 <__swbuf_r+0x2e>
 800e876:	4621      	mov	r1, r4
 800e878:	4628      	mov	r0, r5
 800e87a:	f7ff ff9d 	bl	800e7b8 <_fflush_r>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d0d9      	beq.n	800e836 <__swbuf_r+0x2e>
 800e882:	e7d6      	b.n	800e832 <__swbuf_r+0x2a>

0800e884 <__swsetup_r>:
 800e884:	b538      	push	{r3, r4, r5, lr}
 800e886:	4b29      	ldr	r3, [pc, #164]	@ (800e92c <__swsetup_r+0xa8>)
 800e888:	4605      	mov	r5, r0
 800e88a:	6818      	ldr	r0, [r3, #0]
 800e88c:	460c      	mov	r4, r1
 800e88e:	b118      	cbz	r0, 800e898 <__swsetup_r+0x14>
 800e890:	6a03      	ldr	r3, [r0, #32]
 800e892:	b90b      	cbnz	r3, 800e898 <__swsetup_r+0x14>
 800e894:	f7fd ffb6 	bl	800c804 <__sinit>
 800e898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e89c:	0719      	lsls	r1, r3, #28
 800e89e:	d422      	bmi.n	800e8e6 <__swsetup_r+0x62>
 800e8a0:	06da      	lsls	r2, r3, #27
 800e8a2:	d407      	bmi.n	800e8b4 <__swsetup_r+0x30>
 800e8a4:	2209      	movs	r2, #9
 800e8a6:	602a      	str	r2, [r5, #0]
 800e8a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8ac:	81a3      	strh	r3, [r4, #12]
 800e8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b2:	e033      	b.n	800e91c <__swsetup_r+0x98>
 800e8b4:	0758      	lsls	r0, r3, #29
 800e8b6:	d512      	bpl.n	800e8de <__swsetup_r+0x5a>
 800e8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8ba:	b141      	cbz	r1, 800e8ce <__swsetup_r+0x4a>
 800e8bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8c0:	4299      	cmp	r1, r3
 800e8c2:	d002      	beq.n	800e8ca <__swsetup_r+0x46>
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	f7fe ffdf 	bl	800d888 <_free_r>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8ce:	89a3      	ldrh	r3, [r4, #12]
 800e8d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e8d4:	81a3      	strh	r3, [r4, #12]
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	6063      	str	r3, [r4, #4]
 800e8da:	6923      	ldr	r3, [r4, #16]
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f043 0308 	orr.w	r3, r3, #8
 800e8e4:	81a3      	strh	r3, [r4, #12]
 800e8e6:	6923      	ldr	r3, [r4, #16]
 800e8e8:	b94b      	cbnz	r3, 800e8fe <__swsetup_r+0x7a>
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e8f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8f4:	d003      	beq.n	800e8fe <__swsetup_r+0x7a>
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	f000 f8fb 	bl	800eaf4 <__smakebuf_r>
 800e8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e902:	f013 0201 	ands.w	r2, r3, #1
 800e906:	d00a      	beq.n	800e91e <__swsetup_r+0x9a>
 800e908:	2200      	movs	r2, #0
 800e90a:	60a2      	str	r2, [r4, #8]
 800e90c:	6962      	ldr	r2, [r4, #20]
 800e90e:	4252      	negs	r2, r2
 800e910:	61a2      	str	r2, [r4, #24]
 800e912:	6922      	ldr	r2, [r4, #16]
 800e914:	b942      	cbnz	r2, 800e928 <__swsetup_r+0xa4>
 800e916:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e91a:	d1c5      	bne.n	800e8a8 <__swsetup_r+0x24>
 800e91c:	bd38      	pop	{r3, r4, r5, pc}
 800e91e:	0799      	lsls	r1, r3, #30
 800e920:	bf58      	it	pl
 800e922:	6962      	ldrpl	r2, [r4, #20]
 800e924:	60a2      	str	r2, [r4, #8]
 800e926:	e7f4      	b.n	800e912 <__swsetup_r+0x8e>
 800e928:	2000      	movs	r0, #0
 800e92a:	e7f7      	b.n	800e91c <__swsetup_r+0x98>
 800e92c:	2000001c 	.word	0x2000001c

0800e930 <memmove>:
 800e930:	4288      	cmp	r0, r1
 800e932:	b510      	push	{r4, lr}
 800e934:	eb01 0402 	add.w	r4, r1, r2
 800e938:	d902      	bls.n	800e940 <memmove+0x10>
 800e93a:	4284      	cmp	r4, r0
 800e93c:	4623      	mov	r3, r4
 800e93e:	d807      	bhi.n	800e950 <memmove+0x20>
 800e940:	1e43      	subs	r3, r0, #1
 800e942:	42a1      	cmp	r1, r4
 800e944:	d008      	beq.n	800e958 <memmove+0x28>
 800e946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e94e:	e7f8      	b.n	800e942 <memmove+0x12>
 800e950:	4402      	add	r2, r0
 800e952:	4601      	mov	r1, r0
 800e954:	428a      	cmp	r2, r1
 800e956:	d100      	bne.n	800e95a <memmove+0x2a>
 800e958:	bd10      	pop	{r4, pc}
 800e95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e962:	e7f7      	b.n	800e954 <memmove+0x24>

0800e964 <_sbrk_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4d06      	ldr	r5, [pc, #24]	@ (800e980 <_sbrk_r+0x1c>)
 800e968:	2300      	movs	r3, #0
 800e96a:	4604      	mov	r4, r0
 800e96c:	4608      	mov	r0, r1
 800e96e:	602b      	str	r3, [r5, #0]
 800e970:	f7f3 fa0a 	bl	8001d88 <_sbrk>
 800e974:	1c43      	adds	r3, r0, #1
 800e976:	d102      	bne.n	800e97e <_sbrk_r+0x1a>
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	b103      	cbz	r3, 800e97e <_sbrk_r+0x1a>
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	20003540 	.word	0x20003540

0800e984 <__assert_func>:
 800e984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e986:	4614      	mov	r4, r2
 800e988:	461a      	mov	r2, r3
 800e98a:	4b09      	ldr	r3, [pc, #36]	@ (800e9b0 <__assert_func+0x2c>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4605      	mov	r5, r0
 800e990:	68d8      	ldr	r0, [r3, #12]
 800e992:	b14c      	cbz	r4, 800e9a8 <__assert_func+0x24>
 800e994:	4b07      	ldr	r3, [pc, #28]	@ (800e9b4 <__assert_func+0x30>)
 800e996:	9100      	str	r1, [sp, #0]
 800e998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e99c:	4906      	ldr	r1, [pc, #24]	@ (800e9b8 <__assert_func+0x34>)
 800e99e:	462b      	mov	r3, r5
 800e9a0:	f000 f870 	bl	800ea84 <fiprintf>
 800e9a4:	f000 f904 	bl	800ebb0 <abort>
 800e9a8:	4b04      	ldr	r3, [pc, #16]	@ (800e9bc <__assert_func+0x38>)
 800e9aa:	461c      	mov	r4, r3
 800e9ac:	e7f3      	b.n	800e996 <__assert_func+0x12>
 800e9ae:	bf00      	nop
 800e9b0:	2000001c 	.word	0x2000001c
 800e9b4:	0800f019 	.word	0x0800f019
 800e9b8:	0800f026 	.word	0x0800f026
 800e9bc:	0800f054 	.word	0x0800f054

0800e9c0 <_calloc_r>:
 800e9c0:	b570      	push	{r4, r5, r6, lr}
 800e9c2:	fba1 5402 	umull	r5, r4, r1, r2
 800e9c6:	b934      	cbnz	r4, 800e9d6 <_calloc_r+0x16>
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	f7fe ffd1 	bl	800d970 <_malloc_r>
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	b928      	cbnz	r0, 800e9de <_calloc_r+0x1e>
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	bd70      	pop	{r4, r5, r6, pc}
 800e9d6:	220c      	movs	r2, #12
 800e9d8:	6002      	str	r2, [r0, #0]
 800e9da:	2600      	movs	r6, #0
 800e9dc:	e7f9      	b.n	800e9d2 <_calloc_r+0x12>
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	f7fd fffb 	bl	800c9dc <memset>
 800e9e6:	e7f4      	b.n	800e9d2 <_calloc_r+0x12>

0800e9e8 <__ascii_mbtowc>:
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	b901      	cbnz	r1, 800e9ee <__ascii_mbtowc+0x6>
 800e9ec:	a901      	add	r1, sp, #4
 800e9ee:	b142      	cbz	r2, 800ea02 <__ascii_mbtowc+0x1a>
 800e9f0:	b14b      	cbz	r3, 800ea06 <__ascii_mbtowc+0x1e>
 800e9f2:	7813      	ldrb	r3, [r2, #0]
 800e9f4:	600b      	str	r3, [r1, #0]
 800e9f6:	7812      	ldrb	r2, [r2, #0]
 800e9f8:	1e10      	subs	r0, r2, #0
 800e9fa:	bf18      	it	ne
 800e9fc:	2001      	movne	r0, #1
 800e9fe:	b002      	add	sp, #8
 800ea00:	4770      	bx	lr
 800ea02:	4610      	mov	r0, r2
 800ea04:	e7fb      	b.n	800e9fe <__ascii_mbtowc+0x16>
 800ea06:	f06f 0001 	mvn.w	r0, #1
 800ea0a:	e7f8      	b.n	800e9fe <__ascii_mbtowc+0x16>

0800ea0c <_realloc_r>:
 800ea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea10:	4607      	mov	r7, r0
 800ea12:	4614      	mov	r4, r2
 800ea14:	460d      	mov	r5, r1
 800ea16:	b921      	cbnz	r1, 800ea22 <_realloc_r+0x16>
 800ea18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	f7fe bfa7 	b.w	800d970 <_malloc_r>
 800ea22:	b92a      	cbnz	r2, 800ea30 <_realloc_r+0x24>
 800ea24:	f7fe ff30 	bl	800d888 <_free_r>
 800ea28:	4625      	mov	r5, r4
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea30:	f000 f8c5 	bl	800ebbe <_malloc_usable_size_r>
 800ea34:	4284      	cmp	r4, r0
 800ea36:	4606      	mov	r6, r0
 800ea38:	d802      	bhi.n	800ea40 <_realloc_r+0x34>
 800ea3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea3e:	d8f4      	bhi.n	800ea2a <_realloc_r+0x1e>
 800ea40:	4621      	mov	r1, r4
 800ea42:	4638      	mov	r0, r7
 800ea44:	f7fe ff94 	bl	800d970 <_malloc_r>
 800ea48:	4680      	mov	r8, r0
 800ea4a:	b908      	cbnz	r0, 800ea50 <_realloc_r+0x44>
 800ea4c:	4645      	mov	r5, r8
 800ea4e:	e7ec      	b.n	800ea2a <_realloc_r+0x1e>
 800ea50:	42b4      	cmp	r4, r6
 800ea52:	4622      	mov	r2, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	bf28      	it	cs
 800ea58:	4632      	movcs	r2, r6
 800ea5a:	f7fe f8ae 	bl	800cbba <memcpy>
 800ea5e:	4629      	mov	r1, r5
 800ea60:	4638      	mov	r0, r7
 800ea62:	f7fe ff11 	bl	800d888 <_free_r>
 800ea66:	e7f1      	b.n	800ea4c <_realloc_r+0x40>

0800ea68 <__ascii_wctomb>:
 800ea68:	4603      	mov	r3, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	b141      	cbz	r1, 800ea80 <__ascii_wctomb+0x18>
 800ea6e:	2aff      	cmp	r2, #255	@ 0xff
 800ea70:	d904      	bls.n	800ea7c <__ascii_wctomb+0x14>
 800ea72:	228a      	movs	r2, #138	@ 0x8a
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7a:	4770      	bx	lr
 800ea7c:	700a      	strb	r2, [r1, #0]
 800ea7e:	2001      	movs	r0, #1
 800ea80:	4770      	bx	lr
	...

0800ea84 <fiprintf>:
 800ea84:	b40e      	push	{r1, r2, r3}
 800ea86:	b503      	push	{r0, r1, lr}
 800ea88:	4601      	mov	r1, r0
 800ea8a:	ab03      	add	r3, sp, #12
 800ea8c:	4805      	ldr	r0, [pc, #20]	@ (800eaa4 <fiprintf+0x20>)
 800ea8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea92:	6800      	ldr	r0, [r0, #0]
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	f7ff fcf3 	bl	800e480 <_vfiprintf_r>
 800ea9a:	b002      	add	sp, #8
 800ea9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaa0:	b003      	add	sp, #12
 800eaa2:	4770      	bx	lr
 800eaa4:	2000001c 	.word	0x2000001c

0800eaa8 <__swhatbuf_r>:
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	460c      	mov	r4, r1
 800eaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eab0:	2900      	cmp	r1, #0
 800eab2:	b096      	sub	sp, #88	@ 0x58
 800eab4:	4615      	mov	r5, r2
 800eab6:	461e      	mov	r6, r3
 800eab8:	da0d      	bge.n	800ead6 <__swhatbuf_r+0x2e>
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eac0:	f04f 0100 	mov.w	r1, #0
 800eac4:	bf14      	ite	ne
 800eac6:	2340      	movne	r3, #64	@ 0x40
 800eac8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eacc:	2000      	movs	r0, #0
 800eace:	6031      	str	r1, [r6, #0]
 800ead0:	602b      	str	r3, [r5, #0]
 800ead2:	b016      	add	sp, #88	@ 0x58
 800ead4:	bd70      	pop	{r4, r5, r6, pc}
 800ead6:	466a      	mov	r2, sp
 800ead8:	f000 f848 	bl	800eb6c <_fstat_r>
 800eadc:	2800      	cmp	r0, #0
 800eade:	dbec      	blt.n	800eaba <__swhatbuf_r+0x12>
 800eae0:	9901      	ldr	r1, [sp, #4]
 800eae2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eae6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eaea:	4259      	negs	r1, r3
 800eaec:	4159      	adcs	r1, r3
 800eaee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eaf2:	e7eb      	b.n	800eacc <__swhatbuf_r+0x24>

0800eaf4 <__smakebuf_r>:
 800eaf4:	898b      	ldrh	r3, [r1, #12]
 800eaf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eaf8:	079d      	lsls	r5, r3, #30
 800eafa:	4606      	mov	r6, r0
 800eafc:	460c      	mov	r4, r1
 800eafe:	d507      	bpl.n	800eb10 <__smakebuf_r+0x1c>
 800eb00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	6123      	str	r3, [r4, #16]
 800eb08:	2301      	movs	r3, #1
 800eb0a:	6163      	str	r3, [r4, #20]
 800eb0c:	b003      	add	sp, #12
 800eb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb10:	ab01      	add	r3, sp, #4
 800eb12:	466a      	mov	r2, sp
 800eb14:	f7ff ffc8 	bl	800eaa8 <__swhatbuf_r>
 800eb18:	9f00      	ldr	r7, [sp, #0]
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f7fe ff26 	bl	800d970 <_malloc_r>
 800eb24:	b948      	cbnz	r0, 800eb3a <__smakebuf_r+0x46>
 800eb26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb2a:	059a      	lsls	r2, r3, #22
 800eb2c:	d4ee      	bmi.n	800eb0c <__smakebuf_r+0x18>
 800eb2e:	f023 0303 	bic.w	r3, r3, #3
 800eb32:	f043 0302 	orr.w	r3, r3, #2
 800eb36:	81a3      	strh	r3, [r4, #12]
 800eb38:	e7e2      	b.n	800eb00 <__smakebuf_r+0xc>
 800eb3a:	89a3      	ldrh	r3, [r4, #12]
 800eb3c:	6020      	str	r0, [r4, #0]
 800eb3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb42:	81a3      	strh	r3, [r4, #12]
 800eb44:	9b01      	ldr	r3, [sp, #4]
 800eb46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eb4a:	b15b      	cbz	r3, 800eb64 <__smakebuf_r+0x70>
 800eb4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb50:	4630      	mov	r0, r6
 800eb52:	f000 f81d 	bl	800eb90 <_isatty_r>
 800eb56:	b128      	cbz	r0, 800eb64 <__smakebuf_r+0x70>
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	f023 0303 	bic.w	r3, r3, #3
 800eb5e:	f043 0301 	orr.w	r3, r3, #1
 800eb62:	81a3      	strh	r3, [r4, #12]
 800eb64:	89a3      	ldrh	r3, [r4, #12]
 800eb66:	431d      	orrs	r5, r3
 800eb68:	81a5      	strh	r5, [r4, #12]
 800eb6a:	e7cf      	b.n	800eb0c <__smakebuf_r+0x18>

0800eb6c <_fstat_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4d07      	ldr	r5, [pc, #28]	@ (800eb8c <_fstat_r+0x20>)
 800eb70:	2300      	movs	r3, #0
 800eb72:	4604      	mov	r4, r0
 800eb74:	4608      	mov	r0, r1
 800eb76:	4611      	mov	r1, r2
 800eb78:	602b      	str	r3, [r5, #0]
 800eb7a:	f7f3 f8dd 	bl	8001d38 <_fstat>
 800eb7e:	1c43      	adds	r3, r0, #1
 800eb80:	d102      	bne.n	800eb88 <_fstat_r+0x1c>
 800eb82:	682b      	ldr	r3, [r5, #0]
 800eb84:	b103      	cbz	r3, 800eb88 <_fstat_r+0x1c>
 800eb86:	6023      	str	r3, [r4, #0]
 800eb88:	bd38      	pop	{r3, r4, r5, pc}
 800eb8a:	bf00      	nop
 800eb8c:	20003540 	.word	0x20003540

0800eb90 <_isatty_r>:
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	4d06      	ldr	r5, [pc, #24]	@ (800ebac <_isatty_r+0x1c>)
 800eb94:	2300      	movs	r3, #0
 800eb96:	4604      	mov	r4, r0
 800eb98:	4608      	mov	r0, r1
 800eb9a:	602b      	str	r3, [r5, #0]
 800eb9c:	f7f3 f8dc 	bl	8001d58 <_isatty>
 800eba0:	1c43      	adds	r3, r0, #1
 800eba2:	d102      	bne.n	800ebaa <_isatty_r+0x1a>
 800eba4:	682b      	ldr	r3, [r5, #0]
 800eba6:	b103      	cbz	r3, 800ebaa <_isatty_r+0x1a>
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	bd38      	pop	{r3, r4, r5, pc}
 800ebac:	20003540 	.word	0x20003540

0800ebb0 <abort>:
 800ebb0:	b508      	push	{r3, lr}
 800ebb2:	2006      	movs	r0, #6
 800ebb4:	f000 f834 	bl	800ec20 <raise>
 800ebb8:	2001      	movs	r0, #1
 800ebba:	f7f3 f86d 	bl	8001c98 <_exit>

0800ebbe <_malloc_usable_size_r>:
 800ebbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebc2:	1f18      	subs	r0, r3, #4
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	bfbc      	itt	lt
 800ebc8:	580b      	ldrlt	r3, [r1, r0]
 800ebca:	18c0      	addlt	r0, r0, r3
 800ebcc:	4770      	bx	lr

0800ebce <_raise_r>:
 800ebce:	291f      	cmp	r1, #31
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	d904      	bls.n	800ebe2 <_raise_r+0x14>
 800ebd8:	2316      	movs	r3, #22
 800ebda:	6003      	str	r3, [r0, #0]
 800ebdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe0:	bd38      	pop	{r3, r4, r5, pc}
 800ebe2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ebe4:	b112      	cbz	r2, 800ebec <_raise_r+0x1e>
 800ebe6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebea:	b94b      	cbnz	r3, 800ec00 <_raise_r+0x32>
 800ebec:	4628      	mov	r0, r5
 800ebee:	f000 f831 	bl	800ec54 <_getpid_r>
 800ebf2:	4622      	mov	r2, r4
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebfc:	f000 b818 	b.w	800ec30 <_kill_r>
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d00a      	beq.n	800ec1a <_raise_r+0x4c>
 800ec04:	1c59      	adds	r1, r3, #1
 800ec06:	d103      	bne.n	800ec10 <_raise_r+0x42>
 800ec08:	2316      	movs	r3, #22
 800ec0a:	6003      	str	r3, [r0, #0]
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	e7e7      	b.n	800ebe0 <_raise_r+0x12>
 800ec10:	2100      	movs	r1, #0
 800ec12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec16:	4620      	mov	r0, r4
 800ec18:	4798      	blx	r3
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	e7e0      	b.n	800ebe0 <_raise_r+0x12>
	...

0800ec20 <raise>:
 800ec20:	4b02      	ldr	r3, [pc, #8]	@ (800ec2c <raise+0xc>)
 800ec22:	4601      	mov	r1, r0
 800ec24:	6818      	ldr	r0, [r3, #0]
 800ec26:	f7ff bfd2 	b.w	800ebce <_raise_r>
 800ec2a:	bf00      	nop
 800ec2c:	2000001c 	.word	0x2000001c

0800ec30 <_kill_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4d07      	ldr	r5, [pc, #28]	@ (800ec50 <_kill_r+0x20>)
 800ec34:	2300      	movs	r3, #0
 800ec36:	4604      	mov	r4, r0
 800ec38:	4608      	mov	r0, r1
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	602b      	str	r3, [r5, #0]
 800ec3e:	f7f3 f81b 	bl	8001c78 <_kill>
 800ec42:	1c43      	adds	r3, r0, #1
 800ec44:	d102      	bne.n	800ec4c <_kill_r+0x1c>
 800ec46:	682b      	ldr	r3, [r5, #0]
 800ec48:	b103      	cbz	r3, 800ec4c <_kill_r+0x1c>
 800ec4a:	6023      	str	r3, [r4, #0]
 800ec4c:	bd38      	pop	{r3, r4, r5, pc}
 800ec4e:	bf00      	nop
 800ec50:	20003540 	.word	0x20003540

0800ec54 <_getpid_r>:
 800ec54:	f7f3 b808 	b.w	8001c68 <_getpid>

0800ec58 <_init>:
 800ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5a:	bf00      	nop
 800ec5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec5e:	bc08      	pop	{r3}
 800ec60:	469e      	mov	lr, r3
 800ec62:	4770      	bx	lr

0800ec64 <_fini>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr
