/**
  ******************************************************************************
  * @file    app_comms_handler.h
  * @brief   Header for app_comms_handler.c module
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __APP_COMMS_HANDLER_H
#define __APP_COMMS_HANDLER_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include <stdint.h>
#include "val_status.h"
#include "val_data_store.h"

/* Exported defines ----------------------------------------------------------*/
#define COMM_MAX_ID_LEN          32
#define COMM_MAX_TOPIC_LEN       16
#define COMM_MAX_ACTION_LEN      32
#define COMM_MAX_MSG_LEN         32
#define COMM_MAX_JSON_DATA_LEN   128

/* Exported types ------------------------------------------------------------*/
typedef enum {
  COMM_RESP_STANDARD = 0,    /* Standard response with status and message */
  COMM_RESP_LIGHT_INTENSITY, /* Light intensity response */
  COMM_RESP_LIGHT_ALL_INTENSITIES, /* All light intensities response */
  COMM_RESP_SENSOR_DATA,     /* Sensor data response */
  COMM_RESP_ALL_SENSORS,     /* All sensors data response */
  COMM_RESP_ERROR_LOG,       /* Error log response */
  COMM_RESP_ERROR_COUNT,     /* Error count response */
  COMM_RESP_ALARM_STATUS,    /* Alarm status response */
  COMM_RESP_SYSTEM_INFO,     /* System info response */
  COMM_RESP_PING             /* Ping response */
} CommResponseType_t;

typedef struct {
  char msgId[COMM_MAX_ID_LEN];                /* Message ID */
  char topic[COMM_MAX_TOPIC_LEN];             /* Message topic */
  char action[COMM_MAX_ACTION_LEN];           /* Message action */
  char rawJsonData[COMM_MAX_JSON_DATA_LEN];   /* Raw JSON data string */
} CommCommandMsg_t;

typedef struct {
  uint8_t lightId;     /* Light ID (1-3) */
  uint8_t intensity;   /* Light intensity value (0-100) */
} LightIntensityData_t;

typedef struct {
  uint8_t intensities[3]; /* Intensity values for all three lights */
} AllLightIntensitiesData_t;

typedef struct {
  LightSensorData sensorData[3]; /* Sensor data for all lights */
} AllSensorsData_t;

typedef struct {
  uint16_t totalErrors;  /* Total number of errors recorded */
} ErrorCountData_t;

typedef struct {
  ErrorLogEntry_t entries[10]; /* Error log entries */
  uint8_t count;               /* Number of entries */
} ErrorLogData_t;

typedef struct {
  uint8_t activeErrors;    /* Bitmap of lights with active errors */
  uint8_t errorTypes[3];   /* Error types for each light */
} AlarmStatusData_t;

typedef struct {
  char deviceType[16];    /* Device type string */
  char firmwareVersion[16]; /* Firmware version string */
  char hardwareType[16];  /* Hardware type string */
  uint32_t clockSpeed;    /* System clock speed */
} SystemInfoData_t;

typedef struct {
  uint32_t timestamp;     /* Current system timestamp */
} PingData_t;

typedef struct {
  CommResponseType_t responseType;            /* Response type */
  char msgId[COMM_MAX_ID_LEN];                /* Message ID */
  char topic[COMM_MAX_TOPIC_LEN];             /* Message topic */
  char action[COMM_MAX_ACTION_LEN];           /* Message action */
  char status[COMM_MAX_MSG_LEN];              /* Status string */
  char message[COMM_MAX_MSG_LEN];             /* Message string */

  /* Response data based on response type */
  union {
    LightIntensityData_t lightIntensity;
    AllLightIntensitiesData_t allLightIntensities;
    LightSensorData_t sensorData;
    AllSensorsData_t allSensors;
    ErrorCountData_t errorCount;
    ErrorLogData_t errorLog;
    AlarmStatusData_t alarmStatus;
    SystemInfoData_t systemInfo;
    PingData_t ping;
  } data;
} CommResponseMsg_t;

/* Exported functions prototypes ---------------------------------------------*/
VAL_Status COMMS_Handler_Init(void);
VAL_Status COMMS_Handler_SendResponse(const CommResponseMsg_t* responseMsg);
VAL_Status COMMS_Handler_SendAlarmEvent(uint8_t lightId, ErrorType_t errorType, float value);

#ifdef __cplusplus
}
#endif

#endif /* __APP_COMMS_HANDLER_H */
